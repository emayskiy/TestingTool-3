
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РедактироватьКонструктором = Истина;
	ИдентификаторКонструктора = "WebServiceTaskTestBuilder_SoapUI";
	ИдентификаторКонструктораУниверсальный = "Universal";
	
	МенеджерТестирования = Справочники.ТестируемыеКлиенты.ТекущийКлиент1С;
	
	// Открыта форма редактирования
	Если ЗначениеЗаполнено(Параметры.Задание) Тогда		
		Задание = Параметры.Задание;
	Иначе
		СоздаватьИскатьДействияАвтоматически = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("ОбъектыНазначения") Тогда
		Если ТипЗнч(Параметры.ОбъектыНазначения) = Тип("Массив")
			И Параметры.ОбъектыНазначения.Количество()>0 Тогда			
			Задание = Параметры.ОбъектыНазначения[0];
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Задание) Тогда
		НайтиПараметрыПоЗаданию();
	Иначе
		Если ПредельноеВремяОжиданияВыполнения=0 Тогда
			ПредельноеВремяОжиданияВыполнения = 10;
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.СтраницыОбработки.ОтображениеСтраниц=ОтображениеСтраницФормы.Нет;
	ОтображениеПредельноеВремяОжиданияВыполнения();	
	ОтображениеАдресВебСервиса();
	ОтработатьПеремещениеПоСтраницам();
	
КонецПроцедуры

#Область ЗагрузкаПараметровЗадания

// Процедура - Найти параметры по заданию
// Ищет при открытии уже созданного задания параметры для запуска
&НаСервере
Процедура НайтиПараметрыПоЗаданию()
	
	Элементы.СоздатьНовоеЗадание.Заголовок = "Применить изменения";
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задания.Наименование,
	|	Задания.ID,
	|	Задания.Автор,
	|	Задания.ГруппаЗадания,
	|	Задания.Ответственный,
	|	Задания.ИдентификаторКонструктора,
	|	Задания.Родитель
	|ИЗ
	|	Справочник.Задания КАК Задания
	|ГДЕ
	|	Задания.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",Задание);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ВызватьИсключение "Ошибка редактирования запроса в конструкторе...";
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Наименование = Выборка.Наименование;
	TaskID = Выборка.ID; 
	Ответственный = Выборка.Ответственный;
	ГруппаЗадания = Выборка.ГруппаЗадания;
	Родитель =  Выборка.Родитель;
	
	Тест = КонструкторЗаданийСервер.ПолучитьЗначениеПараметра(Задание,Справочники.ИменаПеременных.Тест);
	АдресВебСервиса = КонструкторЗаданийСервер.ПолучитьЗначениеПараметра(Задание,"%АдресВебСервиса%",Ложь);
	
	// ПредельноеВремяОжиданияВыполнения 
	мПредельноеВремяОжиданияВыполнения = КонструкторЗаданийСервер.ПолучитьЗначениеПараметра(Задание,"ПредельноеВремяОжиданияВыполнения");
	Если мПредельноеВремяОжиданияВыполнения=Неопределено Тогда
		ПредельноеВремяОжиданияВыполнения = 10;
	Иначе
		ПредельноеВремяОжиданияВыполнения = мПредельноеВремяОжиданияВыполнения;
	КонецЕсли;
	
	ТестируемыйКлиент = КонструкторЗаданийСервер.ПолучитьЗначениеПараметра(Задание,Справочники.ИменаПеременных.ТестируемыйКлиент);
	
КонецПроцедуры

#КонецОбласти

#Область Навигация

&НаКлиенте
Процедура Вперед(Команда)
	
	Если Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаИнициализация Тогда
		// условие переключения на следующий шаг
		Если КонструкторЗаданийВызовСервера.НайтиЗаданиеПоID(TaskID,Задание)=ПредопределенноеЗначение("Справочник.Задания.ПустаяСсылка") Тогда
			Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаНастройки;
		Иначе
			Сообщить("Укажите наименование и идентификатор задания прежде!");
		КонецЕсли;
	ИначеЕсли Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаНастройки Тогда
	КонецЕсли;
	ОтработатьПеремещениеПоСтраницам();
	
КонецПроцедуры


&НаКлиенте
Процедура Назад(Команда)
	
	// назад без проверок
	Если Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаИнициализация Тогда
	ИначеЕсли Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаНастройки Тогда
		Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаИнициализация;
	КонецЕсли;	
	ОтработатьПеремещениеПоСтраницам();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработатьПеремещениеПоСтраницам()
	Если Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаИнициализация Тогда
		Элементы.Назад.Видимость = Ложь;
		Элементы.Вперед.Видимость = Истина;
		Элементы.СоздатьНовоеЗадание.Видимость = Ложь;
	ИначеЕсли Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаНастройки Тогда
		Элементы.Назад.Видимость = Истина;
		Элементы.Вперед.Видимость = Ложь;
		Элементы.СоздатьНовоеЗадание.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СозданиеЗадания

&НаСервере
Процедура НайтиШаблоныДействия()
	
	// ШАБЛОНЫ
	КлючПоискаШаблона = ПолучитьКлючПоискаШаблона("ВыполнитьТест"); 
	ШаблонКомандыВыполнитьТест = КонструкторЗаданийСервер.НайтиШаблонКоманды(ИдентификаторКонструктораУниверсальный,ПолучитьТекстШаблонаКомандыВыполненияЮнитТестаВебСервиса(),КлючПоискаШаблона);

	КлючПоискаШаблона = ПолучитьКлючПоискаШаблона("ШаблонЗагрузкиЛога"); 
	ШаблонКомандыЗагрузкиЛога = КонструкторЗаданийСервер.НайтиШаблонКоманды(ИдентификаторКонструктораУниверсальный,ПолучитьТекстШаблонаКомандыЗагрузкиОтчетаВыполнени(),КлючПоискаШаблона);
	
	// ДЕЙСТВИЯ
	КлючПоискаШаблона = ПолучитьКлючПоискаШаблона("ВыполнитьТест");
	ДействиеВыполнитьТест = КонструкторЗаданийСервер.НайтиДействиеЗадания(ИдентификаторКонструктораУниверсальный,КлючПоискаШаблона);
	
	КлючПоискаШаблона = ПолучитьКлючПоискаШаблона("ОжидатьПоявленияОтчетаВыполненияИли"+ПредельноеВремяОжиданияВыполнения+"мин");
	ДействиеОжиданияВыполненияТеста = КонструкторЗаданийСервер.НайтиДействиеЗадания(ИдентификаторКонструктораУниверсальный,КлючПоискаШаблона);
	
	КлючПоискаШаблона = ПолучитьКлючПоискаШаблона("ЗагрузитьЛог");
	ДействиеЗагрузкиЛога = КонструкторЗаданийСервер.НайтиДействиеЗадания(ИдентификаторКонструктораУниверсальный,КлючПоискаШаблона);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПриНеобходимостиШаблоныДействия(Знач Задание)
	
	// ШАБЛОНЫ
	Если НЕ ЗначениеЗаполнено(ШаблонКомандыВыполнитьТест) Тогда
		КлючПоискаШаблона = ПолучитьКлючПоискаШаблона("ВыполнитьТест"); 
		ШаблонКомандыВыполнитьТест = КонструкторЗаданийСервер.СоздатьШаблонКоманды(ИдентификаторКонструктораУниверсальный,"Шаблон команды выполнить тест (SoapUI)",КлючПоискаШаблона,ПолучитьТекстШаблонаКомандыВыполненияЮнитТестаВебСервиса());
		КонструкторЗаданийСервер.УстановитьПараметр(ШаблонКомандыВыполнитьТест,Справочники.ИменаПеременных.КлючПоиска,КлючПоискаШаблона);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ШаблонКомандыЗагрузкиЛога) Тогда
		КлючПоискаШаблона = ПолучитьКлючПоискаШаблона("ШаблонЗагрузкиЛога"); 
		ШаблонКомандыЗагрузкиЛога = КонструкторЗаданийСервер.СоздатьШаблонКоманды(ИдентификаторКонструктораУниверсальный,"Шаблон команды загрузка отчета выполнения формат 'JUnit' (SoapUI)",КлючПоискаШаблона,ПолучитьТекстШаблонаКомандыЗагрузкиОтчетаВыполнени());
		КонструкторЗаданийСервер.УстановитьПараметр(ШаблонКомандыЗагрузкиЛога,Справочники.ИменаПеременных.КлючПоиска,КлючПоискаШаблона);
	КонецЕсли;		
	
	// ДЕЙСТВИЯ
	Если НЕ ЗначениеЗаполнено(ДействиеВыполнитьТест) Тогда
		КлючПоискаШаблона = ПолучитьКлючПоискаШаблона("ВыполнитьТест");
		ДействиеВыполнитьТест = СоздатьДействиеЗадания(ИдентификаторКонструктораУниверсальный,"Выполнить юнит-тест выбсервиса формат 'JUnit' (SoapUI)",КлючПоискаШаблона,ШаблонКомандыВыполнитьТест);
		КонструкторЗаданийСервер.УстановитьПараметр(ДействиеВыполнитьТест,Справочники.ИменаПеременных.КлючПоиска,КлючПоискаШаблона);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДействиеОжиданияВыполненияТеста) Тогда
		КлючПоискаШаблона = ПолучитьКлючПоискаШаблона("ОжидатьПоявленияОтчетаВыполненияИли"+ПредельноеВремяОжиданияВыполнения+"мин");
		ДействиеОжиданияВыполненияТеста = СоздатьДействиеЗадания(ИдентификаторКонструктораУниверсальный,"Ожидать появления отчета выполнения или "+ПредельноеВремяОжиданияВыполнения+" мин (SoapUI)",КлючПоискаШаблона,ШаблонКомандыВыполнитьТест,ПредельноеВремяОжиданияВыполнения);
		КонструкторЗаданийСервер.УстановитьПараметр(ДействиеОжиданияВыполненияТеста,"ПредельноеВремяОжиданияВыполнения",ПредельноеВремяОжиданияВыполнения);
		КонструкторЗаданийСервер.УстановитьПараметр(ДействиеОжиданияВыполненияТеста,Справочники.ИменаПеременных.КлючПоиска,КлючПоискаШаблона);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДействиеЗагрузкиЛога) Тогда
		КлючПоискаШаблона = ПолучитьКлючПоискаШаблона("ЗагрузитьЛог");
		ДействиеЗагрузкиЛога = СоздатьДействиеЗадания(ИдентификаторКонструктораУниверсальный,"Загрузить отчет выполнения теста формат 'JUnit' (SoapUI)",КлючПоискаШаблона,ШаблонКомандыЗагрузкиЛога);
		КонструкторЗаданийСервер.УстановитьПараметр(ДействиеЗагрузкиЛога,Справочники.ИменаПеременных.КлючПоиска,КлючПоискаШаблона);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовоеЗадание(Команда)
	Если НЕ ЗначениеЗаполнено(Тест) Тогда
		Сообщить("Укажите тест прежде!");
	ИначеЕсли НЕ ЗначениеЗаполнено(АдресВебСервиса) Тогда
		Сообщить("Укажите адрес веб сервиса прежде");
	ИначеЕсли СоздатьНовоеЗаданиеНаСервере()=Истина Тогда
		ОповеститьОбИзменении(Задание);
		ЭтаФорма.Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СоздатьНовоеЗаданиеНаСервере()
	
	Отказ = Ложь;
	
	НайтиШаблоныДействия();
	
	НачатьТранзакцию();
	
	Попытка
		
		// I. Создаем действия и шаблоны
		СоздатьПриНеобходимостиШаблоныДействия(Задание);
		
		// II. Создание задания
		// Создаем/ обновляем задание
		СвойстваЗадания = новый Структура;
		СвойстваЗадания.Вставить("Наименование",Наименование);
		СвойстваЗадания.Вставить("ID",TaskID);
		СвойстваЗадания.Вставить("Родитель",Родитель);
		СвойстваЗадания.Вставить("ГруппаЗадания",ГруппаЗадания);
		СвойстваЗадания.Вставить("РедактироватьКонструктором",РедактироватьКонструктором);
		СвойстваЗадания.Вставить("ИдентификаторКонструктора",ИдентификаторКонструктора);
		СвойстваЗадания.Вставить("Ответственный",Ответственный);
		
		Задание = КонструкторЗаданийСервер.СоздатьОбновитьЗадание(Задание,СвойстваЗадания); 
		

		// III. Состав задания
		// обновляем регистр состав
		КонструкторЗаданийСервер.ОчиститьСоставЗаданий(Задание);
		КонструкторЗаданийСервер.ДобавитьВСоставЗаданий(Задание,ДействиеВыполнитьТест,1);
		КонструкторЗаданийСервер.ДобавитьВСоставЗаданий(Задание,ДействиеОжиданияВыполненияТеста,2);
		КонструкторЗаданийСервер.ДобавитьВСоставЗаданий(Задание,ДействиеЗагрузкиЛога,3);
		
		// IV. Переменные
		
		// менеджер тестирования
		Если ЗначениеЗаполнено(МенеджерТестирования) Тогда
			КонструкторЗаданийСервер.УстановитьПараметр(Задание,Справочники.ИменаПеременных.МенеджерТестирования,МенеджерТестирования); 
			КонструкторЗаданийСервер.УстановитьПараметр(Задание,"%СтрокаСоединенияМенеджер%",МенеджерТестирования,Истина, новый Структура("ИмяФункции","СтрокаСоединения")); 
		КонецЕсли;
		
		// тестируемый клиент
		Если ЗначениеЗаполнено(ТестируемыйКлиент) Тогда
			КонструкторЗаданийСервер.УстановитьПараметр(Задание,Справочники.ИменаПеременных.ТестируемыйКлиент,ТестируемыйКлиент); 
			КонструкторЗаданийСервер.УстановитьПараметр(Задание,"%ИдентификаторКлиента%",МенеджерТестирования,Ложь,новый Структура("ИмяФункции","ID"));
		КонецЕсли; 		
		// тестируемый клиент
		Если ЗначениеЗаполнено(АдресВебСервиса) Тогда
			КонструкторЗаданийСервер.УстановитьПараметр(Задание,"%АдресВебСервиса%",АдресВебСервиса,Ложь);
		КонецЕсли; 						
		// сохраняем параметры
		КонструкторЗаданийСервер.УстановитьПараметр(Задание,"%НомерПроверки%",0,Ложь); 
		КонструкторЗаданийСервер.УстановитьПараметр(Задание,Справочники.ИменаПеременных.Тест,Тест); 
		КонструкторЗаданийСервер.УстановитьПараметр(Задание,"%ПутьКФайлуТеста%",Тест,Ложь,новый структура("ИмяФункции","ПутьКФайлуТеста"));
		КонструкторЗаданийСервер.УстановитьПараметр(Задание,"%Тест%",Тест,Ложь);
		КонструкторЗаданийСервер.УстановитьПараметр(Задание,"СоздаватьИскатьДействияАвтоматически",СоздаватьИскатьДействияАвтоматически);
		КонструкторЗаданийСервер.УстановитьПараметр(Задание,"ПредельноеВремяОжиданияВыполнения",ПредельноеВремяОжиданияВыполнения);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("WebServiceTaskTestBuilder_SoapUI.СоздатьНовоеЗаданиеНаСервере",УровеньЖурналаРегистрации.Ошибка,Неопределено,Неопределено,ТекстОшибки);
		Сообщить(ТекстОшибки);
		Отказ = Истина;
	КонецПопытки;
	
	Возврат НЕ Отказ;
КонецФункции

#КонецОбласти

#Область ДействиеЗадания

&НаСервереБезКонтекста
Функция СоздатьДействиеЗадания(Знач ИдентификаторКонструктора, Знач Наименование, Знач КлючПоиска, Знач ШаблонКоманды, Знач МаксВремяОжидания=600)
	
	ДействиеСсылка = Справочники.ДействияЗаданий.ПустаяСсылка();
	
	ДействиеОбъект = Справочники.ДействияЗаданий.СоздатьЭлемент();
	ДействиеОбъект.Наименование 				= Наименование;
	ДействиеОбъект.ИдентификаторКонструктора 	= ИдентификаторКонструктора;
	ДействиеОбъект.РедактироватьКонструктором	= Истина;
	Если Найти(КлючПоиска,"ОжидатьПоявленияОтчетаВыполненияИли") Тогда
		ДействиеОбъект.ТипДействия					= Перечисления.ТипыДействийЗаданий.ОжидатьСобытие;
		ДействиеОбъект.ПоявлениеФайла				= Истина;
		//ДействиеОбъект.ПутьКФайлу					= "%ПутьККаталогуОтчетовВыполненияТестов%\Пр-%НомерПроверки%\%Тест%.xml";
		ДействиеОбъект.ПутьКФайлу					= "%ПутьККаталогуОтчетовВыполненияТестов%\Пр-%НомерПроверки%\%Тест%\*.xml";
		ДействиеОбъект.ИспользоватьШаблонКоманды    = Истина;
		ДействиеОбъект.Интервал = Дата('00010101000000')+МаксВремяОжидания*60;
	ИначеЕсли Найти(КлючПоиска,"ВыполнитьТест") Тогда
		ДействиеОбъект.ТипДействия					= Перечисления.ТипыДействийЗаданий.ЗапуститьПриложение;
		ДействиеОбъект.ШаблонКоманды				= ШаблонКоманды;
		ДействиеОбъект.ИспользоватьШаблонКоманды    = Истина;
	ИначеЕсли   Найти(КлючПоиска,"ЗагрузитьЛог") Тогда
		ДействиеОбъект.ТипДействия					= Перечисления.ТипыДействийЗаданий.ЗапуститьПриложение;
		ДействиеОбъект.ШаблонКоманды				= ШаблонКоманды;
		ДействиеОбъект.ИспользоватьШаблонКоманды    = Истина;
	Иначе
		ВызватьИсключение "Не известное задание по шаблону!";
	КонецЕсли;                                               	
	ДействиеОбъект.Автор						= Пользователи.ТекущийПользователь();
	
	ДействиеОбъект.Записать();
	ДействиеСсылка = ДействиеОбъект.Ссылка;
	
	Возврат ДействиеСсылка;
КонецФункции

#КонецОбласти

#Область ШаблонКомандыВыполнитьТест

&НаСервереБезКонтекста
Функция ПолучитьТекстШаблонаКомандыЗагрузкиОтчетаВыполнени()
	Возврат """%ПутьКИсполняемомуФайлу1С%"" %СтрокаСоединенияМенеджер% 
	| /Execute ""%ПутьККаталогуGIT%\PluginsUI\ЗагрузкаЛогаJUnitXMLТеста.epf""  
	| /C""
	//| TestLogUI %ПутьККаталогуОтчетовВыполненияТестов%\Пр-%НомерПроверки%\%Тест%\%Тест%.xml 
	| TestLogUI %ПутьККаталогуОтчетовВыполненияТестов%\Пр-%НомерПроверки%\%Тест%\*.xml
	| TestNumberUI %НомерПроверки%
	| TestAssemblyUI %НомерСборки% 
	| TestClientIdUI %ИдентификаторКлиента% 
	| TestCloseUI
	| TestDeleteLogUI 
	| TestCatalogDeleteUI %ПутьККаталогуОтчетовВыполненияТестов%\Пр-%НомерПроверки%
	|"" ";
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстШаблонаКомандыВыполненияЮнитТестаВебСервиса()
	Возврат """%ПутьККаталогуSoapUI%\bin\testrunner.bat"" ""%ПутьККаталогуGIT%\%ПутьКФайлуТеста%"" -f  ""%ПутьККаталогуОтчетовВыполненияТестов%\Пр-%НомерПроверки%\%Тест%"" -I -j -r -e %АдресВебСервиса% ";
КонецФункции

&НаСервере
Функция ПолучитьКлючПоискаШаблона(Знач Действие="")
	
	Ключ = "";
	Если Действие="ВыполнитьТест" ИЛИ Действие="ШаблонВыполненияТеста" Тогда
		Ключ = "SopaUI/ЮнитТест/JUnit"+?(ЗначениеЗаполнено(Действие),"/"+Действие,"");
	ИначеЕсли Найти(Действие,"ОжидатьПоявленияОтчетаВыполненияИли") Тогда
		Ключ = "SopaUI/GIT"+?(ЗначениеЗаполнено(Действие),"/"+Действие,"");
	ИначеЕсли Действие="ЗагрузитьЛог" ИЛИ Действие="ШаблонЗагрузкиЛога" Тогда
		Ключ = "SopaUI/GIT/JUnit"+?(ЗначениеЗаполнено(Действие),"/"+Действие,"");
	Иначе
		Ключ = "SopaUI/ЮнитТест/GIT/"+ФорматФайлаОтчета+?(ЗначениеЗаполнено(Действие),"/"+Действие,"");
	КонецЕсли;
	Возврат Ключ;
	
КонецФункции


#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(TaskID) Тогда
		TaskID = СценарноеТестированиеКлиентСервер.СформироватьАвтоматическиИдентификаторТеста(Наименование);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредельноеВремяОжиданияВыполненияПриИзменении(Элемент)
	ОтображениеПредельноеВремяОжиданияВыполнения();
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеПредельноеВремяОжиданияВыполнения()
	Элементы.ПредупрежедниеДляВремениОжидания.Видимость = НЕ ЗначениеЗаполнено(ПредельноеВремяОжиданияВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеПриИзменении(Элемент)
	НайтиПараметрыПоЗаданию();
КонецПроцедуры

&НаКлиенте
Процедура АдресВебСервисаПриИзменении(Элемент)
	ОтображениеАдресВебСервиса();
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеАдресВебСервиса()
	Элементы.ПредупрежедниеДляАдресВебСервиса.Видимость = НЕ ЗначениеЗаполнено(АдресВебСервиса);
КонецПроцедуры

#КонецОбласти