&НаКлиенте
Перем мПараметрыРаботыСкрипта;
&НаКлиенте
Перем UIDШага;
&НаКлиенте
Перем ПуллТестируемыхПриложений;
&НаКлиенте
Перем ТестовоеПриложениеЖурнал;
&НаКлиенте
Перем RegExp;
&НаКлиенте
Перем Агент_СтруктураЗапроса;
&НаКлиенте
Перем Агент_СтруктураОтвета;
&НаКлиенте
Перем МассивИзменений;
&НаКлиенте
Перем Модуль_ПреобразоватьЖурналДействийВДеревоСценария;
&НаКлиенте
Перем Модуль_ЗаписьЖурналаДействий;
&НаКлиенте
Перем Модуль_ПреобразоватьЖурналДействийВДеревоAutomationUI;
&НаКлиенте
Перем Модуль_ПреобразоватьЖурналДействийВДеревоSelenium;
&НаКлиенте
Перем Модуль_ОбработкаДействий;
&НаКлиенте
Перем Модуль_ОбработкаДействийAutomationUI;
&НаКлиенте
Перем Модуль_ОбработкаДействийSelenium;
&НаКлиенте
Перем КаталогКартинок;
&НаКлиенте
Перем ТаблицаDDT;
&НаКлиенте
Перем ЗамерыВыполненияТестов;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Items.ПоискОбъектов.ChoiceList.Add(0, NStr("en = 'By presentation'; ru = 'По представлению'"));
	Items.ПоискОбъектов.ChoiceList.Add(1, NStr("en = 'By name'; ru = 'По имени'"));
	Items.ПоискОбъектов.ChoiceList.Add(2, NStr("en = 'By name and presentation'; ru = 'По имени и представлению'"));
	
	
	// формат файла сценария
	Элементы.ТипФайлаСценария.СписокВыбора.Добавить("XML","XML");
	
	// формат файла отчета
	Элементы.ФорматФайлаОтчета.СписокВыбора.Добавить("JUnitXML","JUnit");
	Элементы.ФорматФайлаОтчета.СписокВыбора.Добавить("AllureXML","Allure");
	
	// браузеры

	Элементы.Severity.СписокВыбора.Добавить("Блокирующая","Блокирующая");
	Элементы.Severity.СписокВыбора.Добавить("Критическая","Критическая");
	Элементы.Severity.СписокВыбора.Добавить("Значительная","Значительная");
	Элементы.Severity.СписокВыбора.Добавить("Незначительная","Незначительная");
	Элементы.Severity.СписокВыбора.Добавить("Тривиальная","Тривиальная");

				
	Объект.Версия = РеквизитФормыВЗначение("Объект").СведенияОВнешнейОбработке().Версия;
	ЭтотОбъект.Заголовок = ЭтотОбъект.Заголовок+" Версия "+Объект.Версия;
	
	РежимРедактирования = "Панель";
	
	// заполним кнопки редактора
	мСценРедактор_ЗаполнитьКнопкиПоУмолчанию(); 
	
	ТестЗапущен = Ложь;
	
	Элементы.ДеревоСценариямСценСкрипт_ВставитьИзБуфера.Доступность = Ложь;
	
	// если форма открыта, как внешняя обработка, тогда заполним параметры
	ЗаполнениеПараметровПриОткрытииФормыКакВнешнейОбработки(Параметры,Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура мНастройки_ОткрытьВБраузере(Команда)
	мОписаниеОповещения = новый ОписаниеОповещения("мНастройки_мРезультатЗапуска",ЭтаФорма);
	НачатьЗапускПриложения(мОписаниеОповещения,Объект.АдресИнтернет);
КонецПроцедуры

&НаКлиенте
Процедура мНастройки_мРезультатЗапуска(КодВозврата,ДополнительныеПараметры) Экспорт
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеПараметровПриОткрытииФормыКакВнешнейОбработки(Источник,Приемник)
	
	Если ТипЗнч(Приемник)=Тип("Соответствие") Тогда
		Если ЗначениеЗаполнено(Источник.ПутьКФайлуСценария) Тогда
			Приемник.Вставить("ПутьКФайлуСценария",Источник.ПутьКФайлуСценария);
		КонецЕсли;
		Если ЗначениеЗаполнено(Источник.ПутьПодключенияКлиентаТестирования) Тогда
			Приемник.Вставить("ПутьПодключенияКлиентаТестирования",Источник.ПутьПодключенияКлиентаТестирования);
			Приемник.Вставить("ФайловаяБаза",Источник.ФайловаяБаза);
			Приемник.Вставить("Пользователь1С",Источник.Пользователь1С);
			Приемник.Вставить("Пароль1С",Источник.Пароль1С);
		КонецЕсли;
		Если ЗначениеЗаполнено(Источник.НомерПорта) Тогда
			Приемник.Вставить("НомерПорта",Источник.НомерПорта);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Источник.ПутьКФайлуСценария) Тогда
			Приемник.ПутьКФайлуСценария=Источник.ПутьКФайлуСценария;
		КонецЕсли;
		Если ЗначениеЗаполнено(Источник.ПутьПодключенияКлиентаТестирования) Тогда
			Приемник.ПутьПодключенияКлиентаТестирования=Источник.ПутьПодключенияКлиентаТестирования;
			Приемник.ФайловаяБаза=Источник.ФайловаяБаза;
		КонецЕсли;
		Если ЗначениеЗаполнено(Источник.Пользователь1С) Тогда
			Приемник.Пользователь1С=Источник.Пользователь1С;
		КонецЕсли;
		Если ЗначениеЗаполнено(Источник.Пароль1С) Тогда
			Приемник.Пароль1С=Источник.Пароль1С;
		КонецЕсли;
		Если ЗначениеЗаполнено(Источник.НомерПорта) Тогда
			Приемник.НомерПорта=Источник.НомерПорта;
		КонецЕсли;
	КонецЕсли;
	
	КоманднаяСтруктураЗапуска = новый Структура;
	Если ЗначениеЗаполнено(Источник.ПутьПодключенияКлиентаТестирования) Тогда
		КоманднаяСтруктураЗапуска.Вставить("ПутьКФайлуСценария",Источник.ПутьКФайлуСценария);
		КоманднаяСтруктураЗапуска.Вставить("ПутьПодключенияКлиентаТестирования",Источник.ПутьПодключенияКлиентаТестирования);
		КоманднаяСтруктураЗапуска.Вставить("ФайловаяБаза",Источник.ФайловаяБаза);
		КоманднаяСтруктураЗапуска.Вставить("Пользователь1С",Источник.Пользователь1С);
		КоманднаяСтруктураЗапуска.Вставить("Пароль1С",Источник.Пароль1С);
		КоманднаяСтруктураЗапуска.Вставить("НомерПорта",Источник.НомерПорта);
		КоманднаяСтруктураЗапуска.Вставить("ПутьКИсполняемомуФайлу1С",Источник.ПутьКИсполняемомуФайлу1С);
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьСлужебныеНастройки() Экспорт
	
	ЗамерыВыполненияТестов = новый Соответствие();
		
	ПуллТестируемыхПриложений = новый Соответствие();
	КаталогКартинок = "ScreenShots";//Объект.ИмяЛога;
	
	// Объявление модулей
	Модуль_ЗаписьЖурналаДействий = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Модуль_ЗаписьЖурналаДействий");
	// Обработка преобразований
	Модуль_ПреобразоватьЖурналДействийВДеревоСценария = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Модуль_ПреобразоватьЖурналДействийВДеревоСценария");
	Модуль_ПреобразоватьЖурналДействийВДеревоAutomationUI = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Модуль_ПреобразоватьЖурналДействийВДеревоAutomationUI"); 
	Модуль_ПреобразоватьЖурналДействийВДеревоSelenium = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Модуль_ПреобразоватьЖурналДействийВДеревоSelenium");
	// Обработка выполнения действий
	Модуль_ОбработкаДействий = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Модуль_ОбработкаДействий"); 
	Модуль_ОбработкаДействийAutomationUI = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Модуль_ОбработкаДействийAutomationUI");
	Модуль_ОбработкаДействийSelenium = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Модуль_ОбработкаДействийSelenium");
	
	Если НЕ ЗначениеЗаполнено(Объект.НомерПорта) Тогда
		Объект.НомерПорта = 1538;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.НомерПортаExternAutomationUI) Тогда
		Объект.НомерПортаExternAutomationUI = 8080;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.АдресИнтернетExternAutomationUI) Тогда
		Объект.АдресИнтернетExternAutomationUI = "http://localhost"
	КонецЕсли;  
		
	Если НЕ ЗначениеЗаполнено(Объект.ТипФайлаСценария) Тогда
		Объект.ТипФайлаСценария = "XML";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ФорматФайлаОтчета) Тогда
		Объект.ФорматФайлаОтчета = "JUnitXML";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ИспользуемыйAPI) Тогда
		Объект.ИспользуемыйAPI = "1cClientApp";	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Браузер) Тогда
		Объект.Браузер = "Chrome";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.РежимScreenShot) Тогда
		Объект.РежимScreenShot="None";
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИнициализироватьСлужебныеНастройки();

	Элементы.ИспользуемыйAPI.СписокВыбора.Добавить("1cClientApp","1C клиент");
	Элементы.ИспользуемыйAPI.СписокВыбора.Добавить("AutomationUI","Automation UI");	
	Элементы.ИспользуемыйAPI.СписокВыбора.Добавить("Selenium","Selenium");
	Элементы.ИспользуемыйAPI1.СписокВыбора.Добавить("1cClientApp","1C клиент");
	Элементы.ИспользуемыйAPI1.СписокВыбора.Добавить("AutomationUI","Automation UI");	
	Элементы.ИспользуемыйAPI1.СписокВыбора.Добавить("Selenium","Selenium");

	Элементы.Браузер.СписокВыбора.Добавить("IE","IE");
	Элементы.Браузер.СписокВыбора.Добавить("Chrome","Chrome");
	Элементы.Браузер.СписокВыбора.Добавить("Firefox","Firefox");
	Элементы.Браузер.СписокВыбора.Добавить("Opera","Opera");
	Элементы.Браузер.СписокВыбора.Добавить("Edge","Edge");
	Элементы.Браузер1.СписокВыбора.Добавить("IE","IE");
	Элементы.Браузер1.СписокВыбора.Добавить("Chrome","Chrome");
	Элементы.Браузер1.СписокВыбора.Добавить("Firefox","Firefox");
	Элементы.Браузер1.СписокВыбора.Добавить("Opera","Opera");	
	Элементы.Браузер1.СписокВыбора.Добавить("Edge","Edge");
	
	Элементы.РежимScreenShot.СписокВыбора.Добавить("None","None");
	Элементы.РежимScreenShot.СписокВыбора.Добавить("Errors","Errors");
	Элементы.РежимScreenShot.СписокВыбора.Добавить("Actions","Actions");
	Элементы.РежимScreenShot.СписокВыбора.Добавить("All","All");
	
	ИспользуемыйAPIПриИзменении(Неопределено);
	
	Если ТипЗнч(КоманднаяСтруктураЗапуска)=Тип("Структура") Тогда
		Если КоманднаяСтруктураЗапуска.Свойство("ПутьПодключенияКлиентаТестирования") 
			И ЗначениеЗаполнено(КоманднаяСтруктураЗапуска.ПутьПодключенияКлиентаТестирования) Тогда
			ЗаполнитьЗначенияСвойств(Объект,КоманднаяСтруктураЗапуска);
		КонецЕсли;
	КонецЕсли;
	
	// Если запуск автотеста
	Если ЗначениеЗаполнено(ПараметрЗапуска) Тогда
		
		мПараметры = Новый Структура();
		Модуль_РазборКоманднойСтроки = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Модуль_РазборКоманднойСтроки",мПараметры,ЭтаФорма);
		СтруктураРазбора = Модуль_РазборКоманднойСтроки.РазобратьСтрокуКомандИзПараметраЗапуска(ПараметрЗапуска);
		ЗаполнитьЗначенияСвойств(Объект,СтруктураРазбора);		
		
		Если ЗначениеЗаполнено(СтруктураРазбора.ПутьККаталогуОтчетовВыполненияТестов) Тогда
			Объект.ПутьККаталогуОтчетовВыполненияТестов = СтруктураРазбора.ПутьККаталогуОтчетовВыполненияТестов;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураРазбора.ПутьККаталогуБиблиотекиСценариев) Тогда
			Объект.ПутьККаталогуБиблиотекиСценариев = СтруктураРазбора.ПутьККаталогуБиблиотекиСценариев;
		КонецЕсли;
		
		// запуск одиночного теста/сценария тестирования
		Если СтруктураРазбора.TestUI=Истина Тогда
			
			Объект.РежимАвтотест = Истина;			
			
			// 1 Проверяем доступность
			Файл = новый Файл(СтруктураРазбора.ПутьКФайлу);
			Если НЕ Файл.Существует()  Тогда
				ТекстОшибки = "Сценарий по пути ("+СтруктураРазбора.ПутьКФайлу+") не найден!";
				Сообщить(ТекстОшибки);
				СообщитьОбОшибке("ПриОткрытии",ТекстОшибки);
			Иначе
				// 2 Запуск автотеста
				мСценПакет_ПодготовкаЗапускАвтоТеста(СтруктураРазбора.ПутьКФайлу,Объект.ПутьККаталогуОтчетовВыполненияТестов);
			КонецЕсли;
			Элементы.СтраницаПакетСценариев.Видимость = Ложь;			
			
			// запуск  набора тестов
		ИначеЕсли СтруктураРазбора.TestPackUI=Истина Тогда
			
			Объект.РежимАвтотест = Истина;
			
			Объект.ПутьККаталогуНаборовСценариев = СтруктураРазбора.ПутьККаталогу;
			
			Элементы.СтраницаПакетСценариев.Видимость = Истина;
			
			мСценПакет_ПодготовкаКЗапускуЗапускНаборовАвтотестов(СтруктураРазбора.ПутьККаталогу);
			
		ИначеЕсли Объект.РежимРаботаАгента=Истина Тогда
			
			Элементы.СтраницаРежимАгента.Видимость = Истина;
			Элементы.ЖурналПреобразование.ТекущаяСтраница = Элементы.СтраницаРежимАгента;			
			мАгент_ВыполнитьСинхронизацию();
			
		КонецЕсли;
		
	Иначе
		
		Элементы.СтраницаПакетСценариев.Видимость = Объект.РедактироватьНаборСценариев;
		Элементы.СтраницаРежимАгента.Видимость = Ложь;
		
	КонецЕсли;
	
	Если Объект.РежимАвтотест=Истина Тогда
		мСценСкрипт_ОткрытьСкрытьНавигатор(Неопределено);
	КонецЕсли;
	
	
	// подсветка режима редактирования
	Элементы.мСценРедактор_ВключитьРедактирование.Видимость = НЕ Объект.РежимРедактированияСценария;
	Элементы.мСценРедактор_ВыключитьРедактирование.Видимость = Объект.РежимРедактированияСценария;
	
	// ABOUT
	AboutHTML = "<html><head></head><body>Обработка является частью конфигурации ""Тестирование 3.0"". Предназначена для проведения автоматического/ручного теста пользовательского интерфейса.</body></html>";
	
	// Tips
	TipsHTML = "<html><head></head><body>Тут будут отображаться подсказки и дополнительная вспомогательная информация ...</body></html>";
	
	// загрузим проект
	Если ДеревоСценария.ПолучитьЭлементы().Количество()=0 И ЗначениеЗаполнено(Объект.ПутьКФайлуСценария)  И Объект.АвтозагрузкаПоследнегоСценария=Истина Тогда
		мСценСкрипт_ЗагрузитьСценарийПоПути(Объект.ПутьКФайлуСценария);
	КонецЕсли;
	
	// загрузим каталог проектов
	Если Объект.АвтозагрузкаДереваПроектов=Истина Тогда
		мСценПакет_ЗагрузитьИзКаталогаВПроекты(Неопределено);
	КонецЕсли;
	
	мСценРедактор_ВыключитьПодсказкиОформление();
	
	Если НЕ РежимМенеджераТестированияДоступен() Тогда
		Сообщить("Режим менеджера тестирования не доступен. Большая часть функционала будет не доступна!");
	КонецЕсли;
	
	ЭтоНеПредприятие1СПриИзменении(Неопределено);
	
	DataDrivenTestПриИзменении(Неопределено);

	ЭкспериментальныйФункционалПриИзменении(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ЭкспериментальныйФункционалПриИзменении(Элемент)
	ИзменитьДоступностьЭкспериментальногоФункционала(Объект.ЭкспериментальныйФункционал);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьЭкспериментальногоФункционала(Использование)
	
	Если НЕ Элементы.ГруппаНастройкиРежимаАгента.Видимость=Использование Тогда
		Элементы.ГруппаНастройкиРежимаАгента.Видимость=Использование;
	КонецЕсли;
	
	Если НЕ Элементы.ГруппаНастройкиПодключенияКGIT.Видимость=Использование Тогда
		Элементы.ГруппаНастройкиПодключенияКGIT.Видимость=Использование;
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ИспользуемыйAPIПриИзменении(Элемент)
	
	Если Объект.ИспользуемыйAPI="AutomationUI" Тогда
		Элементы.ГруппаТаблицаДоступныхПриложений.Видимость = Истина;
	Иначе
		Элементы.ГруппаТаблицаДоступныхПриложений.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ИспользуемыйAPI="Selenium" Тогда
		Элементы.ГруппаДоступныеБраузеры.Видимость = Истина;
	Иначе
		Элементы.ГруппаДоступныеБраузеры.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ИспользуемыйAPI="" ИЛИ Объект.ИспользуемыйAPI="1cClientApp" Тогда
		Элементы.ГруппаНастройкиПреобразования1С.Видимость = Истина;
	Иначе
		Элементы.ГруппаНастройкиПреобразования1С.Видимость = Ложь;
	КонецЕсли;
	
	// перерисуем таблицы действий
	// ********************************
	// ДОСТУПНЫЕ ДЕЙСТВИЯ
	ДоступныеДействияМассив = новый Массив;
	
	Если Объект.ИспользуемыйAPI="" ИЛИ Объект.ИспользуемыйAPI="1cClientApp" Тогда
		ДоступныеДействияМассив = мСценРедактор_ПолучитьМассивСтруктурДоступныхДействий();
	ИначеЕсли Объект.ИспользуемыйAPI="AutomationUI" Тогда
		ДоступныеДействияМассив = мСценРедактор_ПолучитьМассивСтруктурДоступныхДействийAutomationUI();
	ИначеЕсли Объект.ИспользуемыйAPI="Selenium" Тогда
		ДоступныеДействияМассив = мСценРедактор_ПолучитьМассивСтруктурДоступныхДействийSelenium();
	КонецЕсли;	
	
	// ********************************
	// ПАНЕЛЬ ИНСТРУМЕНТОВ
	
	ТаблицаДействия.Очистить();
	Для каждого стр из ДоступныеДействияМассив Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДействия.Добавить(),стр);
	КонецЦикла;

	
КонецПроцедуры


&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	мСценРедактор_ОбновитьОтображениеРедактированияСценария(РежимРедактирования);
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
КонецПроцедуры

#Область мСцен

&НаКлиенте
Процедура мСценСкрипт_Преобразовать(Команда)
	
	// если уже загружен сценарий, то спросим, хотим ли мы сохранить прежде
	// или создать новый ????
	Если ДеревоСценария.ПолучитьЭлементы().Количество()<>0 Тогда
		ТекущийСценарийИзменен = Истина;
	КонецЕсли;
	
	TextToConvert = ИсточникТекст;
	
	мСцен_ПреобразоватьВДеревоСценарияНаКлиенте(TextToConvert,Модуль_ПреобразоватьЖурналДействийВДеревоСценария,"ДеревоСценария");
	
	Элементы.ЖурналПреобразование.ТекущаяСтраница = Элементы.СтраницаДеревоСценария;
	
	// сбросим параметры сценария
	Объект.Наименование = "Сценарий тестирования UI";
	Объект.Автор = "Неизвестный";
	Объект.Комментарий = "";
	Объект.АдресИнтернет = "";
	
	СохранитьИзменениеВТаблицуИзменений(МассивИзменений,"Преобразовать из журнала действий");	
	
КонецПроцедуры

&НаКлиенте
Процедура мСценСкрипт_ПреобразоватьВБуфер(Команда)
	
	TextToConvert = ИсточникТекст;
	
	мСцен_ПреобразоватьВДеревоСценарияНаКлиенте(TextToConvert,Модуль_ПреобразоватьЖурналДействийВДеревоСценария,"БуферОбмена");	
	
	Элементы.ДеревоСценариямСценСкрипт_ВставитьИзБуфера.Доступность = Истина;
	Элементы.ЖурналПреобразование.ТекущаяСтраница = Элементы.СтраницаДеревоСценария;

КонецПроцедуры


&НаКлиенте
Процедура мСцен_ПреобразоватьВДеревоСценарияНаКлиенте(ТекстСценария,Модуль_ПреобразоватьЖурналДействийВДеревоСценария,ИмяПриемника)
	
	ДеревоСценарияСервер = Неопределено;
	ЭтоБуфер = Ложь;
	
	Если ИмяПриемника="ДеревоСценария" Тогда
		ДеревоСценарияСервер = ДеревоСценария;
	ИначеЕсли ИмяПриемника="БуферОбмена" Тогда
		// очищаем буфер
		БуферОбмена.ПолучитьЭлементы().Очистить();			
		ДеревоСценарияСервер = БуферОбмена;
		ЭтоБуфер = Истина;
	Иначе
		ВызватьИсключение "Приемник преобразования не определен!";
	КонецЕсли;
	
	мПараметры = Новый Структура();
	
	Если Объект.ИспользуемыйAPI="1cClientApp" Тогда
		мПараметры.Вставить("ГенерироватьПолучениеРодительскихОбъектовВИерархии",Объект.ГенерироватьПолучениеРодительскихОбъектовВИерархии);
		мПараметры.Вставить("ИсключатьПоискФорм",Объект.ИсключатьПоискФорм);
		Модуль_ПреобразоватьЖурналДействийВДеревоСценария.мСцен_ПреобразоватьВДеревоСценарияНаСервере(ТекстСценария,ДеревоСценарияСервер,мПараметры,ЭтоБуфер);
	ИначеЕсли Объект.ИспользуемыйAPI="AutomationUI" Тогда
		мПараметры.Вставить("ИсключатьКомандуFocus",Объект.ИсключатьКомандуFocus);
		мПараметры.Вставить("Исключать_xPath",Объект.Исключать_xPath);
		//Модуль_ПреобразоватьЖурналДействийВДеревоAutomationUI.мСцен_ПреобразоватьВДеревоСценарияНаСервере(ТекстСценария,ДеревоСценарияСервер,мПараметры,ЭтоБуфер);
		Модуль_ПреобразоватьЖурналДействийВДеревоAutomationUI.мСцен_ПреобразоватьВДеревоСценарияНаКлиенте(ТекстСценария,ДеревоСценарияСервер,мПараметры,ЭтоБуфер);
	ИначеЕсли Объект.ИспользуемыйAPI="Selenium" Тогда
		мПараметры.Вставить("ИсключатьКомандуFocus",Объект.ИсключатьКомандуFocus);
		мПараметры.Вставить("Исключать_xPath",Объект.Исключать_xPath);
		Модуль_ПреобразоватьЖурналДействийВДеревоSelenium.мСцен_ПреобразоватьВДеревоСценарияНаКлиенте(ТекстСценария,ДеревоСценарияСервер,мПараметры,ЭтоБуфер);
	Иначе
		ВызватьИсключение "API не поддерживается!";
	КонецЕсли;
		
	ТекущийСценарийИзменен = Истина;
	ПередатьДанныеЧерезРеквизитОбъекта(ДеревоСценарияСервер,ИмяПриемника);

КонецПроцедуры

&НаСервере
Процедура ПередатьДанныеЧерезРеквизитОбъекта(ДеревоСценарияСервер,ИмяПриемника)
	
	ДеревоОбъект = ДанныеФормыВЗначение(ДеревоСценарияСервер,Тип("ДеревоЗначений"));
	ЗначениеВРеквизитФормы(ДеревоОбъект,ИмяПриемника);
	
КонецПроцедуры

#Область ДополнительныеФункции

&НаСервереБезКонтекста
Функция мСцен_ПолучитьДанныеКартинки_НаКлиенте(Узел) Экспорт
	
	Действие = "";
	ТипОбъекта = "";

	
	Попытка
		Действие = Узел.Действие;
		ТипОбъекта = Узел.ТипОбъекта;
	Исключение
	КонецПопытки;
	
	
	// Картинка в поле Картинка
	Если Действие = "" ИЛИ Действие = "UnknownNode" ИЛИ Действие = "НеизвестныйУзел" Тогда
		ДанныеКартинки = 1;
		
	ИначеЕсли Действие = "НайтиОкно" ИЛИ Действие = "НайтиОсновноеОкно" Тогда
		ДанныеКартинки = 2;
		
	ИначеЕсли Действие = "НайтиФорму" Тогда
		ДанныеКартинки = 3;
		
	ИначеЕсли Действие = "Команда" И (ТипОбъекта ="FormButton" ИЛИ ТипОбъекта = "CommandInterfaceButton") Тогда
		ДанныеКартинки = 4;
		
	ИначеЕсли Действие = "НайтиОбъект" Тогда
		ДанныеКартинки = 5;
		
	ИначеЕсли Действие = "Условие" ИЛИ Действие = "OperatorIF" Тогда
		ДанныеКартинки = 6;
		
	ИначеЕсли Действие = "Команда" Тогда
		ДанныеКартинки = 7;
		
	ИначеЕсли Действие = "ПолучитьКомандныйИнтерфейс" Тогда
		ДанныеКартинки = 8;
		
	ИначеЕсли Действие = "GenerateClientConnectionScript" ИЛИ Действие = "ПодключитьТестируемоеПриложение" Тогда
		ДанныеКартинки = 9;
		
	ИначеЕсли Действие = "ЗакрытьТестируемоеПриложение" ИЛИ Действие = "GenerateClientDisconnectionScript" Тогда
		ДанныеКартинки = 10;
		
	ИначеЕсли Действие = "Комментарий" Тогда
		ДанныеКартинки = 11;
		
	ИначеЕсли Действие = "ВыполнитьПроизвольныйКодСервер" Тогда
		ДанныеКартинки = 12;
		
	ИначеЕсли Действие = "ВыполнитьПроизвольныйКодКлиент" Тогда
		ДанныеКартинки = 13;
		
	ИначеЕсли Действие = "Стоп" Тогда
		ДанныеКартинки = 14;
		
	ИначеЕсли Действие = "Пауза" Тогда
		ДанныеКартинки = 15;
		
	ИначеЕсли Действие = "СравнитьСПредставлениемДанных" Тогда
		ДанныеКартинки = 16;
		
	ИначеЕсли Действие = "ПолучитьПредставлениеДанных" Тогда
		ДанныеКартинки = 17;
		
	ИначеЕсли Действие = "ГотовыйБлокШагов" Тогда
		ДанныеКартинки = 18;
		
	ИначеЕсли Действие = "ТестовыйСлучай" Тогда
		ДанныеКартинки = 19;
		
	ИначеЕсли Действие = "ДилогВыбораФайла" Тогда
		ДанныеКартинки = 0;
		
	ИначеЕсли Действие = "Timer" ИЛИ Действие = "Таймер" Тогда
		ДанныеКартинки = 20;		
		
	ИначеЕсли Действие = "ИзПараметра1ВПараметр2" Тогда
		ДанныеКартинки = 21;
		
	ИначеЕсли Действие = "ПроверкаНаличияЭлемента" Тогда
		ДанныеКартинки = 22;
		
	ИначеЕсли Действие = "ВызватьИсключение" ИЛИ Действие="ThrowExeption" Тогда
		ДанныеКартинки = 23;
		
	ИначеЕсли Действие = "СделатьСнимокОкна" ИЛИ Действие="MakeScreenShot" Тогда
		ДанныеКартинки = 24;
		
	ИначеЕсли Действие = "ЦиклДляКаждого" ИЛИ Действие="OperatorForEach" Тогда
		ДанныеКартинки = 25;		
		
	КонецЕсли;
	
	Возврат ДанныеКартинки;
	
КонецФункции

&НаСервереБезКонтекста
Функция мСцен_ПолучитьНаименованиеПоТегу(ИмяТега)
	
	Представление = ИмяТега;
	
	Если ИмяТега="ClientApplicationWindow" Тогда
		Представление = "Окно клиентского приложения";
	ИначеЕсли ИмяТега = "Form" Тогда
		Представление = "Форма";
	ИначеЕсли ИмяТега = "CommandInterface" Тогда
		Представление = "Командный интерфейс";		
	ИначеЕсли ИмяТега = "FormField" Тогда
		Представление = "Поле формы";		
	ИначеЕсли ИмяТега = "FormTable" Тогда
		Представление = "Таблица формы";		
	ИначеЕсли ИмяТега = "FormDecoration" Тогда
		Представление = "Декорация формы";		
	ИначеЕсли ИмяТега = "FormButton" Тогда
		Представление = "Кнопка формы";		
	ИначеЕсли ИмяТега = "FormGroup" Тогда
		Представление = "Группа формы";		
	ИначеЕсли ИмяТега = "CommandInterfaceButton" Тогда
		Представление = "Кнопка командный интерфейс";		
	ИначеЕсли ИмяТега = "CommandInterfaceGroup" Тогда
		Представление = "Группа командный интерфейс";
		
	// служебные мои
	ИначеЕсли ИмяТега = "ПодключитьТестируемоеПриложение" Тогда
		Представление = "Подключение к тестируемому приложению";
	// служебные мои
	ИначеЕсли ИмяТега = "ЗакрытьТестируемоеПриложение" Тогда
		Представление = "Отключиться от тестируемого приложения";
		
		
		
	//ИначеЕсли ИмяТега = "" Тогда
	//	Представление = "";		
	//ИначеЕсли ИмяТега = "" Тогда
	//	Представление = "";		
	//ИначеЕсли ИмяТега = "" Тогда
	//	Представление = "";		
	//ИначеЕсли ИмяТега = "" Тогда
	//	Представление = "";		
	//ИначеЕсли ИмяТега = "" Тогда
	//	Представление = "";		
	//ИначеЕсли ИмяТега = "" Тогда
	//	Представление = "";		
	//ИначеЕсли ИмяТега = "" Тогда
	//	Представление = "";		
	//ИначеЕсли ИмяТега = "" Тогда
	//	Представление = "";		
	Иначе
		Представление = "Неопознанный узел";
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Функция - Установить значение параметра
//
// Параметры:
//  ИмяПараметра		 - строка	 - Имя параметра, как в таблице параметров
//  ЗначениеПараметра	 - строка, булево, число, дата	 - Значение устанавливаемого параметра
// 
// Возвращаемое значение:
//  Булево - Истина, при удачной установке параметра; Ложь, в случае ошибки
//
&НаКлиенте
Функция мСцен_УстановитьЗначениеПараметра(Знач ИмяПараметра,ЗначениеПараметра) Экспорт
	
	РезультатОперации = Ложь;
	
	Для каждого стр из ПараметрыСценария Цикл
		Если ВРег(стр.Имя)=Врег(ИмяПараметра) Тогда
			стр.Значение = ЗначениеПараметра;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатОперации;
	
КонецФункции

// Функция - Установить значение параметра
//
// Параметры:
//  ИмяПараметра		 - строка	 - Имя параметра, как в таблице параметров
// 
// 
// Возвращаемое значение:
//  Произвольный - в случае ошибки будет возврат Неопределено
//
&НаКлиенте
Функция мСцен_ПолучитьЗначениеПараметра(Знач ИмяПараметра) Экспорт
	
	Для каждого стр из ПараметрыСценария Цикл
		Если ВРег(стр.Имя)=Врег(ИмяПараметра) Тогда
			Возврат стр.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции


// Функция - Получить номер по строке заголовка
//
// Параметры:
//  ЗаголовокОбъекта	 - строка	 - Текст заголовка/строки содержащей номер
//  ПерваяЧастьЗаголовка - строка	 - Текст до номера, будет срезаться
//  ДлинаНомера			 - число	 - Длина номера
// 
// Возвращаемое значение:
//  строка - номер из строки
//
&НаКлиенте
Функция мСцен_ПолучитьНомерПоСтрокеЗаголовка(Знач ЗаголовокОбъекта, Знач ПерваяЧастьЗаголовка, Знач ДлинаНомера) Экспорт
	
	Номер = "";  
	
	Номер = СокрЛП(СтрЗаменить(ЗаголовокОбъекта,ПерваяЧастьЗаголовка,""));
	Номер = Лев(Номер,ДлинаНомера);
	
	Возврат Номер;
	
КонецФункции

#КонецОбласти

// Служебные
#область Служебные

&НаКлиенте
Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
		
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(Порт <> "", Число(Порт), Неопределено));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Function DoubleQuotationMarks(OutputString)

	// Doubling quotation marks for correctness during export to a file.
	// Это лишнее
	//Return StrReplace(OutputString, """", """""");
	Return OutputString;

EndFunction

&НаКлиенте
Функция РежимМенеджераТестированияДоступен()
	Попытка
		Выполнить("ТестируемоеПриложение = новый ТестируемоеПриложение();");
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции

#КонецОбласти


#Область ВыполнениеСкрипта

#Область ПройтисьПоДеревуСценарияУстаревшее

&НаКлиенте
Процедура мСценСкрипт_ВыполнитьСценарийТестирования() Экспорт
	
	мСценСкрипт_ПройтисьПоДереву();
		
КонецПроцедуры

&НаКлиенте
Процедура мСценСкрипт_ПройтисьПоДереву()
	
	ТестовоеПриложение = Неопределено;
	ОписаниеОшибки = ""; 
	мПараметрыКлиент = новый Структура;
	мПараметрыКлиентСервер = новый Структура;
	
	Попытка
		мСценСкрипт_ПройтисьПоУзлу(ДеревоСценария,ТестовоеПриложение,ОписаниеОшибки,мПараметрыКлиент,мПараметрыКлиентСервер);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Сообщить(ОписаниеОшибки);
		СообщитьОбОшибке("мСценСкрипт_ПройтисьПоДереву",ОписаниеОшибки);
	КонецПопытки;
	
	// сохраняем лог
	СохранитьОтчетВыполненияСценарногоТестирования(Объект.Наименование,Объект.ПутьККаталогуОтчетовВыполненияТестов,Объект.ПутьКФайлуСценария,Объект.ФорматФайлаОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура мСценСкрипт_ПройтисьПоУзлу(Знач УзелРодитель,Знач ТестовоеПриложение,ОписаниеОшибки,мПараметрыКлиент,мПараметрыКлиентСервер)
	
		
	// Идем далее по узлу
	Узлы = УзелРодитель.ПолучитьЭлементы();
	
	Для каждого Узел из Узлы Цикл
		
		Если Узел.Активность=Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		// выполним действие
		мСценСкрипт_ОбработатьТипУзла(Узел,ТестовоеПриложение,ОписаниеОшибки,мПараметрыКлиент,мПараметрыКлиентСервер);  		
		
		// Зайдем в сам Узел
		мСценСкрипт_ПройтисьПоУзлу(Узел,ТестовоеПриложение,ОписаниеОшибки,мПараметрыКлиент,мПараметрыКлиентСервер);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура мСценСкрипт_СделатьШагПоТаблицеСценария()
	
	ОстановитьВыполнениеСценария = Ложь;
	ТекстОшибки = "";
	Если ТестЗапущен=Ложь Тогда
		Возврат;
	КонецЕсли;
	
	// установим время выполнения начало
	Если ИндексТекущегоШага=0 Тогда
		ВремяНачалаТестаUTC = ТекущаяУниверсальнаяДатаВМиллисекундах();
 		ЗамерыВыполненияТестов.Вставить(ИндексТекущегоШагаDDT,новый Структура("ВремяНачалаТестаUTC",ВремяНачалаТестаUTC));
	КонецЕсли;
	
	// опредляем время на каждом шаге
	
	// возврат завершению шагов
	Если ИндексТекущегоШага>=ТаблицаСценария.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(мПараметрыРаботыСкрипта) Тогда
		мПараметрыРаботыСкрипта = новый Структура("ТестовоеПриложение,мПараметрыКлиент,мПараметрыКлиентСервер",Неопределено,новый Структура(),новый Структура());
	КонецЕсли;
	
	ТестовоеПриложение 			= мПараметрыРаботыСкрипта.ТестовоеПриложение;
	ОписаниеОшибки 				= "";
	мПараметрыКлиент 			= мПараметрыРаботыСкрипта.мПараметрыКлиент;
	мПараметрыКлиентСервер 		= мПараметрыРаботыСкрипта.мПараметрыКлиентСервер;
	
	// получим индекс дерева 
	ИдентификаторУзелаДерева = ТаблицаСценария[ИндексТекущегоШага].ИдентификаторУзелаДерева;
	Узел = ДеревоСценария.НайтиПоИдентификатору(ИдентификаторУзелаДерева);
	
	попытка
		Элементы.ДеревоСценария.Развернуть(ИдентификаторУзелаДерева,Ложь);
	Исключение
		Сообщить("Нажмите стоп прежде!");
		Возврат;
	КонецПопытки;
	Элементы.ДеревоСценария.ТекущаяСтрока = ИдентификаторУзелаДерева;
	
	// сохраним время начала выполнения шага
	Узел.ДатаНачалаВыполнения = ТекущаяДата();
	Узел.UTC = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
	// выполним действие
	Попытка
		Узел.ТекстОшибки = "";
		Узел.РезультатВыполнения = "Успешно";
		мСценСкрипт_ОбработатьТипУзла(Узел,ТестовоеПриложение,ОписаниеОшибки,мПараметрыКлиент,мПараметрыКлиентСервер);  	
		ТаблицаСценария[ИндексТекущегоШага].Выполнено = Истина;
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			Узел.ТекстОшибки = Узел.ТекстОшибки+Символы.ПС+ОписаниеОшибки;
			Узел.РезультатВыполнения = "Предупрежедение";
		КонецЕсли;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Сообщить(ТекстОшибки);
		Узел.РезультатВыполнения = "Ошибка";		
		Узел.ТекстОшибки = ТекстОшибки;
		Если НЕ Узел.ПродолжитьПриОшибке=Истина Тогда
			//TODO: исправить костыль не остановки по ошибке DDT
			Если (Объект.DataDrivenTest=Истина И ОстанавливатьсяПоОшибкеDDT=Истина) 
				ИЛИ Объект.DataDrivenTest = Ложь Тогда
				ТестЗапущен = Ложь;
				РучнойРежим = Истина;
				ОстановитьВыполнениеСценария = Истина;
			//	ВызватьИсключение ТекстОшибки;
			КонецЕсли;
		КонецЕсли;
	КонецПопытки;
	// сохранение снимка
	Узел.Attachments = Неопределено;
	СоздатьСкриншот(Узел,Объект.РежимScreenShot,Узел.ТекстОшибки);
	
	Если Узел.РезультатВыполнения = "Ошибка" или Узел.РезультатВыполнения = "Предупрежедение" Тогда
		// проставим вверх желтым цветом
		ПройтиПоУзлуУстновкаЭлементаВверх(Узел,"ИндексВыполнения",3);
	КонецЕсли;
	
	мПараметрыРаботыСкрипта.ТестовоеПриложение = ТестовоеПриложение;
	мПараметрыРаботыСкрипта.мПараметрыКлиент = мПараметрыКлиент;
	мПараметрыРаботыСкрипта.мПараметрыКлиентСервер = мПараметрыКлиентСервер;
	
	
	// следующий шаг
	Если ИндексПереходСТекущегоШага<>0 Тогда
		ИндексТекущегоШага = ИндексПереходСТекущегоШага;
		ИндексПереходСТекущегоШага = 0;
	Иначе
		ИндексТекущегоШага = ИндексТекущегоШага+1;
	КонецЕсли; 
	
	
	// определяем время выполнения
	ВремяОкончанияаТеста = ТекущаяДата();
	ВремяОкончанияаТестаUTC = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Объект.ВремяВыполненияUTC = ВремяОкончанияаТестаUTC-ВремяНачалаТестаUTC;
	
	ЗамерШагаDDT = ЗамерыВыполненияТестов.Получить(ИндексТекущегоШагаDDT);
	Если НЕ ЗамерШагаDDT=Неопределено Тогда
		ЗамерШагаDDT.Вставить("ВремяОкончанияаТестаUTC",ВремяОкончанияаТестаUTC);
		ЗамерШагаDDT.Вставить("ВремяВыполненияUTC",Объект.ВремяВыполненияUTC);
	КонецЕсли;
	
	// ЗАВЕРШЕНО выполнение сценария
	Если ИндексТекущегоШага=ТаблицаСценария.Количество() ИЛИ (ЗначениеЗаполнено(ТекстОшибки) И НЕ Узел.ПродолжитьПриОшибке=Истина) Тогда
		// сформируем сообщение агента о завершении
		Если Объект.РежимРаботаАгента=Истина Тогда
			мАгент_СформироватьСообщениеВыполненияСценария(ТекстОшибки);
		КонецЕсли;
		
		// чсопируем шаги из ТаблицыСценария в ТаблицуОтчетаСценария
		ДобавитьТаблицуСценарияВТаблицуОтчетаСценария();
		// проверим есть ли еще шаги
		Если Объект.DataDrivenTest = Истина 
			И ИндексТекущегоШагаDDT<ТаблицаDDT.Количество()-1 Тогда
							
			ПодключитьОбработчикОжидания("мСценСкрипт_СделатьШагПоТаблицеDDTЗавершение", 0.1, Истина);
			
		Иначе		
			// сохраняем отчет		
			СохранитьОтчетВыполненияСценарногоТестирования(Объект.Наименование, Объект.ПутьККаталогуОтчетовВыполненияТестов, Объект.ПутьКФайлуСценария, Объект.ФорматФайлаОтчета);
			Если НаборТестовЗапущен = Истина Тогда
				ПодключитьОбработчикОжидания("мСценСкрипт_СделатьШагПоТаблицеНаборовСценариевЗавершение", 0.1, Истина);
				// закроем приложение для автотеста
			ИначеЕсли Объект.РежимАвтотест = Истина Тогда
				ЗавершитьТестовыеПриложенияПринудительно();
				ЗавершитьРаботуСистемы(Ложь);
			КонецЕсли;
		КонецЕсли;
	Иначе // ПРОДОЛЖИМ ИНАЧЕ
		// таймер на запуск следующего шага
		Если ИндексТекущегоШага<ТаблицаСценария.Количество() И РучнойРежим=Ложь И ОстановитьВыполнениеСценария=Ложь Тогда
			ПодключитьОбработчикОжидания("мСценСкрипт_СделатьШагПоТаблицеСценария", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура DataDrivenTestПриИзменении(Элемент)
	Если Объект.DataDrivenTest=Истина Тогда
		Элементы.ГруппаОтладкаDDT.Видимость = Истина;
		Элементы.ПутьКФайлуДанных.Видимость = Истина;
	Иначе
		Элементы.ГруппаОтладкаDDT.Видимость = Ложь;
		Элементы.ПутьКФайлуДанных.Видимость = Ложь;
		ОстанавливатьсяПоОшибкеDDT = Ложь;
	КонецЕсли;		
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьТаблицуСценарияВТаблицуОтчетаСценария()

	//TODO: доработать заполнение таблицы
	Для каждого стр из ТаблицаСценария Цикл
		стр_н = ТаблицаОтчетаСценария.Добавить();
		ЗаполнитьЗначенияСвойств(стр_н, стр);
		// данные по результату выполнения
		Узел = ДеревоСценария.НайтиПоИдентификатору(стр.ИдентификаторУзелаДерева);
		ЗаполнитьЗначенияСвойств(стр_н, Узел);  
		// типовые счетчики 
		стр_н.НомерШагаDDT = ИндексТекущегоШагаDDT;
	КонецЦикла;

Конецпроцедуры

&НаКлиенте
Процедура мСценСкрипт_СделатьШагПоТаблицеDDTЗавершение() Экспорт

	//TODO: время замеров
	// сделаем следующий шаг по таблице
	ИндексТекущегоШагаDDT = ИндексТекущегоШагаDDT + 1;
	
	УстновитьПараметрыИзDDT(ИндексТекущегоШагаDDT);
	
	// следующий запуск сценария с самого начала
	мСценСкрипт_СбросПараметровПередЗапускомСценария(Истина);
	мСценСкрипт_РазвернутьДеревоВТаблицу();
	ТекущийAPI = Неопределено;
	ТестЗапущен=Истина;
	Если ТекущийСценарийИзменен=Истина Тогда
		ПройтиПоУзлуГенерацияНомерШагаВниз(ДеревоСценария);
	КонецЕсли;
	
	мСценСкрипт_СделатьШагПоТаблицеСценария();

КонецПроцедуры


&НаКлиенте
Процедура УстновитьПараметрыИзDDT(Индекс)
	// заполним параметры данными из таблицы
	ДанныеШага = ТаблицаDDT[Индекс];
	Для каждого стр из ДанныеШага Цикл
		мСцен_УстановитьЗначениеПараметра(стр.Ключ,стр.Значение);
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура СоздатьСкриншот(Узел,Режим,ТекстОшибки)

	Если НЕ ЗначениеЗаполнено(Режим) ИЛИ Режим = "None" Тогда
		Возврат;
	ИначеЕсли Режим = "Errors" Тогда
		Если НЕ ( ЗначениеЗаполнено(ТекстОшибки) ИЛИ  
			 (Узел.Действие="СделатьСнимокОкна" ИЛИ Узел.Действие="MakeScreenShot")) Тогда
			Возврат;
		КонецЕсли;
		// только для действий с формой
	ИначеЕсли Режим = "Actions" Тогда
		СписокДействий = "ПодключитьТестируемоеПриложение GenerateClientConnectionScript
			|GenerateClientDisconnectionScript GenerateClientDisconnectionScript
			|Стоп
			|НайтиОсновноеОкно
			|НайтиОкно FindWindow
			|НайтиФорму FindForm
			|НайтиОбъект FindObject
			|ПроверкаНаличияЭлемента 
			|Команда Command
			|ВызватьИсключение ThrowException
			|СделатьСнимокОкна MakeScreenShot";
		Если НЕ Найти(СписокДействий, Узел.Действие) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// получаем параметры
	ПараметрыТекущегоПриложения = мСценСкрипт_ПолучитьПараметрыТекущегоПриложения(Узел);
	
	
	Если НЕ ЗначениеЗаполнено(Объект.ПутьККаталогуОтчетовВыполненияТестов) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыТекущегоПриложения.PID=0 ИЛИ НЕ ПараметрыТекущегоПриложения.НомерПорта="" Тогда
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ИмяЛога) Тогда
		ИмяСценарияДляФайла = Объект.ИмяЛога;
	Иначе
		ИмяСценарияДляФайла = СтрЗаменить(СокрЛП(Объект.Наименование)," ","_");
		ИмяСценарияДляФайла = СтрЗаменить(ИмяСценарияДляФайла,Символы.ПС,"");
		ИмяСценарияДляФайла = ИмяСценарияДляФайла+"_"+Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd-H-m-s")+"-";
	КонецЕсли;	

	Файл = новый Файл(Объект.ПутьККаталогуОтчетовВыполненияТестов+"\"+КаталогКартинок);
	
	Если Файл.Существует() Тогда
		ПутьКФайлу = Объект.ПутьККаталогуОтчетовВыполненияТестов+"\"+КаталогКартинок+"\"+ИмяСценарияДляФайла+"Screenshot-DDT-"+Формат(ИндексТекущегоШагаDDT,"ЧГ=;")+"-Step-"+Формат(Узел.НомерШага,"ЧГ=;")+".jpg";
	Иначе
		ПутьКФайлу = Объект.ПутьККаталогуОтчетовВыполненияТестов+"\"+ИмяСценарияДляФайла+"Screenshot-DDT-"+Формат(ИндексТекущегоШагаDDT,"ЧГ=;")+"-Step-"+Формат(Узел.НомерШага,"ЧГ=;")+".jpg";
	КонецЕсли;
	
	// сделаем крин шот
	МассивИменФайлов = новый Массив;
	//МассивИменФайлов = Модуль_ЗаписьЖурналаДействий.СделатьscreenShotПоPIDI(ПараметрыТекущегоПриложения.PID, ПутьКФайлу, Объект.АдресИнтернетExternAutomationUI, Объект.НомерПортаExternAutomationUI );
	МассивИменФайлов = Модуль_ЗаписьЖурналаДействий.СделатьscreenShot(ПараметрыТекущегоПриложения.PID, ПараметрыТекущегоПриложения.НомерПорта, ПараметрыТекущегоПриложения.API, ПутьКФайлу, Объект.АдресИнтернетExternAutomationUI, Объект.НомерПортаExternAutomationUI );
	Если  МассивИменФайлов.Количество() Тогда
		
		Attachments = новый СписокЗначений;
		Для каждого стр из МассивИменФайлов Цикл
			Attachments.Добавить(новый Структура("title,source,type,size", "ScreenShot шаг №"+Узел.НомерШага, стр, "jpg", 10000));
		КонецЦикла;

		Узел.Attachments = Attachments;
	КонецЕсли;
КонецПроцедуры

#Область РазвернутьДеревоВТаблицу

&НаКлиенте
Процедура мСценСкрипт_РазвернутьДеревоВТаблицу(ВсеУзлы=Ложь,ВсеБлоки=Истина)
	
	ТаблицаСценария.Очистить();
	
	мСценСкрипт_ПройтисьПоУзлуДобавитьВТаблицу(ДеревоСценария,ТаблицаСценария,"Активность",ВсеУзлы,ВсеБлоки);
	
	КешУровней = новый Соответствие();
	МаксимальныйШаг = ТаблицаСценария.Количество();
	ПредыдущийУровеньШага = МаксимальныйШаг; 
	Для каждого стр из ТаблицаСценария Цикл
		// по умолчанию следующий
		стр.ИндексСледующегоАктивногоШага = МаксимальныйШаг;
		Узел = ДеревоСценария.НайтиПоИдентификатору(стр.ИдентификаторУзелаДерева);
		
		УзелРодитель = Узел.ПолучитьРодителя(); // корень?
		Уровень = ПолучитьУровень(УзелРодитель);
		Если УзелРодитель=Неопределено Тогда
			УзелРодитель = ДеревоСценария;
		КонецЕсли;
		
		Если НЕ Узел=Неопределено Тогда
			ИдентификаторУзелаДерева = мСценСкрипт_НайтиПервыйАктивныйШагПоУровню(УзелРодитель, Узел, "Активность", ВсеУзлы,ВсеБлоки);
			мОтбор = новый Структура("ИдентификаторУзелаДерева",ИдентификаторУзелаДерева);
			н_строки = ТаблицаСценария.НайтиСтроки(мОтбор);
			Если н_строки.Количество()>0 Тогда
				стр.ИндексСледующегоАктивногоШага = ТаблицаСценария.Индекс(н_строки[0]);
				ПредыдущийУровеньШага = стр.ИндексСледующегоАктивногоШага;				
				КешУровней.Вставить(Уровень,ПредыдущийУровеньШага);
			Иначе
				ПредыдущийУровеньШага = КешУровней.Получить(Уровень-1);
				Если ПредыдущийУровеньШага=Неопределено Тогда
					стр.ИндексСледующегоАктивногоШага = МаксимальныйШаг;
				Иначе
					стр.ИндексСледующегоАктивногоШага = ПредыдущийУровеньШага;
					КешУровней.Вставить(Уровень,ПредыдущийУровеньШага);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьУровень(Узел,Знач Счетчик=0)
	
	Если Узел=Неопределено Тогда
		Возврат Счетчик;
	КонецЕсли;
	
	УзелРодитель = Узел.ПолучитьРодителя();
	Счетчик = Счетчик + 1;
	Возврат ПолучитьУровень(УзелРодитель,Счетчик);
	
КонецФункции

&НаКлиенте
Функция мСценСкрипт_НайтиПервыйАктивныйШагПоУровню(Знач УзелРодитель, Знач ТекущийУзел, Знач ИмяПоляОтметки, Знач ВсеУзлы,Знач ВсеБлоки)

		
	// Идем далее по узлу
	Узлы = УзелРодитель.ПолучитьЭлементы();
	
	Для каждого Узел из Узлы Цикл
		
		Если НЕ ТекущийУзел=Неопределено Тогда
			Если ТекущийУзел<>Узел Тогда
				Продолжить;
			Иначе
				ТекущийУзел=Неопределено;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
				
		Если Узел[ИмяПоляОтметки]=Ложь И ВсеУзлы=Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВсеБлоки=Ложь И Узел.ЭтоБлок=Истина И Узел.Действие<>"ГотовыйБлокШагов" Тогда
			Продолжить;
		КонецЕсли;
		
		Возврат Узел.ПолучитьИдентификатор();
		
		// Зайдем в сам Узел
		//мСценСкрипт_НайтиПервыйАктивныйШагПоУровню(Узел,ВсеУзлы,ВсеБлоки);
		
	КонецЦикла;
	
КонецФункции

// Функция преобразует дерево сценария в таблицу последовательных шагов
//
// Параметры:
// УзелРодитель - ссылка на узел дерева, в рамках которого будет выполнятся преобразование в линейную таблицу
// ТаблицаСценария - ссылка на таблицу с данными (деревом)
// ИмяПоляОтментки - определяет поле в дереве, которого сообщает об активности шага
// ВсеУзлы - определяет, что будет выполнен проход по всем узлам вне зависимости от метки Активности, 
// используется Истина при сохранении. Ложь при запуске сценария
// ВсеБлоки - определяет, что алгоритм будет заходить внутрь блоков
&НаКлиенте
Процедура мСценСкрипт_ПройтисьПоУзлуДобавитьВТаблицу(Знач УзелРодитель,ТаблицаСценария,Знач ИмяПоляОтметки, Знач ВсеУзлы,Знач ВсеБлоки)

		
	// Идем далее по узлу
	Узлы = УзелРодитель.ПолучитьЭлементы();
	
	Для каждого Узел из Узлы Цикл
		
		// пропускаем обработку, если шаг не активен и не все узлы
		Если Узел[ИмяПоляОтметки]=Ложь И ВсеУзлы=Ложь Тогда
			Продолжить;
		КонецЕсли; 		
		 
		Попытка
			// сгенерим  UID
			Если НЕ ЗначениеЗаполнено(Узел.UID) Тогда
				Узел.UID = Строка(Новый UUID());
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		стр_н = ТаблицаСценария.Добавить();
		стр_н.ИдентификаторУзелаДерева = Узел.ПолучитьИдентификатор();
		ЗаполнитьЗначенияСвойств(стр_н,Узел);
		
		// не заходим в иерархию, если не стоит все блоки
		Если ВсеБлоки=Ложь И Узел.ЭтоБлок=Истина И Узел.Действие="ГотовыйБлокШагов" Тогда
			Продолжить;
		КонецЕсли;
		
		// Зайдем в сам Узел
		мСценСкрипт_ПройтисьПоУзлуДобавитьВТаблицу(Узел,ТаблицаСценария,ИмяПоляОтметки,ВсеУзлы,ВсеБлоки);
		
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

#Область РазвернутьТаблицуВДерево

&НаКлиенте
Процедура мСценСкрипт_РазвернутьТаблицуВДерево(ВсеУзлы=Ложь,УзелВхода=Неопределено)  Экспорт
	
	ИндексКорня = "00000000-0000-0000-0000-000000000000";
	СоответствиеМассивовДетей = новый Соответствие;
	МассивКорневыхЭлементов = новый Массив;
	
	Если УзелВхода=Неопределено Тогда
		Корень = ДеревоСценария.ПолучитьЭлементы();
		Корень.Очистить();
	Иначе
		Корень = УзелВхода.ПолучитьЭлементы();
		Для каждого стр из ТаблицаСценария Цикл
			Если стр.PUID=ИндексКорня Тогда
				стр.PUID = УзелВхода.UID;
			КонецЕсли;
		КонецЦикла;
		ИндексКорня = УзелВхода.UID;
	КонецЕсли;	
	
	Для каждого стр из ТаблицаСценария Цикл
		
		Если стр.PUID=ИндексКорня Тогда
			МассивКорневыхЭлементов.Добавить(стр);
		КонецЕсли;
		
		МассивДетей = СоответствиеМассивовДетей.Получить(стр.PUID);
		
		Если МассивДетей=Неопределено Тогда
			МассивДетей = новый Массив;
			МассивДетей.Добавить(стр);
			СоответствиеМассивовДетей.Вставить(стр.PUID,МассивДетей);
		Иначе
			МассивДетей.Добавить(стр);
		КонецЕсли;
		
	КонецЦикла;

	
	Для каждого стр из МассивКорневыхЭлементов Цикл
		Узел = Корень.Добавить();
		ЗаполнитьЗначенияСвойств(Узел,стр);
		ЗаполнитьЗначенияСвойств(Узел,стр.Свойства);
		Если УзелВхода<>Неопределено Тогда
			Узел.ЭтоБлок = УзелВхода.ЭтоБлок;
		КонецЕсли;
		мСценСкрипт_ДобавитьУзелВДерево(Узел,СоответствиеМассивовДетей);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура мСценСкрипт_ДобавитьУзелВДерево(УзелРодитель,СоответствиеМассивовДетей) 	
	
	МассивДетей = СоответствиеМассивовДетей.Получить(УзелРодитель.UID);
	
	Если МассивДетей=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого стр из МассивДетей Цикл
		
		Узел = УзелРодитель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(Узел,стр);
		ЗаполнитьЗначенияСвойств(Узел,стр.Свойства);
		Если Узел.Действие<>"ГотовыйБлокШагов" Тогда
			Узел.ЭтоБлок = УзелРодитель.ЭтоБлок;
		Иначе
			Узел.ЭтоБлок = Истина;
		КонецЕсли;
		мСценСкрипт_ДобавитьУзелВДерево(Узел,СоответствиеМассивовДетей);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&Наклиенте
Функция мСценСкрипт_ПолучитьПараметрыТекущегоПриложения(Узел)

	ПараметрыТекущегоПриложения = новый Структура("PID,НомерПорта,API",0,"","");
	
		
	ПараметрыТекущегоПриложения.API = ТекущийAPI;
	
	// определеим ПИД
	Если ТекущийAPI = "AutomationUI" ИЛИ ТекущийAPI = "" ИЛИ ТекущийAPI = "Selenium" ИЛИ ТекущийAPI = "1cClientApp" Тогда
		УспешноНайденПорт = Ложь;
		Если НЕ ПуллТестируемыхПриложений=Неопределено Тогда
			Если ТекущийНомерПорта=0 Тогда
				ПараметрыПриложения = ПуллТестируемыхПриложений.Получить(Объект.НомерПорта);
				ПараметрыТекущегоПриложения.НомерПорта = Объект.НомерПорта;
			Иначе
				ПараметрыПриложения = ПуллТестируемыхПриложений.Получить(ТекущийНомерПорта);
				ПараметрыТекущегоПриложения.НомерПорта = ТекущийНомерПорта;
			КонецЕсли;
			Если ПараметрыПриложения<>Неопределено Тогда
				ПараметрыТекущегоПриложения.PID = ПараметрыПриложения.ПИД;
				ПараметрыТекущегоПриложения.НомерПорта = ПараметрыПриложения.НомерПорта;
				УспешноНайденПорт = Истина;
			КонецЕсли;
		КонецЕсли;
		Если УспешноНайденПорт=Ложь Тогда
		 // порт по умолчанию
			Для каждого стр из ТаблицаДоступныхПриложений  Цикл
				Если стр.Выбрана=Истина Тогда
					ПараметрыТекущегоПриложения.PID = стр.PID;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;		

	Возврат ПараметрыТекущегоПриложения;
	
КонецФункции

&НаКлиенте
Процедура мСценСкрипт_ОбработатьТипУзла(Узел,ТестовоеПриложение,ОписаниеОшибки,мПараметрыКлиент,мПараметрыКлиентСервер)  Экспорт
	
	Если ЗначениеЗаполнено(Узел.ИмяПеременной) И НЕ мПараметрыКлиент.Свойство(Узел.ИмяПеременной) Тогда
		мПараметрыКлиент.Вставить(Узел.ИмяПеременной,Неопределено);
	КонецЕсли;
	
	ТекущаяПеременная = Неопределено;
	РодительПеременная = Неопределено;
	PID 				= 0;
		
	Если ТекущийAPI = "1cClientApp" ИЛИ ТекущийAPI="" Тогда
		Если ЗначениеЗаполнено(Узел.ИмяПеременной) Тогда			
			ТекущаяПеременная = мПараметрыКлиент[Узел.ИмяПеременной];
			Если ТипЗнч(Узел)=Тип("ДанныеФормыЭлементДерева") Тогда
				Если НЕ Узел.ПолучитьРодителя()=Неопределено Тогда
					Если ЗначениеЗаполнено(Узел.ПолучитьРодителя().ИмяПеременной) Тогда
						РодительПеременная = мПараметрыКлиент[Узел.ПолучитьРодителя().ИмяПеременной];
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Текущий api, меняется только при смене подключения
	//TODO: отрефакторить кусок по переключению API
	//Если (Узел.Действие="ПодключитьТестируемоеПриложение" ИЛИ Узел.Действие="GenerateClientConnectionScript") Тогда
		Если ЗначениеЗаполнено(Узел.API) Тогда
			ТекущийAPI = Узел.API;
		Иначе
			ТекущийAPI = "1cClientApp"; // по дефолту 1С api
		КонецЕсли;
	//КонецЕсли;
	
	ПараметрыТекущегоПриложения = мСценСкрипт_ПолучитьПараметрыТекущегоПриложения(Узел);
	PID = ПараметрыТекущегоПриложения.PID;
	Если ТипЗнч(PID)=Тип("Число") Тогда
		PID = Формат(PID,"ЧГ=;");
	Иначе
		PID = СтрЗаменить(PID," ","" );
	КонецЕсли; 
	
	// Определеим стратегию вывода
	ТекущийМодульОбработки = Неопределено;
	
	Если ТекущийAPI = "1cClientApp" Тогда
		ТекущийМодульОбработки = Модуль_ОбработкаДействий;
		
		Если НЕ ТипЗнч(Узел)=Тип("ДанныеФормыЭлементДерева") Тогда
			// попробуем получить по переменной родителя
			Если Узел.Свойство("РодительИмяПеременной") 
				И ЗначениеЗаполнено(Узел.РодительИмяПеременной) 
				И мПараметрыКлиент.Свойство(Узел.РодительИмяПеременной) Тогда 
				РодительПеременная = мПараметрыКлиент[Узел.РодительИмяПеременной];	
			КонецЕсли;
			Если РодительПеременная=Неопределено Тогда
				// Переопределим родитель переменная по текущему окну или объекту
				Если Узел.Действие="НайтиОсновноеОкно" Тогда
					РодительПеременная = ТестовоеПриложение;
				ИначеЕсли Узел.Действие="НайтиФорму" ИЛИ Узел.Действие="FindForm" 
					ИЛИ	Узел.Действие = "ПолучитьКомандныйИнтерфейс" ИЛИ Узел.Действие = "GetCommandInterface" 
					//ИЛИ	Узел.Действие = "НайтиОбъект" ИЛИ Узел.Действие = "FindObject" 
					Тогда
					РодительПеременная = ТекущийМодульОбработки.ПолучитьТекущееОкно(ТекущийНомерПорта);
				Иначе
					РодительПеременная = ТекущийМодульОбработки.ПолучитьТекущийОбъект(ТекущийНомерПорта);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТекущийAPI = "AutomationUI" Тогда
		ТекущийМодульОбработки = Модуль_ОбработкаДействийAutomationUI;
	ИначеЕсли ТекущийAPI = "Selenium" Тогда
		ТекущийМодульОбработки = Модуль_ОбработкаДействийSelenium;
	Иначе
		ВызватьИсключение "Неподдерживаемый API";
	КонецЕсли;
	
	// состав данных
	Наименование 		= Узел.Наименование;
	ЗаголовокОбъекта 	= Узел.ЗаголовокОбъекта;
	OutputText 			= Узел.OutputText;
	Presentation		= Узел.Presentation;
	ИмяОбъекта			= Узел.ИмяОбъекта;
	
	мСценСкрипт_ПодставитьЗначениеПараметра(Наименование);
	мСценСкрипт_ПодставитьЗначениеПараметра(ИмяОбъекта);
	мСценСкрипт_ПодставитьЗначениеПараметра(ЗаголовокОбъекта);
	мСценСкрипт_ПодставитьЗначениеПараметра(OutputText);
	мСценСкрипт_ПодставитьЗначениеПараметра(Presentation);
	
	// Сформируем универсальную структуру передачи данных
	мПараметры = новый Структура();
	// для ПодключитьТестируемоеПриложение
	мПараметры.Вставить("ИмяПеременной",Узел.ИмяПеременной);
	мПараметры.Вставить("ИмяПеременнойРодителя","");
	Если ТипЗнч(Узел)=Тип("ДанныеФормыЭлементДерева") Тогда
		Если НЕ Узел.ПолучитьРодителя()=Неопределено Тогда
			мПараметры.ИмяПеременнойРодителя = Узел.ПолучитьРодителя().ИмяПеременной;
		КонецЕсли;
	КонецЕсли;
	мПараметры.Вставить("СвойстваПодключенияКлиентаТестирования",Узел.СвойстваПодключенияКлиентаТестирования);
	мПараметры.Вставить("ПараметрыСценария",ПараметрыСценария);
	мПараметры.Вставить("НомерПорта",Объект.НомерПорта);
	мПараметры.Вставить("Интервал",Узел.Интервал);
	мПараметры.Вставить("ТекущийНомерПорта",ТекущийНомерПорта);
	// для ЗакрытьТестируемоеПриложение
	// для НайтиОсновноеОкно
	мПараметры.Вставить("ЗаголовокОбъекта",ЗаголовокОбъекта);
	мПараметры.Вставить("PID",PID);
	мПараметры.Вставить("ИспользоватьВариантыПоиска",Узел.ИспользоватьВариантыПоиска);
	// для НайтиОкно
	мПараметры.Вставить("ЗаголовокОбъекта",ЗаголовокОбъекта);
	мПараметры.Вставить("PID",PID);
	мПараметры.Вставить("ИспользоватьВариантыПоиска",Узел.ИспользоватьВариантыПоиска);
	// для НайтиОбъект
	мПараметры.Вставить("ЗаголовокОбъекта",ЗаголовокОбъекта);
	мПараметры.Вставить("ТипОбъекта",Узел.ТипОбъекта);
	мПараметры.Вставить("РодительПеременная",РодительПеременная);
	мПараметры.Вставить("ИмяОбъекта",ИмяОбъекта);
	мПараметры.Вставить("ИмяКлассаОбъекта",Узел.ИмяКлассаОбъекта);
	мПараметры.Вставить("ИспользоватьВариантыПоиска",Узел.ИспользоватьВариантыПоиска);
	мПараметры.Вставить("ИдентификаторОбъекта",Узел.ИдентификаторОбъекта);
	мПараметры.Вставить("Attribute",Узел.Attribute);
	мПараметры.Вставить("ОдинУровеньВниз",Узел.ОдинУровеньВниз);	
	// для Команда
	мПараметры.Вставить("ЗаголовокОбъекта",ЗаголовокОбъекта);
	мПараметры.Вставить("ИмяКоманды",Узел.Команда);	
	мПараметры.Вставить("ТипОбъекта",Узел.ТипОбъекта);
	мПараметры.Вставить("OutputText",OutputText);
	мПараметры.Вставить("CommandRef",Узел.CommandRef);
	мПараметры.Вставить("Presentation",Presentation);
	мПараметры.Вставить("Direction",Узел.Direction);
	мПараметры.Вставить("RowDescription",Узел.RowDescription); 	
	мПараметры.Вставить("SwitchSelection",Узел.SwitchSelection);
	мПараметры.Вставить("Cancel",Узел.Cancel);
	мПараметры.Вставить("Area",Узел.Area);
	мПараметры.Вставить("ИмяПараметра",Узел.ИмяПараметра);
	мПараметры.Вставить("ЗначениеПараметра",Узел.ЗначениеПараметра);
	мПараметры.Вставить("ПараметрыСценария",ПараметрыСценария);
	мПараметры.Вставить("ClickX",Узел.ClickX);
	мПараметры.Вставить("ClickY",Узел.ClickY);
	мПараметры.Вставить("xPath",Узел.xPath);
	мПараметры.Вставить("Интервал",Узел.Интервал);
	// для НайтиФорму
	мПараметры.Вставить("ЗаголовокОбъекта",ЗаголовокОбъекта);
	мПараметры.Вставить("ИспользоватьВариантыПоиска",Узел.ИспользоватьВариантыПоиска);
	// для запросов
	мПараметры.Вставить("НомерПортаExternAutomationUI",Объект.НомерПортаExternAutomationUI);
	мПараметры.Вставить("АдресИнтернетExternAutomationUI",Объект.АдресИнтернетExternAutomationUI);
	// представление данных
	мПараметры.Вставить("ПредставлениеДанных",Узел.ПредставлениеДанных);
	мПараметры.Вставить("ИмяПараметра",Узел.ИмяПараметра);
	мПараметры.Вставить("ИмяПараметра2",Узел.ИмяПараметра2);
	мПараметры.Вставить("ЗначениеПараметра",Узел.ЗначениеПараметра);
	// сравнить с представлением
	мПараметры.Вставить("УсловиеСравнения",Узел.УсловиеСравнения);
	
	Если Узел.Действие="ПодключитьТестируемоеПриложение" ИЛИ Узел.Действие="GenerateClientConnectionScript" Тогда
		
		ТекущийМодульОбработки.мСценСкрипт_GenerateClientConnection(ТестовоеПриложение, ОписаниеОшибки, мПараметры);
		ТекущийНомерПорта = мПараметры.ТекущийНомерПорта;
		
	ИначеЕсли Узел.Действие="GenerateClientDisconnectionScript" ИЛИ Узел.Действие="ЗакрытьТестируемоеПриложение" Тогда
		
		ТекущийМодульОбработки.мСценСкрипт_GenerateClientDisconnection(ТестовоеПриложение, ОписаниеОшибки, мПараметры);
		
	ИначеЕсли Узел.Действие = "Стоп" Тогда
		
		ТестЗапущен = Ложь;	
		ИндексТекущегоШага = 0;
		ПройтиПоУзлуУстновкаЭлементаВниз(ДеревоСценария,"РезультатВыполнения","");
	
	ИначеЕсли Узел.Действие = "ВызватьИсключение" ИЛИ Узел.Действие = "ThrowExeption" Тогда
		
		ВызватьИсключение OutputText;
		
	ИначеЕсли Узел.Действие = "СделатьСнимокОкна" ИЛИ Узел.Действие = "MakeScreenShot" Тогда
		
	ИначеЕсли Узел.Действие = "Пауза" Тогда
		
		РучнойРежим = Истина;
		
	ИначеЕсли Узел.Действие = "ПолучитьПредставлениеДанных" Тогда
		
		ТекущийМодульОбработки.мСценСкрипт_ПолучитьПредставлениеДанных(ТестовоеПриложение,ОписаниеОшибки,мПараметрыКлиент,ТекущаяПеременная,мПараметры,ПараметрыСценария);
		
		Узел.ПредставлениеДанных = мПараметры.ПредставлениеДанных;
		Узел.ЗначениеПараметра = мПараметры.ЗначениеПараметра;
		
	ИначеЕсли Узел.Действие = "СравнитьСПредставлениемДанных" ИЛИ Узел.Действие = "Assert" Тогда
		
		ТекущийМодульОбработки.мСценСкрипт_СравнитьСПредставлениемДанных(ТестовоеПриложение,ОписаниеОшибки,мПараметрыКлиент,ТекущаяПеременная,мПараметры,ПараметрыСценария);
		
		Узел.ПредставлениеДанных = мПараметры.ПредставлениеДанных;
		
	ИначеЕсли Узел.Действие="ВыполнитьПроизвольныйКодКлиент" ИЛИ Узел.Действие="ExecuteCustomCodeClient" Тогда
		
		мСценСкрипт_ExecuteCustomCodeClient(ТестовоеПриложение,ОписаниеОшибки,мПараметрыКлиент,мПараметрыКлиентСервер,Узел.CustomCodeClient);
		
	ИначеЕсли Узел.Действие="ВыполнитьПроизвольныйКодСервер" ИЛИ Узел.Действие="ExecuteCustomCodeServer" Тогда
		
		мСценСкрипт_ExecuteCustomCodeServer(ОписаниеОшибки,мПараметрыКлиентСервер,Узел.CustomCodeServer);
		
	ИначеЕсли Узел.Действие="ДилогВыбораФайла" ИЛИ Узел.Действие="FileDialog" Тогда
		
		ТекущийМодульОбработки.мСценСкрипт_setFileDialogResult(ТестовоеПриложение,ОписаниеОшибки,мПараметрыКлиентСервер,Узел.filename);
		
	ИначеЕсли Узел.Действие="Timer" ИЛИ Узел.Действие="Таймер" Тогда
		
		мСценСкрипт_seTimer(ОписаниеОшибки,Узел.Интервал);
		
	ИначеЕсли Узел.Действие="ИзПараметра1ВПараметр2" Тогда
		
		мСценСкрипт_ИзПараметра1ВПараметр2(ОписаниеОшибки,Узел.ИмяПараметра,Узел.ИмяПараметра2);
		
	ИначеЕсли Узел.Действие="НайтиОсновноеОкно" Тогда
		
		ТекущийМодульОбработки.мСценСкрипт_НайтиОсновноеОкно(ТестовоеПриложение,ОписаниеОшибки,ТекущаяПеременная,мПараметры);
		
	ИначеЕсли Узел.Действие="НайтиОкно" ИЛИ Узел.Действие="FindWindow" Тогда
		
		ТекущийМодульОбработки.мСценСкрипт_НайтиОкно(ТестовоеПриложение,ОписаниеОшибки,ТекущаяПеременная,мПараметры);
		
	ИначеЕсли Узел.Действие="НайтиФорму" ИЛИ Узел.Действие="FindForm" Тогда	
		
		ТекущийМодульОбработки.мСценСкрипт_НайтиФорму(ТестовоеПриложение,ОписаниеОшибки,ТекущаяПеременная,мПараметры);
		
	ИначеЕсли Узел.Действие = "ПолучитьКомандныйИнтерфейс" ИЛИ Узел.Действие = "GetCommandInterface" Тогда
		
		ТекущийМодульОбработки.мСценСкрипт_ПолучитьКомандныйИнтерфейс(ТестовоеПриложение,ОписаниеОшибки,ТекущаяПеременная,РодительПеременная);
		
	ИначеЕсли Узел.Действие = "НайтиОбъект" ИЛИ Узел.Действие = "FindObject" Тогда
		
		ТекущийМодульОбработки.мСценСкрипт_НайтиОбъект(ТестовоеПриложение,ОписаниеОшибки,ТекущаяПеременная, мПараметры);
		
	ИначеЕсли Узел.Действие = "ПроверкаНаличияЭлемента" Тогда
	
		ТекущийМодульОбработки.мСценСкрипт_ПроверкаНаличияЭлемента(ТестовоеПриложение, ОписаниеОшибки, мПараметры, ПараметрыСценария);		
		
	ИначеЕсли Узел.Действие = "Команда" ИЛИ Узел.Действие = "Command" Тогда

		ИмяПеременнойРодителя="";
		Если ТипЗнч(Узел)=Тип("ДанныеФормыЭлементДерева") Тогда
			Если НЕ Узел.ПолучитьРодителя()=Неопределено Тогда
				ИмяПеременнойРодителя = Узел.ПолучитьРодителя().ИмяПеременной;
			КонецЕсли;
			
			Если ИмяПеременнойРодителя="" Тогда
				РодительПеременная = Неопределено;
			Иначе
				РодительПеременная = мПараметрыКлиент[ИмяПеременнойРодителя];
			КонецЕсли;
		КонецЕсли; 		

		// если имя переменной не задано, тогда присвоим ей родителя, т.к. все кнопки и действия принадлежат обычно родителю
		Если ТекущаяПеременная=Неопределено Тогда
			ТекущаяПеременная = РодительПеременная;
		КонецЕсли;
		
		Если ТекущаяПеременная=Неопределено И ТекущийAPI = "1cClientApp" и ТипЗнч(Узел)=Тип("ДанныеФормыЭлементДерева") Тогда
			Сообщить("Для действия ["+Узел.Наименование+"] не указана переменная, либо не верная ("+Узел.ИмяПеременной+")!"+
			"К текущему родителю ["+?(Узел.ПолучитьРодителя()=Неопределено,"Нет родителя",Узел.ПолучитьРодителя().Наименование)+"] не применимо! Уажите имя переменной!");
		КонецЕсли;
		
		ТекущийМодульОбработки.мСценСкрипт_ВыполнитьКоманду(ТестовоеПриложение,ОписаниеОшибки,мПараметрыКлиент,ТекущаяПеременная,мПараметры);
		
		Узел.ПредставлениеДанных = мПараметры.ПредставлениеДанных;
		Узел.ЗначениеПараметра = мПараметры.ЗначениеПараметра;
		
	ИначеЕсли Узел.Действие = "Условие" ИЛИ Узел.Действие = "Сondition" Тогда

		ОсуществитьПереходСТекущегоШага=Ложь;		
		ТекущийМодульОбработки.мСценСкрипт_ОбработатьУсловие(ТестовоеПриложение,ОписаниеОшибки, Узел, Узел.ИмяПараметра,Узел.ИмяПараметра2,Узел.ЗначениеПараметра,Узел.УсловиеСравнения,ПараметрыСценария,ОсуществитьПереходСТекущегоШага);
		Если ОсуществитьПереходСТекущегоШага=Истина Тогда
			ИндексПереходСТекущегоШага = ТаблицаСценария[ИндексТекущегоШага].ИндексСледующегоАктивногоШага;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущийAPI = "1cClientApp" Тогда
		Если ЗначениеЗаполнено(Узел.ИмяПеременной) Тогда
			мПараметрыКлиент[Узел.ИмяПеременной] = ТекущаяПеременная;
		КонецЕсли;
	КонецЕсли;
	
	Узел.Выполнено = НЕ ЗначениеЗаполнено(ОписаниеОшибки);
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Узел.РезультатВыполнения = "Ошибка";
	КонецЕсли;
	
	Если ТестовоеПриложение<>Неопределено Тогда
		Если ТекущийAPI="1cClientApp" ИЛИ ТекущийAPI="" Тогда
			Попытка
				ИнформацияОбОшибке = ТестовоеПриложение.ПолучитьТекущуюИнформациюОбОшибке();
				Если ИнформацияОбОшибке <> Неопределено Тогда
					Сообщить(НСтр("ru='Описание=';en='Description='")
						+ ИнформацияОбОшибке.Описание + "'");
					Сообщить(НСтр("ru='ИмяМодуля=';en='ModuleName='")
						+ ИнформацияОбОшибке.ИмяМодуля + "'");
					Сообщить(НСтр("ru='НомерСтроки=';en='LineNumber='")
						+ ИнформацияОбОшибке.НомерСтроки + "'");
					Сообщить(НСтр("ru='ИсходнаяСтрока=';en='SourceLine='")
						+ ИнформацияОбОшибке.ИсходнаяСтрока + "'");
					ОписаниеОшибки = ОписаниеОшибки + Символы.ПС
						+ НСтр("ru='Описание=';en='Description='") + ИнформацияОбОшибке.Описание
						+ "'";
					ОписаниеОшибки = ОписаниеОшибки + Символы.ПС
						+ НСтр("ru='ИмяМодуля=';en='ModuleName='") + ИнформацияОбОшибке.ИмяМодуля
						+ "'";
					ОписаниеОшибки = ОписаниеОшибки + Символы.ПС
						+ НСтр("ru='НомерСтроки=';en='LineNumber='")
						+ ИнформацияОбОшибке.НомерСтроки + "'";
					ОписаниеОшибки = ОписаниеОшибки + Символы.ПС
						+ НСтр("ru='ИсходнаяСтрока=';en='SourceLine='")
						+ ИнформацияОбОшибке.ИсходнаяСтрока + "'";

					Узел.ТекстОшибки = ОписаниеОшибки;
					Узел.РезультатВыполнения = "Предупрежедение" ; 
				КонецЕсли;
			Исключение 
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура мСценСкрипт_ПодставитьЗначениеПараметра(ПолеСтроки)
	
	Перем стр;
	МассивСовпадений = новый Массив;
	КешПеременных = новый Соответствие;	
	// обработка заголовка клиента с параметрами  &Параметр
	//Для каждого стр из ПараметрыСценария Цикл
	//	Если Найти(ПолеСтроки,"&"+стр.Имя) Тогда
	//		ПолеСтроки = СтрЗаменить(ПолеСтроки,"&"+стр.Имя,стр.Значение);
	//	КонецЕсли;
	//КонецЦикла;
	
	// 1 запоминаем совпадения
	Для каждого стр из ПараметрыСценария Цикл
		Если Найти(ПолеСтроки,"&"+стр.Имя) Тогда
			//Структура = новый Структура("стр,длина",стр,СтрДлина(стр.Имя));
			МассивСовпадений.Добавить(стр.Имя);
			КешПеременных.Вставить(стр.Имя,стр);
		КонецЕсли;
	КонецЦикла;
	
	// 2 отлавливаем простые случаи
	Если МассивСовпадений.Количество()=0 Тогда	
		Возврат;
	ИначеЕсли МассивСовпадений.Количество()=1 Тогда
		стр = КешПеременных.Получить(МассивСовпадений[0]);
		ПолеСтроки = СтрЗаменить(ПолеСтроки,"&"+стр.Имя,стр.Значение);
		Возврат;
	КонецЕсли;
	
	// 3 сортируем по длине
	МассивСовпаденийПоУбыв = СортировкаСпискомЗначений(МассивСовпадений);
	Для каждого совпад из МассивСовпаденийПоУбыв Цикл
		стр = КешПеременных.Получить(совпад);
		Если стр<>Неопределено Тогда
			ПолеСтроки = СтрЗаменить(ПолеСтроки,"&"+стр.Имя,стр.Значение);
		КонецЕсли;
	КонецЦикла;

	

КонецПроцедуры

//Сортировка списком значений {---
Функция СортировкаСпискомЗначений(Знач Массив,Знач ПоВозрастанию=Ложь)	
	мСписокЗнч = Новый СписокЗначений;
	мСписокЗнч.ЗагрузитьЗначения(Массив);
	
	мСписокЗнч.СортироватьПоЗначению(?(ПоВозрастанию=Истина,НаправлениеСортировки.Возр,НаправлениеСортировки.Убыв));    
	Возврат мСписокЗнч.ВыгрузитьЗначения();
КонецФункции
//---}


#Область Команды




&НаКлиенте
Процедура мСценСкрипт_ExecuteCustomCodeClient(ТестовоеПриложение,ОписаниеОшибки,мПараметрыКлиент,мПараметрыКлиентСервер,CustomCode)
	
	Попытка
		Выполнить(CustomCode);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ВызватьИсключение ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура мСценСкрипт_ExecuteCustomCodeServer(ОписаниеОшибки,мПараметрыКлиентСервер,CustomCode)
	
	Попытка
		УстановитьБезопасныйРежим(Истина);
		Выполнить(CustomCode);
		УстановитьБезопасныйРежим(Ложь);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		УстановитьБезопасныйРежим(Ложь);
		ВызватьИсключение ОписаниеОшибки;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура мСценСкрипт_seTimer(ОписаниеОшибки,Знач Интервал)
	
	// TO DO:
	// пока в синхронном режиме, надо будет переделать на асинхронный
	Если Интервал>600 Тогда
		Интервал = 600;
		Сообщить("Превышен максимально допустимый интевал. Сброшен на 600!");
	КонецЕсли;
	
	ВремяОкончанияОжидания = ТекущаяДата() + Интервал;
	Пока Не ТекущаяДата() >= ВремяОкончанияОжидания Цикл
		// ожидаем
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура мСценСкрипт_ИзПараметра1ВПараметр2(ОписаниеОшибки,Знач ИмяПараметра,Знач ИмяПараметра2)
	
	ЗначениеПараметра = мСцен_ПолучитьЗначениеПараметра(ИмяПараметра);
	мСцен_УстановитьЗначениеПараметра(ИмяПараметра2,ЗначениеПараметра);	
	
КонецПроцедуры



&НаСервереБезКонтекста
Функция мЗначениеИзСтрокиВнутр(Значение)
	Возврат ЗначениеИзСтрокиВнутр(Значение);
КонецФункции

&НаКлиенте
Процедура мСценСкрипт_ЗапуститьКлиентаТестирования(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПутьПодключенияКлиентаТестирования) Тогда
		Сообщить("Укажите путь подключения сценария по умолчанию!");
		Возврат;
	КонецЕсли;
	
	мСценСкрипт_ЗапуститьКлиентовТестированияДляТеста();

КонецПроцедуры

&НаКлиенте
Функция ПроверитьНаличиеФайла(Знач ПутьКФайлу,Знач ИмяРеквизита="")
	
	РезультатПрвоерки = Истина;
	
	// првоерим, а путь существует по умолчанию?
	Если НЕ ЗначениеЗаполнено(ПутьКФайлу) Тогда
		Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
			Сообщить("Не указан путь по умолчанию в настройках - 'ПутьКИсполняемомуФайлу1С'");
		Иначе
			Сообщить("Путь к файлу пустой!");
		КонецЕсли;
		РезультатПрвоерки = Ложь;
	Иначе
		Файл = новый Файл(ПутьКФайлу);
		Если НЕ Файл.Существует() Тогда
			Сообщить("Указанный путь к файлу не существует или нет доступа! :"+ПутьКФайлу);
		КонецЕсли;
		 РезультатПрвоерки = Ложь;
	КонецЕсли;
	
	Возврат РезультатПрвоерки;
КонецФункции

&НаКлиенте
Процедура мСценСкрипт_ЗапуститьКлиентовТестированияДляТеста(ЗапуститьКлиентаПоУмолчанию=Ложь) Экспорт
	
	ПроверитьНаличиеФайла(Объект.ПутьКИсполняемомуФайлу1С,"ПутьКИсполняемомуФайлу1С");
	
	Если Объект.ЭтоНеПредприятие1С=Истина Тогда
		ПутьЗапускаПоУмолчанию = Объект.ПутьКИсполняемомуФайлу1С+" "+Объект.ДополнительныеОпцииЗапуска;
	Иначе
		ПутьЗапускаПоУмолчанию = Объект.ПутьКИсполняемомуФайлу1С+" ENTERPRISE "+?(Объект.ФайловаяБаза," /F "," /S")+" """+Объект.ПутьПодключенияКлиентаТестирования+""" /TESTCLIENT "+?(ЗначениеЗаполнено(Объект.НомерПорта) И Объект.НомерПорта<>1538,"-TPort "+СтрЗаменить(Строка(Объект.НомерПорта),Символы.НПП,""),"") + ?(ЗначениеЗаполнено(Объект.Пользователь1С)," /N """+Объект.Пользователь1С+""" "," ")+?(ЗначениеЗаполнено(Объект.Пользователь1С) И ЗначениеЗаполнено(Объект.Пароль1С),"/P """+Объект.Пароль1С+""" ","")+" "+Объект.ДополнительныеОпцииЗапуска;
	КонецЕсли;
	ПутьЗапуска = "";
	ПуллТестируемыхПриложений = новый Соответствие;
	Браузер = Объект.Браузер;
	API = Объект.ИспользуемыйAPI;
	
	Если ЗапуститьКлиентаПоУмолчанию=Ложь Тогда
		// собираем в цикле порты подключения к приложениям и подключаем
		СписокКлиентовТестирования = новый Массив;
		СоответсвиеПортовКлиентовТестирования = новый Соответствие;
		ПройтиПоУзлуНайтиВсеТестируемыхКлиентов(ДеревоСценария,СписокКлиентовТестирования);
		
		Для каждого стр из СписокКлиентовТестирования Цикл
			НомерПорта = Объект.НомерПорта;
			КлиентТестированияПоУмолчанию = Истина;
			
			// если в строке подключения параметр, тогда его надо найти
			// переписать потом лучше !!!!
			Если Найти(стр,"&") Тогда
				ИмяПараметра = СокрЛП(СтрЗаменить(стр,"&",""));
				стр = мСцен_ПолучитьЗначениеПараметра(ИмяПараметра);
			КонецЕсли;
			
			Попытка
				ОписаниеПодключения = мЗначениеИзСтрокиВнутр(стр);
				Если ТипЗнч(ОписаниеПодключения) = Тип("Соответствие") Тогда
					Если ОписаниеПодключения.Получить("НастройкиПоУмолчанию") = Ложь Тогда
						Браузер = ?(ОписаниеПодключения.Получить("Браузер") = Неопределено, "IE", ОписаниеПодключения.Получить("Браузер"));
						API = ?(ОписаниеПодключения.Получить("API") = Неопределено, "1cClientApp", ОписаниеПодключения.Получить("API"));
						НомерПорта = ?(ОписаниеПодключения.Получить("НомерПорта") = Неопределено, 1538, ОписаниеПодключения.Получить("НомерПорта"));
						КлиентТестированияПоУмолчанию = Ложь;						
						мЭтоНеПредприятие1С = ?(ОписаниеПодключения.Получить("ЭтоНеПредприятие1С") = Неопределено, Ложь, ОписаниеПодключения.Получить("ЭтоНеПредприятие1С"));
						
						Если мЭтоНеПредприятие1С = Истина Тогда
							ПутьЗапуска = Объект.ПутьКИсполняемомуФайлу1С + " "
								+ ОписаниеПодключения.Получить("ДополнительныеОпцииЗапуска");
						Иначе
							ПутьЗапуска = Объект.ПутьКИсполняемомуФайлу1С + " ENTERPRISE "
								+ ?(ОписаниеПодключения.Получить("ЭтоФайловаяБаза"), " /F ", " /S")
								+ " """ + ОписаниеПодключения.Получить("СтрокаПодключения")
								+ """ /TESTCLIENT" + " -TPort "
								+ СтрЗаменить(Строка(НомерПорта), Символы.НПП, "") + " "
								+ ?(ЗначениеЗаполнено(ОписаниеПодключения.Получить("Пользователь1С")), " /N """
								+ ОписаниеПодключения.Получить("Пользователь1С") + """ ", " ")
								+ ?(ЗначениеЗаполнено(ОписаниеПодключения.Получить("Пользователь1С"))
								И ЗначениеЗаполнено(ОписаниеПодключения.Получить("Пароль1С")), "/P """
								+ ОписаниеПодключения.Получить("Пароль1С") + """ ", "") + " "
								+ ОписаниеПодключения.Получить("ДополнительныеОпцииЗапуска");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Исключение			КонецПопытки;
			
			Если СоответсвиеПортовКлиентовТестирования.Получить(НомерПорта)<>Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СоответсвиеПортовКлиентовТестирования.Вставить(НомерПорта,НомерПорта);
			
			Если КлиентТестированияПоУмолчанию=Истина Тогда
				ЗапуститьТестовыеПриложения(ПутьЗапускаПоУмолчанию,НомерПорта,API,Браузер);
			Иначе
				ЗапуститьТестовыеПриложения(ПутьЗапуска,НомерПорта,API,Браузер);
			КонецЕсли;
			
		КонецЦикла; 
		
	Иначе 
		ЗапуститьТестовыеПриложения(ПутьЗапускаПоУмолчанию,Объект.НомерПорта,Объект.ИспользуемыйAPI,Объект.Браузер);
	КонецЕсли;

	
КонецПроцедуры	


&НаКлиенте
Процедура мСценСкрипт_ЗапуститьМенеджерТестирования(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПутьПодключенияКлиентаТестирования) Тогда
		Сообщить("Укажите путь подключения сценария по умолчанию!");
		Возврат;
	КонецЕсли;
	ПутьЗапускаПоУмолчанию = Объект.ПутьКИсполняемомуФайлу1С+" ENTERPRISE "+?(Объект.ФайловаяБаза," /F "," /S")+" """+Объект.ПутьПодключенияКлиентаТестирования+""" /TESTMANAGER " + ?(ЗначениеЗаполнено(Объект.Пользователь1С)," /N """+Объект.Пользователь1С+""" "," ")+?(ЗначениеЗаполнено(Объект.Пользователь1С) И ЗначениеЗаполнено(Объект.Пароль1С),"/P """+Объект.Пароль1С+""" ","")+" "+Объект.ДополнительныеОпцииЗапуска;
	ПутьЗапуска = "";
	
	ЗапуститьСистему(ПутьЗапускаПоУмолчанию);
	
КонецПроцедуры


&НаКлиенте
Процедура ПройтиПоУзлуНайтиВсеТестируемыхКлиентов(УзелРодитель,СписокКлиентовТестирования)
	// Идем далее по узлу
	Узлы = УзелРодитель.ПолучитьЭлементы();
	
	Для каждого Узел из Узлы Цикл
		Если Узел.Действие="ПодключитьТестируемоеПриложение" Тогда
			СписокКлиентовТестирования.Добавить(Узел.СвойстваПодключенияКлиентаТестирования);
		КонецЕсли;
		ПройтиПоУзлуНайтиВсеТестируемыхКлиентов(Узел,СписокКлиентовТестирования);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура УстановитьФлажки(Команда)
	ПройтиПоУзлуУстновкаЭлементаВниз(ДеревоСценария,"Активность",Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	ПройтиПоУзлуУстновкаЭлементаВниз(ДеревоСценария,"Активность",Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПройтиПоУзлуУстновкаЭлементаВниз(УзелРодитель,Знач Имя,Знач Значение)
	// Идем далее по узлу
	Узлы = УзелРодитель.ПолучитьЭлементы();
	
	Для каждого Узел из Узлы Цикл
		Узел[Имя] = Значение;
		ПройтиПоУзлуУстновкаЭлементаВниз(Узел,Имя,Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПройтиПоУзлуГенерацияНомерШагаВниз(УзелРодитель,НомерШага=0)
	// Идем далее по узлу
	Узлы = УзелРодитель.ПолучитьЭлементы();
	
	Для каждого Узел из Узлы Цикл
		НомерШага = НомерШага +1;
		Узел["НомерШага"] = НомерШага;
		ПройтиПоУзлуГенерацияНомерШагаВниз(Узел,НомерШага);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПройтиПоУзлуУстновкаЭлементаВнизИзменитьПоСовпадению(УзелРодитель,Знач Имя,Знач ЗначениеИскомое,Знач Значение)
	// Идем далее по узлу
	Узлы = УзелРодитель.ПолучитьЭлементы();
	
	Для каждого Узел из Узлы Цикл
		Если Узел[Имя] = ЗначениеИскомое Тогда 
			Узел[Имя] = Значение;
		КонецЕсли;
		ПройтиПоУзлуУстновкаЭлементаВнизИзменитьПоСовпадению(Узел,Имя,ЗначениеИскомое,Значение);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Функция НайтиПервыйЭлементПоВнизПоСовпадению(УзелРодитель,Знач Имя,Знач Значение)
	// Идем далее по узлу
	Узлы = УзелРодитель.ПолучитьЭлементы();
	
	Для каждого Узел из Узлы Цикл
		Если Узел[Имя] = Значение Тогда 
			Возврат Узел;
		КонецЕсли;
		Узел = НайтиПервыйЭлементПоВнизПоСовпадению(Узел,Имя,Значение);
		Если Узел<>Неопределено Тогда
			Возврат Узел;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции


&НаКлиенте
Процедура ПройтиПоУзлуУстновкаЭлементаВверх(УзелРебенок,Знач Имя,Знач Значение)
	// Идем далее по узлу
	Узел = УзелРебенок.ПолучитьРодителя();
	
	Если Узел=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Узел[Имя] = Значение;
	ПройтиПоУзлуУстновкаЭлементаВверх(Узел,Имя,Значение);
	
КонецПроцедуры


&НаКлиенте
Процедура ДеревоСценарияАктивностьПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоСценария.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПройтиПоУзлуУстновкаЭлементаВниз(ТекущиеДанные,"Активность",ТекущиеДанные.Активность);
	Если ТекущиеДанные.Активность=Истина Тогда
		ПройтиПоУзлуУстновкаЭлементаВверх(ТекущиеДанные,"Активность",ТекущиеДанные.Активность);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область КомандыУправленияВыполнениемСценария

&НаКлиенте
Процедура мСценСкрипт_ОткрытьСкрытьНавигатор(Команда)
	Если Элементы.СценСкрипт_ОткрытьСкрытьНавигатор.Пометка = Истина Тогда
		Элементы.ПанельИнструментов.Видимость = Истина;
		Элементы.СценСкрипт_ОткрытьСкрытьНавигатор.Пометка = Ложь;
		Элементы.СценСкрипт_ОткрытьСкрытьНавигатор.Картинка=БиблиотекаКартинок.ПереместитьВлево;
	Иначе
		Элементы.ПанельИнструментов.Видимость = Ложь;
		Элементы.СценСкрипт_ОткрытьСкрытьНавигатор.Пометка = Истина;
		Элементы.СценСкрипт_ОткрытьСкрытьНавигатор.Картинка=БиблиотекаКартинок.ПереместитьВправо;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура мСценСкрипт_ОбновитьНомераШагов(Команда)
	ПройтиПоУзлуГенерацияНомерШагаВниз(ДеревоСценария);
КонецПроцедуры

&НаКлиенте
Процедура мСценСкрипт_ВыполнитьСценарийПоШагам(Команда)  Экспорт
	
	//TODO: добавить проверку на API
	Если НЕ РежимМенеджераТестированияДоступен() Тогда
		Сообщить("Режим менеджера тестирования не доступен. Большая часть функционала не доступна!");
	КонецЕсли;
	
	// продолжим, если был в ручном режиме
	Если ТестЗапущен=Ложь Тогда
		мСценСкрипт_СбросПараметровПередЗапускомСценария();
		мСценСкрипт_РазвернутьДеревоВТаблицу();
		ТекущийAPI = Неопределено;
		ТестЗапущен=Истина;
		Если ТекущийСценарийИзменен=Истина Тогда
			ПройтиПоУзлуГенерацияНомерШагаВниз(ДеревоСценария);
		КонецЕсли;		
	КонецЕсли;
	
	РучнойРежим = Ложь;
	
	мСценСкрипт_СделатьШагПоТаблицеСценария();
	
КонецПроцедуры

&НаКлиенте
Процедура мСценСкрипт_ВыполнитьШаг(Команда)
	
	Если ТестЗапущен=Ложь Тогда
		мСценСкрипт_СбросПараметровПередЗапускомСценария();
		мСценСкрипт_РазвернутьДеревоВТаблицу();
		ТестЗапущен=Истина;
	КонецЕсли;
	
	РучнойРежим = Истина;
	
	мСценСкрипт_СделатьШагПоТаблицеСценария();
	
КонецПроцедуры

&НаКлиенте
Процедура мСценСкрипт_Стоп(Команда)
	мСценСкрипт_СбросПараметровПередЗапускомСценария();
	НаборТестовЗапущен = Ложь;
	ТестЗапущен = Ложь;
КонецПроцедуры

// Процедура - Сбрасывает все параметры перед запуском сценария
//
&НаКлиенте
Процедура мСценСкрипт_СбросПараметровПередЗапускомСценария(ЗапускDDT=Ложь)
	ИндексТекущегоШага = 0;
	ИндексПереходСТекущегоШага = 0;
	мПараметрыРаботыСкрипта = Неопределено;
	//TODO: переделать на структуру сброса параметров
	ПройтиПоУзлуУстновкаЭлементаВниз(ДеревоСценария,"РезультатВыполнения","");
	ПройтиПоУзлуУстновкаЭлементаВниз(ДеревоСценария,"ИндексВыполнения",0);
	ПройтиПоУзлуУстновкаЭлементаВниз(ДеревоСценария,"ТекстОшибки","");
	ПройтиПоУзлуУстновкаЭлементаВниз(ДеревоСценария,"UTC",0);
	ПройтиПоУзлуУстновкаЭлементаВниз(ДеревоСценария,"Attachments","");
	
	Если Объект.DataDrivenTest=Ложь Тогда
		ТаблицаОтчетаСценария.Очистить();
		ЗамерыВыполненияТестов = новый Соответствие();
	КонецЕсли;

	Если Объект.DataDrivenTest=Истина И ЗапускDDT=Ложь Тогда
		ЗамерыВыполненияТестов = новый Соответствие();
		ТаблицаОтчетаСценария.Очистить();
		ИндексТекущегоШагаDDT = 0;
		Модуль_ЗагрузкаДанных = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Модуль_ЗагрузкаФайлаДанных");
		ТаблицаDDT = Модуль_ЗагрузкаДанных.ЗагрузитьДанные(Объект.ПутьКФайлуДанных);
		УстновитьПараметрыИзDDT(ИндексТекущегоШагаDDT);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура мСценСкрипт_СгенерироватьКодСценария(Команда)
	Сообщить("В текущей версии не доступно. Ожидается в ближайешее время.");
КонецПроцедуры


&НаКлиенте
Процедура мСценСкрипт_Пауза(Команда)
	
	РучнойРежим = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКИсполняемомуФайлу1СНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие); 
	Диалог.Заголовок = "Выберите исполняемый файл 1C"; 
	Диалог.ПолноеИмяФайла = ""; 
	Фильтр = "Exe-файл (*.exe)|*.exe"; 
	Диалог.Фильтр = Фильтр; 
	Диалог.МножественныйВыбор = Ложь; 
	Если ЗначениеЗаполнено(Объект.ПутьКИсполняемомуФайлу1С) Тогда
		Диалог.Каталог = ПолучитьКаталогПоПутиФайла(Объект.ПутьКИсполняемомуФайлу1С);
	КонецЕсли;	
	Если Диалог.Выбрать() Тогда 
		Объект.ПутьКИсполняемомуФайлу1С = Диалог.ПолноеИмяФайла; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуExternAutomationUIНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие); 
	Диалог.Заголовок = "Выберите исполняемый файл внешней компоненты automation UI"; 
	Диалог.ПолноеИмяФайла = ""; 
	Фильтр = "Exe-файл (*.exe)|*.exe"; 
	Диалог.Фильтр = Фильтр; 
	Диалог.МножественныйВыбор = Ложь; 
	Если ЗначениеЗаполнено(Объект.ПутьКФайлуExternAutomationUI) Тогда
		Диалог.Каталог = ПолучитьКаталогПоПутиФайла(Объект.ПутьКФайлуExternAutomationUI);
	КонецЕсли;	
	Если Диалог.Выбрать() Тогда 
		Объект.ПутьКФайлуExternAutomationUI = Диалог.ПолноеИмяФайла; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПутьККаталогуОтчетовВыполненияТестовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	Диалог.Заголовок = "Выберите каталог"; 
	Диалог.ПолноеИмяФайла = ""; 
	Диалог.МножественныйВыбор = Ложь; 
	Если ЗначениеЗаполнено(Объект.ПутьККаталогуОтчетовВыполненияТестов) Тогда
		Диалог.Каталог = ПолучитьКаталогПоПутиФайла(Объект.ПутьККаталогуОтчетовВыполненияТестов);
	КонецЕсли;	
	Если Диалог.Выбрать() Тогда 
		Объект.ПутьККаталогуОтчетовВыполненияТестов = Диалог.Каталог; 
		ПутьКаталогаОтчетаВыполненияПриИзменении(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПутьКаталогаОтчетаВыполненияПриИзменении(Элемент)
	// попробуем создать каталог для картинок
	Файл = новый Файл(Объект.ПутьККаталогуОтчетовВыполненияТестов);
	Если Файл.Существует() Тогда
		ПутьКаталогКартинок = Объект.ПутьККаталогуОтчетовВыполненияТестов + "\"
			+ КаталогКартинок;
		ФайлКаталогКартинок = новый Файл(ПутьКаталогКартинок);
		Если НЕ ФайлКаталогКартинок.Существует() Тогда
			Попытка
				СоздатьКаталог(ПутьКаталогКартинок);
			Исключение
				Сообщить("Не удалось создать каталог '" + КаталогКартинок
					+ "' для сохранения снимков экранов! Создайте вручную!" + Символы.ПС
					+ ОписаниеОшибки())
			КонецПопытки;
		КонецЕсли;
	Иначе
		Сообщить("Указанный каталог не существует. Также не удалось создать каталог '"
			+ КаталогКартинок + "' для сохранения снимков экранов!");
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область СохранениеОтчетаВыполнения


&НаКлиенте
Функция СохранитьОтчетВыполненияСценарногоТестирования(ИмяСценария,Каталог,ПутьКФайлуСценария="",ФорматФайла="JUnitXML")
	
	// выходим если каталог не указан
	Если НЕ ЗначениеЗаполнено(Каталог) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТестПройден = мСценСкрипт_ПолучитьРезультатВыполненияСценария();
	ПутьКаталогСценария = ПолучитьКаталогПоПутиФайла(ПутьКФайлуСценария);
	
	Если ЗначениеЗаполнено(Объект.ИмяЛога) Тогда
		ИмяСценарияДляФайла = Объект.ИмяЛога;
	Иначе
		ИмяСценарияДляФайла = СтрЗаменить(СокрЛП(ИмяСценария)," ","_");
		ИмяСценарияДляФайла = СтрЗаменить(ИмяСценарияДляФайла,Символы.ПС,"");
	КонецЕсли;
	
	// сохраняем xml файл результата тестирования
	Если ЗначениеЗаполнено(Объект.ИмяЛога) Тогда
		ПутьКФайлуОтчета = Объект.ПутьККаталогуОтчетовВыполненияТестов+"\"+ИмяСценарияДляФайла+".xml";
	Иначе
		ПутьКФайлуОтчета = Объект.ПутьККаталогуОтчетовВыполненияТестов+"\LogTestUI_"+ИмяСценарияДляФайла+"_"+Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd-H-m-s")+".xml";
	КонецЕсли;
	
	мПараметры = новый Структура();
		
	Если ФорматФайла="XML" Тогда
		//ТекстоваяСтрокаФайла = ВыгрузитьСценарийФорматXML(Истина);
	ИначеЕсли ФорматФайла="JUnitXML" Тогда
		ТестРезультатСтруктура = мСценСкрипт_ПолучитьДетальныйРезультатВыполненияСценария();
		Модуль_ВыгрузкаОтчетаJUnit = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Модуль_ВыгрузкаОтчетаJUnit",мПараметры,ЭтаФорма);
		ТекстоваяСтрокаФайла = Модуль_ВыгрузкаОтчетаJUnit.ВыгрузитьОтчетВыполненияСценарногоТестированияФорматJUnitXML(Объект.ПутьККаталогуОтчетовВыполненияТестов,ПутьКаталогСценария,ТестРезультатСтруктура);
	ИначеЕсли ФорматФайла="AllureXML" Тогда
		ТестРезультатСтруктура = мСценСкрипт_ПолучитьДетальныйРезультатВыполненияСценария(Истина);
		Модуль_ВыгрузкаОтчетаAllure = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Модуль_ВыгрузкаОтчетаAllure",мПараметры,ЭтаФорма);
		ТекстоваяСтрокаФайла = Модуль_ВыгрузкаОтчетаAllure.ВыгрузитьОтчетВыполненияСценарногоТестированияФорматAllureXML(Объект.ПутьККаталогуОтчетовВыполненияТестов,ПутьКаталогСценария,ТестРезультатСтруктура);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстоваяСтрокаФайла) Тогда
		
		Документ = новый ТекстовыйДокумент;
		Документ.УстановитьТекст(ТекстоваяСтрокаФайла);
		СохранениеФайлаСценария = новый ОписаниеОповещения("СохранениеФайлаСценария",ЭтотОбъект);
		Попытка
			Документ.Записать(ПутьКФайлуОтчета,"UTF-8");
			Попытка
				Документ.НачатьЗапись(СохранениеФайлаСценария,ПутьКФайлуОтчета,"UTF-8");
			Исключение
				Документ.Записать(ПутьКФайлуОтчета,"UTF-8");
			КонецПопытки;
		Исключение
		КонецПопытки;
		
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция мСценСкрипт_ПолучитьРезультатВыполненияСценария()
	
	ТестПройден = Истина;
	
	// определяем пройден или нет
	Для каждого стр из ТаблицаОтчетаСценария Цикл
		Если стр.Выполнено = Ложь Тогда
			ТестПройден = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТестПройден;

КонецФункции

&НаКлиенте
Функция мСценСкрипт_ПолучитьДетальныйРезультатВыполненияСценария(ВыгружатьШаги=Ложь)
	
	ТестРезультатСтруктура = новый Структура();
	ТестРезультатСтруктура.Вставить("Имя",Объект.Наименование);
	ТестРезультатСтруктура.Вставить("Представление",Объект.Наименование);
	ТестРезультатСтруктура.Вставить("ИдентификаторТеста",?(ЗначениеЗаполнено(Объект.TestID),Объект.TestID,Объект.ИдентификаторТеста));
	ТестРезультатСтруктура.Вставить("КоличествоОбщее",1);
	ТестРезультатСтруктура.Вставить("КоличествоНевыполненных",0);
	ТестРезультатСтруктура.Вставить("КоличествоОшибок",0);
	ТестРезультатСтруктура.Вставить("КоличествоПропущенных",0);
	
	ТестРезультатСтруктура.Вставить("КоличествоШаговОбщее",1);
	ТестРезультатСтруктура.Вставить("КоличествоШаговНевыполненных",0);
	ТестРезультатСтруктура.Вставить("КоличествоШаговОшибок",0);
	ТестРезультатСтруктура.Вставить("КоличествоШаговПропущенных",0);
	
	ТестРезультатСтруктура.Вставить("ТестПройден",Истина);
	ТестРезультатСтруктура.Вставить("ТекстОшибки",""); 
	
	ТестРезультатСтруктура.Вставить("РезультатВыполнения",0); 
	ТестРезультатСтруктура.Вставить("time",0); 
	ТестРезультатСтруктура.Вставить("start",ВремяНачалаТестаUTC); 
	ТестРезультатСтруктура.Вставить("stop",ВремяОкончанияаТестаUTC); 
	ТестРезультатСтруктура.Вставить("ТестовыеСлучаи",новый Массив);
	ТестРезультатСтруктура.Вставить("Severity",?(ЗначениеЗаполнено(Объект.Severity),Объект.Severity,"Значительная")); 

	
	// 1 Итого по всем случаям
	Для каждого стр из ТаблицаОтчетаСценария Цикл
		Если стр.РезультатВыполнения="Ошибка" Тогда
			ТестРезультатСтруктура.КоличествоШаговОшибок=ТестРезультатСтруктура.КоличествоШаговОшибок+1;
			ТестРезультатСтруктура.ТекстОшибки = ТестРезультатСтруктура.ТекстОшибки+Символы.ПС+"Шаг №"+стр.НомерШага+" '"+стр.Наименование+"' Действие/Команда '"+стр.Действие+"/"+?(ЗначениеЗаполнено(стр.Команда),стр.Команда,"-")+"' "+ стр.ТекстОшибки;
		КонецЕсли; 		
		мСценСкрипт_ПолучитьКодОшибкиПоРезультатуВыполнения(ТестРезультатСтруктура, стр);		
	КонецЦикла;
	
	Если ТестРезультатСтруктура.КоличествоШаговОшибок<>0 Тогда
		ТестРезультатСтруктура.ТестПройден = Ложь;
		ТестРезультатСтруктура.КоличествоНевыполненных = 1;
		ТестРезультатСтруктура.КоличествоОшибок = 1;
	КонецЕсли;
	
	
	// 2 Прогоним по всем данным (выделяем тестовые случаи)
	ТекущийНомерШагаDDT = 0;
	МассивСтруктур = новый Массив;
	СтрокаРеквизитовСтруктуры = "Выполнено,ИдентификаторУзелаДерева,Свойства,Наименование,НомерШагаDDT,ТекстОшибки,НомерШага,РезультатВыполнения,Действие,Команда,UTC,Attachments";
	Для ш=0 по ТаблицаОтчетаСценария.Количество() Цикл
		
		Если ш=ТаблицаОтчетаСценария.Количество() Тогда
			Прервать;
		КонецЕсли;
		
		стр = ТаблицаОтчетаСценария[ш];
		
		СтруктураСтроки = новый Структура(СтрокаРеквизитовСтруктуры);
		ЗаполнитьЗначенияСвойств(СтруктураСтроки,ТаблицаОтчетаСценария[ш]);
		МассивСтруктур.Добавить(СтруктураСтроки);
		
		// изменился DDT или конец цикла
		Если ТекущийНомерШагаDDT<>стр.НомерШагаDDT ИЛИ ш=ТаблицаОтчетаСценария.Количество()-1 Тогда
			ЗамерВремениDDT = ЗамерыВыполненияТестов.Получить(стр.НомерШагаDDT);
			TestCase = мСценСкрипт_ПолучитьДетальныйРезультатВыполненияСценарияПоМассивуСтруктур(МассивСтруктур,ТекущийНомерШагаDDT,ЗамерВремениDDT);
			ТестРезультатСтруктура.ТестовыеСлучаи.Добавить(TestCase);
			ТекущийНомерШагаDDT = стр.НомерШагаDDT;
			МассивСтруктур = новый Массив;
		КонецЕсли;
		
	КонецЦикла;
	
	// посчитаем время выполнения
	Для каждого стр из ТестРезультатСтруктура.ТестовыеСлучаи Цикл
		ТестРезультатСтруктура.time = ТестРезультатСтруктура.time + стр.time;
	КонецЦикла;
	
	Если ТестРезультатСтруктура.ТестовыеСлучаи.Количество()>1 Тогда
		ТестРезультатСтруктура.start = ТестРезультатСтруктура.ТестовыеСлучаи[0].start;  
		ТестРезультатСтруктура.stop = ТестРезультатСтруктура.ТестовыеСлучаи[ТестРезультатСтруктура.ТестовыеСлучаи.ВГраница()].stop;
	КонецЕсли;
	
	Возврат ТестРезультатСтруктура;

КонецФункции

&НаКлиенте
Функция мСценСкрипт_ПолучитьДетальныйРезультатВыполненияСценарияПоМассивуСтруктур(Знач МассивСтруктур,Знач ТекущийНомерШагаDDT,Знач ЗамерВремениDDT)
	
	ТестРезультатСтруктура = новый Структура();
	ТестРезультатСтруктура.Вставить("Имя",Объект.Наименование);
	ТестРезультатСтруктура.Вставить("Представление",Объект.Наименование);
	
	Если Объект.DataDrivenTest=Истина Тогда
		Попытка
			Наименование = "";
			 
			Если ТаблицаDDT[ТекущийНомерШагаDDT].Свойство("Наименование") 
				И ЗначениеЗаполнено(ТаблицаDDT[ТекущийНомерШагаDDT].Наименование) Тогда
				Наименование = ТаблицаDDT[ТекущийНомерШагаDDT].Наименование;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Наименование) Тогда
				ТестРезультатСтруктура.Представление = "№ DDT "+Формат(ТекущийНомерШагаDDT,"ЧГ=")+" '"+ТестРезультатСтруктура.Представление+"'";
				ТестРезультатСтруктура.Имя = Формат(ТекущийНомерШагаDDT,"ЧГ=")+" "+ТестРезультатСтруктура.Имя;				
			Иначе
				ТестРезультатСтруктура.Представление = Наименование;
				ТестРезультатСтруктура.Имя = ТестРезультатСтруктура.Имя+" ("+Наименование+")"; 
			КонецЕсли;
			
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ТестРезультатСтруктура.Вставить("ИдентификаторТеста",?(ЗначениеЗаполнено(Объект.TestID),Объект.TestID,Объект.ИдентификаторТеста));
	ТестРезультатСтруктура.Вставить("ВремяВыполнения",Окр(ЗамерВремениDDT.ВремяВыполненияUTC/1000,2,РежимОкругления.Окр15как20));
	ТестРезультатСтруктура.Вставить("КоличествоОбщее",1);
	ТестРезультатСтруктура.Вставить("КоличествоНевыполненных",0);
	ТестРезультатСтруктура.Вставить("КоличествоОшибок",0);
	ТестРезультатСтруктура.Вставить("КоличествоПропущенных",0);
	
	ТестРезультатСтруктура.Вставить("КоличествоШаговОбщее",1);
	ТестРезультатСтруктура.Вставить("КоличествоШаговНевыполненных",0);
	ТестРезультатСтруктура.Вставить("КоличествоШаговОшибок",0);
	ТестРезультатСтруктура.Вставить("КоличествоШаговПропущенных",0);
	
	ТестРезультатСтруктура.Вставить("ТестПройден",Истина);
	ТестРезультатСтруктура.Вставить("ТекстОшибки",""); 
	
	ТестРезультатСтруктура.Вставить("РезультатВыполнения",0); 
	ТестРезультатСтруктура.Вставить("time",Окр((ЗамерВремениDDT.ВремяОкончанияаТестаUTC-ЗамерВремениDDT.ВремяНачалаТестаUTC)/1000,2,РежимОкругления.Окр15как20)); 
	ТестРезультатСтруктура.Вставить("start",ЗамерВремениDDT.ВремяНачалаТестаUTC); 
	ТестРезультатСтруктура.Вставить("stop",ЗамерВремениDDT.ВремяОкончанияаТестаUTC); 
	ТестРезультатСтруктура.Вставить("ТестовыеСлучаи",новый Массив);
	ТестРезультатСтруктура.Вставить("Severity",?(ЗначениеЗаполнено(Объект.Severity),Объект.Severity,"Значительная")); 
	ТестРезультатСтруктура.Вставить("Шаги",новый Массив); 
	
	
	// 1.1 На сценарий существует один целый тестовый случай

	Для каждого стр из МассивСтруктур Цикл
		Если стр.РезультатВыполнения="Ошибка" Тогда
			ТестРезультатСтруктура.КоличествоШаговОшибок=ТестРезультатСтруктура.КоличествоШаговОшибок+1;
			ТестРезультатСтруктура.ТекстОшибки = ТестРезультатСтруктура.ТекстОшибки+Символы.ПС+"Шаг №"+стр.НомерШага+" '"+стр.Наименование+"' Действие/Команда '"+стр.Действие+"/"+?(ЗначениеЗаполнено(стр.Команда),стр.Команда,"-")+"' "+ Символы.ПС + стр.ТекстОшибки;
		КонецЕсли;
		
		мСценСкрипт_ПолучитьКодОшибкиПоРезультатуВыполнения(ТестРезультатСтруктура, стр);
		
	КонецЦикла;	
	
	Если ТестРезультатСтруктура.КоличествоШаговОшибок<>0 Тогда
		ТестРезультатСтруктура.ТестПройден = Ложь;
		ТестРезультатСтруктура.КоличествоНевыполненных = 1;
		ТестРезультатСтруктура.КоличествоОшибок = 1;
	КонецЕсли;
	
	// 1.3 Сформируем шаги
	// формируем лист родителей
	СоответсвияМассиваРодителей = Новый Соответствие();
	Для каждого стр из МассивСтруктур Цикл
		
		Узел = ДеревоСценария.НайтиПоИдентификатору(стр.ИдентификаторУзелаДерева);
		
		Если Узел=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураШага = новый Структура("Шаги,name,title,start,stop,РезультатВыполнения,ТекстОшибки,НомерШага,Действие,Команда,severity,status,Attachments",новый Массив,
			стр.Наименование,стр.Наименование,стр.UTC,стр.UTC,стр.РезультатВыполнения,стр.ТекстОшибки,стр.НомерШага,стр.Действие,стр.Команда,Узел.Severity,Неопределено,новый Массив);
		Если ТипЗнч(стр.Attachments)=Тип("СписокЗначений") И стр.Attachments.Количество()>0 Тогда
			Для каждого влож из стр.Attachments Цикл
				СтруктураШага.Attachments.Добавить(влож.Значение);
			КонецЦикла;
		КонецЕсли;
		СоответсвияМассиваРодителей.Вставить(Узел,СтруктураШага);
		
		// добавим родительские шаги в переменную результирующей структуры
		УзелРодитель = Узел.ПолучитьРодителя();
		
		Если УзелРодитель<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТестРезультатСтруктура.Шаги.Добавить(СтруктураШага);
		
	КонецЦикла;
	
	// прогоняем и записываем детей
	Для каждого стр из МассивСтруктур Цикл
		
		Узел = ДеревоСценария.НайтиПоИдентификатору(стр.ИдентификаторУзелаДерева);
		
		Если Узел=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УзелРодитель = Узел.ПолучитьРодителя();
		
		Если УзелРодитель=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураШага  = СоответсвияМассиваРодителей.Получить(Узел);
		СтруктураШагаРодителя = СоответсвияМассиваРодителей.Получить(УзелРодитель);
		
		Если СтруктураШага=Неопределено ИЛИ СтруктураШагаРодителя=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураШагаРодителя.Шаги.Добавить(СтруктураШага);
		
	КонецЦикла;
	
	
	Возврат ТестРезультатСтруктура;

КонецФункции

&НаКлиенте
Процедура мСценСкрипт_ПолучитьРезультатВыполнениеПоУзлуВниз(Знач Узел, ТестРезультатСтруктура )
	
	Если Узел=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Узел.РезультатВыполнения="Ошибка" Тогда
		ТестРезультатСтруктура.КоличествоШаговОшибок=ТестРезультатСтруктура.КоличествоШаговОшибок+1;
		ТестРезультатСтруктура.ТекстОшибки = ТестРезультатСтруктура.ТекстОшибки+Символы.ПС+"Шаг №"+Узел.НомерШага+" '"+Узел.Наименование+"' Действие/Команда '"+Узел.Действие+"/"+?(ЗначениеЗаполнено(Узел.Команда),Узел.Команда,"-")+"' "+ Узел.ТекстОшибки;
	КонецЕсли;
	
	Если Узел.UTC<>0 Тогда
		ТестРезультатСтруктура.stop = Узел.UTC;
	КонецЕсли;

	мСценСкрипт_ПолучитьКодОшибкиПоРезультатуВыполнения(ТестРезультатСтруктура, Узел);
	
	
	МассивДетей = Узел.ПолучитьЭлементы();
	
	Для каждого Ребенок из МассивДетей Цикл
		мСценСкрипт_ПолучитьРезультатВыполнениеПоУзлуВниз(Ребенок,ТестРезультатСтруктура);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура мСценСкрипт_ПолучитьКодОшибкиПоРезультатуВыполнения(Знач ТестРезультатСтруктура, Знач Узел)
	
	Если Узел.РезультатВыполнения = "Успешно" И ТестРезультатСтруктура.РезультатВыполнения<1 Тогда
		ТестРезультатСтруктура.РезультатВыполнения = 1;
	ИначеЕсли Узел.РезультатВыполнения = "Предупрежедение" И ТестРезультатСтруктура.РезультатВыполнения<2 Тогда
		ТестРезультатСтруктура.РезультатВыполнения = 2;
	ИначеЕсли Узел.РезультатВыполнения="Ошибка" И ТестРезультатСтруктура.РезультатВыполнения<3 Тогда
		ТестРезультатСтруктура.РезультатВыполнения = 3;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СохранениеЗагрузкаСценария

&НаКлиенте
Процедура мСценСкрипт_ЗагрузитьСценарий(Команда) 	
	
	// проверим на модифицированность сценария
	Если ТекущийСценарийИзменен=Ложь Тогда
		мСценСкрипт_ЗагрузитьСценарийПоПути(Объект.ПутьКФайлуСценария);	
	Иначе
		мСценСкрипт_ПоказатьВопросПриНаличииИзмененийСценария(Объект.ПутьКФайлуСценария);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура мСценСкрипт_ЗагрузитьСценарийПоПути(ПутьКФайлу)
	
	// загружаем
	Если НЕ ЗагрузитьСценарийФорматXML(ПутьКФайлу) = Ложь Тогда
		// 2. Преобразуем таблицу в дерево  
		мСценСкрипт_РазвернутьТаблицуВДерево(Истина);
		// 3. Откроем дерево в случае успешной загрузки
		Элементы.ЖурналПреобразование.ТекущаяСтраница = Элементы.СтраницаДеревоСценария;
		// 4. Развернем дерево до первого уровня (если в корне один элемент)
		Если ДеревоСценария.ПолучитьЭлементы().Количество()=1 Тогда
			ПервыйЭлемент = ДеревоСценария.ПолучитьЭлементы()[0];
			Элементы.ДеревоСценария.Развернуть(ПервыйЭлемент.ПолучитьИдентификатор(),ЛОЖЬ);
		КонецЕсли;
		// 5. Сбросим флаг изменения
		ТекущийСценарийИзменен = Ложь;	
		// 6. В дереве проектов пометим флагом, текущий проект
		Если Элементы.ДеревоПроектов.ТекущиеДанные<> Неопределено Тогда
			ПройтиПоУзлуУстновкаЭлементаВниз(ДеревоПроектов,"Текущий",Ложь);
			ПройтиПоУзлуУстновкаЭлементаВнизИзменитьПоСовпадению(ДеревоПроектов,"ДанныеКартинки",5,1);

			Элементы.ДеревоПроектов.ТекущиеДанные.Текущий = Истина;
			Элементы.ДеревоПроектов.ТекущиеДанные.ДанныеКартинки = 5; 
		КонецЕсли;
		
		ПройтиПоУзлуГенерацияНомерШагаВниз(ДеревоСценария);
		
		ИнициализироватьТаблицуИзменений();
	КонецЕсли;
	
	
КонецПроцедуры


&НаКлиенте
Процедура мСценСкрипт_СохранитьСценарий(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		Сообщить("Укажите имя сценария!");
		Возврат;
	КонецЕсли;
	
	// 1. Преобразуем дерево в таблицу
	мСценСкрипт_РазвернутьДеревоВТаблицу(Истина,Ложь);
	// 2. Сохраним	
	
	Если Объект.ТипФайлаСценария="XML" Тогда
		ТекстоваяСтрокаФайла = ВыгрузитьСценарийФорматXML();
	Иначе
		Сообщить("Выбранный формат не поддерживается");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстоваяСтрокаФайла) Тогда
		
		Документ = новый ТекстовыйДокумент;
		Документ.УстановитьТекст(ТекстоваяСтрокаФайла);
		СохранениеФайлаСценария = новый ОписаниеОповещения("СохранениеФайлаСценария",ЭтотОбъект);
		Попытка
			Документ.НачатьЗапись(СохранениеФайлаСценария,Объект.ПутьКФайлуСценария,"UTF-8");
			ТекущийСценарийИзменен = Ложь;
		Исключение
			Документ.Записать(Объект.ПутьКФайлуСценария,"UTF-8");
			ТекущийСценарийИзменен = Ложь;
		КонецПопытки;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранениеФайлаСценария(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат=Истина Тогда
		Сообщить("Файл записан успешно!");
	Иначе
		Сообщить("При сохранении файла конфигурации произошла ошибка!");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыгрузитьСценарийФорматXML(ЛогОшибок=Ложь)

	XMLСтрока = "";  	
	
	Попытка
		
		// Создать объект записи XML и открыть файл
		НоваяЗаписьXML = Новый ЗаписьXML;
		НоваяЗаписьXML.УстановитьСтроку("UTF-8");
		
		НоваяЗаписьXML.ЗаписатьОбъявлениеXML();
		
		НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Скрипт");
		
		НоваяЗаписьXML.ЗаписатьАтрибут("Версия","2.2");
		НоваяЗаписьXML.ЗаписатьАтрибут("Наименование",Объект.Наименование);
		НоваяЗаписьXML.ЗаписатьАтрибут("Автор",Объект.Автор);
		НоваяЗаписьXML.ЗаписатьАтрибут("АдресИнтернет",Объект.АдресИнтернет);
		Если НЕ ЗначениеЗаполнено(Объект.ИдентификаторТеста) Тогда
			Объект.ИдентификаторТеста = СформироватьАвтоматическиИдентификаторТеста(Объект.Наименование);;
		КонецЕсли;
		НоваяЗаписьXML.ЗаписатьАтрибут("ИдентификаторТеста",Объект.ИдентификаторТеста);
		НоваяЗаписьXML.ЗаписатьАтрибут("Severity",Объект.Severity);
		
		// свойства проекта по умолчанию
		НоваяЗаписьXML.ЗаписатьАтрибут("DefaultAPI",Объект.ИспользуемыйAPI);
		НоваяЗаписьXML.ЗаписатьАтрибут("DefaultBrowser",Объект.Браузер);
		НоваяЗаписьXML.ЗаписатьАтрибут("DefaultPort",XMLСтрока(Объект.НомерПорта));
		
		НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ТаблицаШагов");
		НоваяЗаписьXML.ЗаписатьАтрибут("КоличествоШагов",Строка(ТаблицаСценария.Количество()));

		Для каждого стр из ТаблицаСценария Цикл
			
			Узел = ДеревоСценария.НайтиПоИдентификатору(стр.ИдентификаторУзелаДерева);
			УзелРодитель = Узел.ПолучитьРодителя();
			
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Шаг");
			
			// индекс текущего узла
			НоваяЗаписьXML.ЗаписатьАтрибут("UID",стр.UID);
			// первоначальный индекс узла, если загрузка идет из блока готовых шагов
			НоваяЗаписьXML.ЗаписатьАтрибут("FUID",стр.FUID);
			// индекс первоначального узла блока родителя текущего узла
			НоваяЗаписьXML.ЗаписатьАтрибут("BFUID",стр.BFUID);
			
			// индекс родителя
			Если УзелРодитель=Неопределено Тогда
				НоваяЗаписьXML.ЗаписатьАтрибут("PUID","00000000-0000-0000-0000-000000000000");
			Иначе
				НоваяЗаписьXML.ЗаписатьАтрибут("PUID",УзелРодитель.UID);
			КонецЕсли;
			
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Свойства");
			
			// Активность	
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Активность");
			НоваяЗаписьXML.ЗаписатьТекст(?(Узел.Активность=Истина,"true","false"));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 			
			// Наименование
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Наименование");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.Наименование);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// Описание
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Описание");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.Описание);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// ТипОбъекта
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ТипОбъекта");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.ТипОбъекта);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// ЗаголовокОбъекта
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ЗаголовокОбъекта");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.ЗаголовокОбъекта);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// ЭтоГлавноеОкно
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ЭтоГлавноеОкно");
			НоваяЗаписьXML.ЗаписатьТекст(?(Узел.ЭтоГлавноеОкно=Истина,"true","false"));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// ИмяПеременной
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ИмяПеременной");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.ИмяПеременной);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// Действие
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Действие");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.Действие);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// ИмяОбъекта
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ИмяОбъекта");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.ИмяОбъекта);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// ДанныеКартинки
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ДанныеКартинки");
			НоваяЗаписьXML.ЗаписатьТекст(Строка(Узел.ДанныеКартинки));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// Команда
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Команда");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.Команда);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// ПродолжитьПриОшибке
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ПродолжитьПриОшибке");
			НоваяЗаписьXML.ЗаписатьТекст(?(Узел.ПродолжитьПриОшибке=Истина,"true","false"));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// OutputText
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("OutputText");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.OutputText);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// CommandRef
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("CommandRef");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.CommandRef);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// Presentation
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Presentation");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.Presentation);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// Direction
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Direction");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.Direction);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// RowDescription
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("RowDescription");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.RowDescription);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// SwitchSelection
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("SwitchSelection");
			НоваяЗаписьXML.ЗаписатьТекст(?(Узел.SwitchSelection=Истина,"true","false"));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();			
			// Cancel
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Cancel");
			НоваяЗаписьXML.ЗаписатьТекст(?(Узел.Cancel=Истина,"true","false"));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			// Area
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Area");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.Area);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();			
			// CustomCodeClient
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("CustomCodeClient");
			НоваяЗаписьXML.ЗаписатьСекциюCDATA(Узел.CustomCodeClient);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// CustomCodeServer
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("CustomCodeServer");
			НоваяЗаписьXML.ЗаписатьСекциюCDATA(Узел.CustomCodeServer);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// ПредставлениеДанных
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ПредставлениеДанных");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.ПредставлениеДанных);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// СвойстваПодключенияКлиентаТестирования
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("СвойстваПодключенияКлиентаТестирования");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.СвойстваПодключенияКлиентаТестирования);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// API
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("API");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.API);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// ИмяКлассаОбъекта
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ИмяКлассаОбъекта");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.ИмяКлассаОбъекта);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			// ИдентификаторОбъекта 
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ИдентификаторОбъекта");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.ИдентификаторОбъекта);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			// Attribute
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Attribute");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.Attribute);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			// ОдинУровеньВниз
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ОдинУровеньВниз");
			НоваяЗаписьXML.ЗаписатьТекст(?(Узел.ОдинУровеньВниз=Истина,"true","false"));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// ClickX
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ClickX");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.ClickX);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 			
			// ClickY
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ClickY");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.ClickY);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// xPath
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("xPath");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.xPath);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 						
			// Интервал
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Интервал");
			НоваяЗаписьXML.ЗаписатьТекст(Строка(Узел.Интервал));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// ИспользоватьВариантыПоиска
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ИспользоватьВариантыПоиска");
			НоваяЗаписьXML.ЗаписатьТекст(?(Узел.ИспользоватьВариантыПоиска=Истина,"true","false"));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// ЭтоБлок
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ЭтоБлок");
			НоваяЗаписьXML.ЗаписатьТекст(?(Узел.ЭтоБлок=Истина,"true","false"));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 			
			// Library
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Library");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.Library);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			// ПутьБлокШагов
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ПутьБлокШагов");
			ПутьБлокШагов = Узел.ПутьБлокШагов;
			// пытаемся срезать путь к библиотеке, чтобы получить относительный
			// сообщим об ошибках
			Если ЗначениеЗаполнено(Узел.Library) и НЕ ЗначениеЗаполнено(Объект.ПутьККаталогуБиблиотекиСценариев) Тогда
				Сообщить("Имя библиотеки ("+Узел.Library+") для блока готовых шагов ("+Узел.Наименование+") указано, а путь к библиотеке нет!");
			КонецЕсли;
			Если ЗначениеЗаполнено(Узел.Library) и НЕ Найти(ПутьБлокШагов,Объект.ПутьККаталогуБиблиотекиСценариев) и ЗначениеЗаполнено(Объект.ПутьККаталогуБиблиотекиСценариев) Тогда
				Сообщить("Путь ("+ПутьБлокШагов+") блока готовых шагов ("+Узел.Наименование+") находится вне библиотеки каталога готовых шагов ("+Объект.ПутьККаталогуБиблиотекиСценариев+")!");
			КонецЕсли;
			// срежем
			Если ЗначениеЗаполнено(Узел.Library) и ЗначениеЗаполнено(Объект.ПутьККаталогуБиблиотекиСценариев) Тогда
				ПутьБлокШагов = СтрЗаменить(ПутьБлокШагов,Объект.ПутьККаталогуБиблиотекиСценариев,"");
				Если Лев(ПутьБлокШагов,1)<>"\" И Лев(ПутьБлокШагов,1)<>"/" Тогда
					ПутьБлокШагов = "\"+ПутьБлокШагов;
				КонецЕсли;
				Если Лев(ПутьБлокШагов,2)="\\" Тогда
					ПутьБлокШагов = Прав(ПутьБлокШагов,СтрДлина(ПутьБлокШагов)-1);
				КонецЕсли;
				Если Лев(ПутьБлокШагов,2)="//" Тогда
					ПутьБлокШагов = Прав(ПутьБлокШагов,СтрДлина(ПутьБлокШагов)-1);
				КонецЕсли;
			КонецЕсли;
			НоваяЗаписьXML.ЗаписатьТекст(ПутьБлокШагов);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 			
			// ИмяПараметра
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ИмяПараметра");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.ИмяПараметра);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			// ИмяПараметра2
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ИмяПараметра2");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.ИмяПараметра2);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			// УсловиеСравнения
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("УсловиеСравнения");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.УсловиеСравнения);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			// Severity
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Severity");
			НоваяЗаписьXML.ЗаписатьТекст(Узел.Severity);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			// ЗначениеПараметра
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ЗначениеПараметра");
			ТипЭлемента = "Строка";
			Если ТипЗнч(Узел.ЗначениеПараметра)=Тип("Число") Тогда
				ТипЭлемента = "Число";
			ИначеЕсли ТипЗнч(Узел.ЗначениеПараметра)=Тип("Булево") Тогда
				ТипЭлемента = "Булево";
			ИначеЕсли ТипЗнч(Узел.ЗначениеПараметра)=Тип("Дата") Тогда
				ТипЭлемента = "Дата";
			КонецЕсли;
			НоваяЗаписьXML.ЗаписатьАтрибут("Тип",ТипЭлемента);
			// в зависимости от типа
			Если ТипЗнч(Узел.ЗначениеПараметра)=Тип("Строка") Тогда
				НоваяЗаписьXML.ЗаписатьТекст(Узел.ЗначениеПараметра);
			ИначеЕсли ТипЗнч(Узел.ЗначениеПараметра)=Тип("Число") Тогда
				НоваяЗаписьXML.ЗаписатьТекст(СтрЗаменить(Строка(Узел.ЗначениеПараметра),Символы.НПП,""));
			ИначеЕсли ТипЗнч(Узел.ЗначениеПараметра)=Тип("Булево") Тогда
				НоваяЗаписьXML.ЗаписатьТекст(?(Узел.ЗначениеПараметра=Истина,"true","false"));
			ИначеЕсли ТипЗнч(Узел.ЗначениеПараметра)=Тип("Дата") Тогда
				НоваяЗаписьXML.ЗаписатьТекст(Формат(Узел.ЗначениеПараметра,"ДФ=yyyyMMddHHmmss"));
			Иначе
				НоваяЗаписьXML.ЗаписатьТекст(Строка(Узел.ЗначениеПараметра));
			КонецЕсли;

			НоваяЗаписьXML.ЗаписатьКонецЭлемента();			
			
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();  // конец свойств
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();  // конец шага
			
		КонецЦикла;
		
		НоваяЗаписьXML.ЗаписатьКонецЭлемента();
		
		НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ПараметрыСценария");
		НоваяЗаписьXML.ЗаписатьАтрибут("КоличествоПараметров",Строка(ПараметрыСценария.Количество()));
		
		Для каждого стр из ПараметрыСценария Цикл
			
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Параметр");
			
			// Имя
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Имя");
			НоваяЗаписьXML.ЗаписатьТекст(стр.Имя);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			
			// ТипДанных
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ТипДанных");
			НоваяЗаписьXML.ЗаписатьТекст(стр.ТипДанных);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			
			// Значение
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Значение");
			Если ТипЗнч(стр.Значение)=Тип("Строка") Тогда
				НоваяЗаписьXML.ЗаписатьТекст(стр.Значение);
			ИначеЕсли ТипЗнч(стр.Значение)=Тип("Число") Тогда
				НоваяЗаписьXML.ЗаписатьТекст(СтрЗаменить(Строка(стр.Значение),Символы.НПП,""));
			ИначеЕсли ТипЗнч(стр.Значение)=Тип("Булево") Тогда
				НоваяЗаписьXML.ЗаписатьТекст(?(стр.Значение=Истина,"true","false"));
			ИначеЕсли ТипЗнч(стр.Значение)=Тип("Дата") Тогда
				НоваяЗаписьXML.ЗаписатьТекст(Формат(стр.Значение,"ДФ=yyyyMMddHHmmss"));
			Иначе
				НоваяЗаписьXML.ЗаписатьТекст(Строка(стр.Значение));
			КонецЕсли;
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			
			// Функция
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("Функция");
			НоваяЗаписьXML.ЗаписатьТекст(стр.Функция);
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			
			// КлиентСервер
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("КлиентСервер");
			НоваяЗаписьXML.ЗаписатьТекст(?(стр.КлиентСервер=Истина,"true","false"));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			
			// ЗатиратьРодительскиеЗначения
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ЗатиратьРодительскиеЗначения");
			НоваяЗаписьXML.ЗаписатьТекст(?(стр.ЗатиратьРодительскиеЗначения=Истина,"true","false"));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			
			// ИзПодчиненных
			НоваяЗаписьXML.ЗаписатьНачалоЭлемента("ИзПодчиненных");
			НоваяЗаписьXML.ЗаписатьТекст(?(стр.ИзПодчиненных=Истина,"true","false"));
			НоваяЗаписьXML.ЗаписатьКонецЭлемента(); 
			
			НоваяЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЦикла;
		
		НоваяЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Конец основного тега
		НоваяЗаписьXML.ЗаписатьКонецЭлемента();         
		XMLСтрока = НоваяЗаписьXML.Закрыть();
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Сообщить(ТекстОшибки);
		СообщитьОбОшибке("мСценСкрипт_ПройтисьПоДереву",ТекстОшибки);
	КонецПопытки;
	
	Возврат XMLСтрока;
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьСценарийФорматXML(Знач ПутьКфайлу="",Знач ЗагрузкаБлока=Ложь, ОписаниеОшибки="")  Экспорт
	
	
	ТаблицаСценария.Очистить();
	Если ЗагрузкаБлока=Ложь Тогда
		ПараметрыСценария.Очистить();
	КонецЕсли;
	
	// загружаем сценарий
	Если ЗагрузитьСценарийИлиБлокФорматXML(ПутьКфайлу,ЗагрузкаБлока)=Ложь Тогда
		ТекстОшибки = "Не удалось загрузить сценарий по адресу ("+ПутьКфайлу+")!";
		ОписаниеОшибки = ОписаниеОшибки+ТекстОшибки+Символы.ПС;
		Сообщить(ТекстОшибки);
		СообщитьОбОшибке("мСценСкрипт_ПройтисьПоДереву",ТекстОшибки);
		Если ЗагрузкаБлока=Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// проходим и загружаем блоки внутри сценария
	ОбработанныеГБШ = новый Соответствие;
	ЗавершитьЗагрузкуБлоков = Ложь;
	ш=0;
	
	Пока ЗавершитьЗагрузкуБлоков=Ложь и ш<100 Цикл
		ш = ш +1; // защита от рекурсии
		
		МассивДляОбработкиГБШ = новый Массив; 		
		
		Для каждого стр из ТаблицаСценария Цикл
			Если стр.Свойства.Действие="ГотовыйБлокШагов" Тогда
				Обработан = ОбработанныеГБШ.Получить(стр);
				Если Обработан=Неопределено Тогда
					ОбработанныеГБШ.Вставить(стр,Истина);
					МассивДляОбработкиГБШ.Добавить(стр);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого блок из МассивДляОбработкиГБШ Цикл
			ПутьБлокШагов = блок.Свойства.ПутьБлокШагов;
			Если Найти(ПутьКфайлу,ПутьБлокШагов) Тогда
				Сообщить("Вызов корневого сценария в рекурсии! Исправьте сценарий! ("+ПутьБлокШагов+")");
				Продолжить;
			КонецЕсли;
			// сообщим об ошибках
			Если блок.Свойства.Свойство("Library") Тогда
				Если ЗначениеЗаполнено(блок.Свойства.Library) И НЕ ЗначениеЗаполнено(Объект.ПутьККаталогуБиблиотекиСценариев) Тогда
					Сообщить("При загрузке блока готовых шагов ("+блок.Свойства.Наименование+") используетя библиотека ("+блок.Свойства.Library+"), но путь в настройках редактора не указан!");
				КонецЕсли;
				// изменим путь
				Если ЗначениеЗаполнено(блок.Свойства.Library) Тогда
					ПутьБлокШагов = Объект.ПутьККаталогуБиблиотекиСценариев+ПутьБлокШагов;
				КонецЕсли;
			КонецЕсли;
			// загрузим блок
			Если ЗагрузитьСценарийИлиБлокФорматXML(ПутьБлокШагов,Истина,блок.UID,блок.FUID)=Ложь Тогда
				ОписаниеОшибки = ОписаниеОшибки+Символы.ПС+"Не удалось загрузить блок шагов ("+блок.Свойства.Наименование+") по адресу ("+ПутьБлокШагов+")!";
				Сообщить("Не удалось загрузить блок шагов ("+блок.Свойства.Наименование+") по адресу ("+ПутьБлокШагов+")!");
				
			Иначе
				блок.Свойства.ПутьБлокШагов = ПутьБлокШагов;	
			КонецЕсли;
		КонецЦикла; 
		
		ЗавершитьЗагрузкуБлоков = МассивДляОбработкиГБШ.Количество()=0;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьФайлПоИнтернетАдресу(Знач ПолныйАдресРесурса)
	
	ПутьКФайлу = "";
	
	СтруктураURI = СтруктураURI(ПолныйАдресРесурса); 
	
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт);
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере);
	ПутьКФайлу = ПолучитьИмяВременногоФайла();
	
	Попытка
		Результат =  HTTPСоединение.Получить(HTTPЗапрос,ПутьКФайлу);
	Исключение
		// исключение здесь говорит о том, что запрос не дошел до HTTP-Сервера
		ТекстОшибки = "Произошла сетевая ошибка!"+Символы.ПС+ОписаниеОшибки();
		Сообщить(ТекстОшибки);
		СообщитьОбОшибке("мСценСкрипт_ПройтисьПоДереву",ТекстОшибки);
		Возврат ПутьКФайлу;
	КонецПопытки;	
	
	// Анализируем фатальные ошибки
	// В большинстве случаев нужно остановить работу и показать пользователю сообщение об ошибке,
	// включив в него HTTP-статус
	
	// Ошибки 4XX говорят о неправильном запросе - в широком смысле
	// Может быть неправильный адрес, ошибка аутентификации, плохой формат запроса
	// Подробнее смотри http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4
	Если Результат.КодСостояния >= 400 и Результат.КодСостояния < 500  Тогда
		Сообщить("Код статуса больше 4XX, ошибка запроса.  Код статуса: " + Результат.КодСостояния);
	КонецЕсли;
	
	// Ошибки 5XX говорят о проблемах на сервере (возможно, прокси-сервер)
	// Это может быть программная ошибка, нехватка памяти, ошибка конфигурации и т.д.
	// Подробнее смотри http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.5
	Если Результат.КодСостояния >= 500 и Результат.КодСостояния < 600  Тогда
		Сообщить("Код статуса больше 5XX, ошибка сервера. Код статуса: " + Результат.КодСостояния);
	КонецЕсли;
	
	// Обрабатываем перенаправление
	Если Результат.КодСостояния >= 300 и Результат.КодСостояния < 400  Тогда
		Сообщить("Код статуса больше 3XX, Перенаправление. Код статуса: " + Результат.КодСостояния);
		Если Результат.КодСостояния = 302 Тогда
			Сообщить("Код статуса 302, Постоянное перенаправление.");
			АдресРесурса = Результат.Заголовки.Получить("Location");
			Если АдресРесурса <> Неопределено Тогда
				Сообщить("Выполняю запрос по новому адресу " + АдресРесурса);
				ПутьКФайлу = ЗагрузитьФайлПоИнтернетАдресу(АдресРесурса);
			Иначе
				Сообщить("Сервер не сообщил адрес ресурса!");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Статусы 1XX и 2XX считаем хорошими
	Если Результат.КодСостояния < 300 Тогда 
	КонецЕсли; 	
	
	Возврат ПутьКФайлу;
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьСценарийИлиБлокФорматXML(Знач ПутьКфайлу="",Знач ЗагрузкаБлока=Ложь,UIDКорня="00000000-0000-0000-0000-000000000000",BFUIDКорня="00000000-0000-0000-0000-000000000000")  Экспорт
	
	ЗагрузкаПоИнтернетАдресу = Ложь;
	
	// если это веб адрес, тогда загрузим с веб файла и сохраним во временный каталог
	Если Найти(ПутьКфайлу,"http:") ИЛИ Найти(ПутьКфайлу,"https:") Тогда
		
		ПутьКфайлу = ЗагрузитьФайлПоИнтернетАдресу(ПутьКфайлу);
		ЗагрузкаПоИнтернетАдресу = Истина;
		
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ИгнорироватьПробелы = Ложь;
	
	Если ПутьКфайлу="" Тогда
		ПутьКфайлу = Объект.ПутьКФайлуСценария;
	КонецЕсли;
	
	Попытка
		ЧтениеXML.ОткрытьФайл(сокрЛП(ПутьКфайлу));
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	
	Шаг = Неопределено;
	ШагСвойства = Неопределено; 
	Параметр = Неопределено;
	МассивНовыхСтрок = новый Массив;
	МассивНовыхПараметров = новый Массив;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя = "Скрипт" Тогда			
			Если ЗагрузкаБлока=Ложь Тогда
				ВерсияФайлаСценария = ЧтениеXML.ПолучитьАтрибут("Версия");
				// описание сценария
				Объект.Наименование = ЧтениеXML.ПолучитьАтрибут("Наименование");
				Объект.Автор = ЧтениеXML.ПолучитьАтрибут("Автор");
				Объект.АдресИнтернет = ЧтениеXML.ПолучитьАтрибут("АдресИнтернет");
				Если ВерсияФайлаСценария>="2.2" Тогда
					 //TODO: конфлик порта пришедшего по команде и из файла
					 //Объект.НомерПорта = Число(ЧтениеXML.ПолучитьАтрибут("DefaultPort"));
					 Объект.Браузер = ЧтениеXML.ПолучитьАтрибут("DefaultBrowser");
					 Объект.ИспользуемыйAPI = ЧтениеXML.ПолучитьАтрибут("DefaultAPI");
					 Объект.ИдентификаторТеста = ЧтениеXML.ПолучитьАтрибут("ИдентификаторТеста");
					 Объект.Severity = ЧтениеXML.ПолучитьАтрибут("Severity");
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЧтениеXML.Имя = "ТаблицаШагов" Тогда
		ИначеЕсли ЧтениеXML.Имя = "Шаг" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			Шаг = ТаблицаСценария.Добавить();
			МассивНовыхСтрок.Добавить(Шаг);
			ШагСвойства = Новый Структура;
			Шаг.UID = ЧтениеXML.ПолучитьАтрибут("UID");
			Шаг.PUID = ЧтениеXML.ПолучитьАтрибут("PUID");
			Шаг.FUID = ЧтениеXML.ПолучитьАтрибут("UID");
			Шаг.BFUID = BFUIDКорня;
			Если ЗагрузкаБлока=Истина Тогда
				Если Шаг.PUID = "00000000-0000-0000-0000-000000000000" Тогда
					Шаг.PUID = UIDКорня;
				КонецЕсли;
			КонецЕсли;
			Шаг.Свойства = ШагСвойства;
		ИначеЕсли ЧтениеXML.Имя = "Свойства" Тогда
			// прочтем свойства
			ЗагрузитьСценарийФорматXMLСвойстваШага(ЧтениеXML,ШагСвойства);
		ИначеЕсли ЧтениеXML.Имя = "Параметр" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			Параметр = ПараметрыСценария.Добавить();
			МассивНовыхПараметров.Добавить(Параметр);
			ЗагрузитьСценарийФорматXMLПараметр(ЧтениеXML,Параметр);
		ИначеЕсли ЧтениеXML.Имя = "ПараметрыСценария" Тогда
		КонецЕсли;
		          
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	// удалим если скачивали по веб
	Если ЗагрузкаПоИнтернетАдресу=Истина Тогда
		Попытка
			УдалитьФайлы(ПутьКфайлу);
		Исключение
			Сообщить("Не удалось удалить временный файл из интернета."+Символы.ПС+ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	// для блока перегенерим гуиды, кроме корня
	Если ЗагрузкаБлока=Истина Тогда
		СоответсвиеНовыхUIDРодителей = новый Соответствие;
		Для каждого стр из МассивНовыхСтрок Цикл
			НовыйUID = строка(новый УникальныйИдентификатор);
			СоответсвиеНовыхUIDРодителей.Вставить(стр.UID,НовыйUID);
			стр.UID = НовыйUID;
		КонецЦикла;
		Для каждого стр из МассивНовыхСтрок Цикл
			НовыйUID = СоответсвиеНовыхUIDРодителей.Получить(стр.PUID);
			Если НовыйUID<>Неопределено Тогда
				стр.PUID = НовыйUID;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// TO DO: удалим дубли параметров
	// по умолчанию останутся парметры, только самого верхнего сценария
	// по факту, парметры блоков загружать не нужно, они должны быть добавлены в верхний сценарий
	// но при создании нового сценария, чтобы не добавлять руками  удалим
	МассивПараметровКУдалению = новый Массив;
	Для каждого стр из МассивНовыхПараметров Цикл
		Если ЗагрузкаБлока=Истина Тогда 
			стр.ИзПодчиненных=Истина;
		КонецЕсли;
		Для каждого параметр из ПараметрыСценария Цикл
			Если стр=параметр Тогда
				Продолжить;
			КонецЕсли;
			// перетрем родительский
			Если стр.Имя=параметр.Имя И стр.ЗатиратьРодительскиеЗначения=Истина Тогда
				ЗаполнитьЗначенияСвойств(параметр,стр,,"ЗатиратьРодительскиеЗначения");
			КонецЕсли;			
			Если стр.Имя=параметр.Имя Тогда
				МассивПараметровКУдалению.Добавить(стр);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого стр из МассивПараметровКУдалению Цикл
		Попытка
			ПараметрыСценария.Удалить(стр);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьСценарийФорматXMLСвойстваШага(ЧтениеXML,ШагСвойства)
	
	Пока ЧтениеXML.Прочитать() Цикл
		ИмяТега = ЧтениеXML.Имя;
		Если ИмяТега = "Свойства" И ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
			Возврат;
		ИначеЕсли Найти("Активность ПродолжитьПриОшибке ЭтоГлавноеОкно ЭтоБлок SwitchSelection Cancel ИспользоватьВариантыПоиска ОдинУровеньВниз",ИмяТега) 
			И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			ШагСвойства.Вставить(ИмяТега,?(ЧтениеXML.Значение="true",Истина,Ложь));
		ИначеЕсли Найти("Наименование Описание Library ПутьБлокШагов ИмяПараметра ИмяПараметра2 Area УсловиеСравнения
			| ТипОбъекта ЗаголовокОбъекта ИмяПеременной Действие ИмяОбъекта Команда Severity
			| OutputText CommandRef Presentation Direction RowDescription ПредставлениеДанных СвойстваПодключенияКлиентаТестирования 
			| ClickY ClickX xPath ИмяКлассаОбъекта ИдентификаторОбъекта Attribute API",ИмяТега)					
			И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			ШагСвойства.Вставить(ИмяТега,(ЧтениеXML.Значение));
		ИначеЕсли Найти("CustomCodeClient CustomCodeServer",ИмяТега) 
			И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			ШагСвойства.Вставить(ИмяТега,СокрЛП((ЧтениеXML.Значение)));
		ИначеЕсли Найти("ДанныеКартинки Интервал",ИмяТега) 
			И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			ШагСвойства.Вставить(ИмяТега,Число(ЧтениеXML.Значение));
		ИначеЕсли Найти("ЗначениеПараметра",ИмяТега) 
			И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ТипЭлемента = ЧтениеXML.ПолучитьАтрибут("Тип");
			ЧтениеXML.Прочитать();
			Если ТипЭлемента="Строка" Тогда
				ШагСвойства.Вставить(ИмяТега,(ЧтениеXML.Значение));
			ИначеЕсли ТипЭлемента="Число" Тогда
				ШагСвойства.Вставить(ИмяТега,Число(ЧтениеXML.Значение));
			ИначеЕсли ТипЭлемента="Булево" Тогда
				ШагСвойства.Вставить(ИмяТега,?(ЧтениеXML.Значение="true",Истина,Ложь));
			ИначеЕсли ТипЭлемента="Дата" Тогда				
				Попытка
					ШагСвойства.Вставить(ИмяТега,Дата(ЧтениеXML.Значение));
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			Иначе
				ШагСвойства.Вставить(ИмяТега,Строка(ЧтениеXML.Значение));
			КонецЕсли;				
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСценарийФорматXMLПараметр(ЧтениеXML,Параметр)
	
	Пока ЧтениеXML.Прочитать() Цикл
		ИмяТега = ЧтениеXML.Имя;
		Если ИмяТега = "Параметр" И ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
			Возврат;
		ИначеЕсли Найти("ЗатиратьРодительскиеЗначения",ИмяТега)
			И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			Параметр[ИмяТега] = ?(ЧтениеXML.Значение="true",Истина,Ложь);
		ИначеЕсли Найти("ИзПодчиненных",ИмяТега)
			И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			Параметр[ИмяТега] = ?(ЧтениеXML.Значение="true",Истина,Ложь);			
		ИначеЕсли Найти("КлиентСервер",ИмяТега) 
			И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			Параметр[ИмяТега] = ?(ЧтениеXML.Значение="true",Истина,Ложь);
		ИначеЕсли Найти("Имя ТипДанных",ИмяТега) 
			И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			Параметр[ИмяТега] = (ЧтениеXML.Значение);
		ИначеЕсли Найти("Значение",ИмяТега) 
			И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЧтениеXML.Прочитать();
			Если Параметр.ТипДанных="Строка" Тогда
				Параметр[ИмяТега] = (ЧтениеXML.Значение);
			ИначеЕсли Параметр.ТипДанных="Булево" Тогда
				Параметр[ИмяТега] = ?(ЧтениеXML.Значение="true",Истина,Ложь);
			ИначеЕсли Параметр.ТипДанных="Число" Тогда
				Попытка
					Параметр[ИмяТега] = Число(ЧтениеXML.Значение);
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			ИначеЕсли Параметр.ТипДанных="Дата" Тогда
				Попытка
					Параметр[ИмяТега] = Дата(ЧтениеXML.Значение);
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			Иначе
				Параметр[ИмяТега] = Строка(ЧтениеXML.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ПутьКФайлуСценарияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие); 
	Диалог.Заголовок = "Выберите файл"; 
	Если ЗначениеЗаполнено(Объект.ПутьКФайлуСценария) Тогда
		Диалог.Каталог = ПолучитьКаталогПоПутиФайла(Объект.ПутьКФайлуСценария);
	КонецЕсли;
	Диалог.ПолноеИмяФайла = ""; 
	Фильтр = "XML-файл (*.xml)|*.xml"; 
	Диалог.Фильтр = Фильтр; 
	Диалог.МножественныйВыбор = Ложь; 
	ВыборФайлаОткрытияФайла = новый ОписаниеОповещения("ВыборФайлаОткрытияФайла",ЭтотОбъект,новый Структура("ИмяРеквизита","ПутьКФайлуСценария"));
	Диалог.Показать(ВыборФайлаОткрытияФайла);

КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие); 
	Диалог.Заголовок = "Выберите файл данных"; 
	Если ЗначениеЗаполнено(Объект.ПутьКФайлуДанных) Тогда
		Диалог.Каталог = ПолучитьКаталогПоПутиФайла(Объект.ПутьКФайлуДанных);
	КонецЕсли;
	Диалог.ПолноеИмяФайла = ""; 
	Фильтр = "MXL-файл (*.mxl)|*.mxl"; 
	Диалог.Фильтр = Фильтр; 
	Диалог.МножественныйВыбор = Ложь; 
	ВыборФайлаОткрытияФайла = новый ОписаниеОповещения("ВыборФайлаОткрытияФайла",ЭтотОбъект,новый Структура("ИмяРеквизита","ПутьКФайлуДанных"));
	Диалог.Показать(ВыборФайлаОткрытияФайла);

КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаОткрытияФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	 Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() > 0 Тогда
		Объект[ДополнительныеПараметры.ИмяРеквизита] = ВыбранныеФайлы[0]; 
	КонецЕсли; 
	
КонецПроцедуры



&НаКлиенте
Функция  ПолучитьКаталогПоПутиФайла(Знач ПутьКФайлу)
	Файл = новый Файл(ПутьКФайлу);
	Возврат Файл.Путь;	
КонецФункции

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Объект.ИдентификаторТеста) Тогда
		Объект.ИдентификаторТеста = СформироватьАвтоматическиИдентификаторТеста(Объект.Наименование);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция СформироватьАвтоматическиИдентификаторТеста(Знач Наименование)
	Ключ = Наименование;
	Ключ = СтрЗаменить(Ключ," ","_");
	Возврат Ключ;
КонецФункции

#КонецОбласти


#Область НастройкиРедактора

#Область ИзменениеСобытийЭлементов

&НаКлиенте
Процедура РежимРедактированияПриИзменении(Элемент)
	мСценРедактор_ОбновитьОтображениеРедактированияСценария(РежимРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьТаблицуКомандПоAPI()

	// ********************************
	// ДОСТУПНЫЕ КОМАНДЫ
	
	ДоступныеКомандыМассив = новый Массив;
	
	Если Объект.ИспользуемыйAPI="" ИЛИ Объект.ИспользуемыйAPI="1cClientApp" Тогда
		ДоступныеКомандыМассив = мСценРедактор_ПолучитьМассивСтруктурДоступныхКоманд();
	ИначеЕсли Объект.ИспользуемыйAPI="AutomationUI" Тогда
		ДоступныеКомандыМассив = мСценРедактор_ПолучитьМассивСтруктурДоступныхКомандAutomationUI();
	ИначеЕсли Объект.ИспользуемыйAPI="Selenium" Тогда
		ДоступныеКомандыМассив = мСценРедактор_ПолучитьМассивСтруктурДоступныхКомандSelenium();
	КонецЕсли;
	
	
	
	
	// ********************************
	// ПАНЕЛЬ ИНСТРУМЕНТОВ
	
	ТаблицаКоманды.Очистить();
	Для каждого стр из ДоступныеКомандыМассив Цикл  
		ЗаполнитьЗначенияСвойств(ТаблицаКоманды.Добавить(),стр);
	КонецЦикла;

КонецПроцедуры	


&НаКлиенте
Процедура ПерезаполнитьТаблицуТиповПоAPI()

	// ********************************
	// ДОСТУПНЫЕ ТИПЫ
	
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив = новый Массив;
	
	
	Если Объект.ИспользуемыйAPI="" ИЛИ Объект.ИспользуемыйAPI="1cClientApp" Тогда
		ДоступныеЭлементыТестируемогоИнтерфейсаМассив = мСценРедактор_ПолучитьМассивСтруктурДоступныхТиповОбъектовТестируемогоПриложения();
	ИначеЕсли Объект.ИспользуемыйAPI="AutomationUI" Тогда
		ДоступныеЭлементыТестируемогоИнтерфейсаМассив = мСценРедактор_ПолучитьМассивСтруктурТиповОбъектовТестируемогоПриложенияAutomationUI();
	ИначеЕсли Объект.ИспользуемыйAPI="Selenium" Тогда
		ДоступныеЭлементыТестируемогоИнтерфейсаМассив = мСценРедактор_ПолучитьМассивСтруктурТиповОбъектовТестируемогоПриложенияSelenium();
	КонецЕсли;
	
	
	
	
	// ********************************
	// ПАНЕЛЬ ИНСТРУМЕНТОВ
	
	ТаблицаОбъектыИнтерфейса.Очистить();
	Для каждого стр из ДоступныеЭлементыТестируемогоИнтерфейсаМассив Цикл  
		ЗаполнитьЗначенияСвойств(ТаблицаОбъектыИнтерфейса.Добавить(),стр);
	КонецЦикла;

КонецПроцедуры			


&НаКлиенте
Процедура ТаблицаДействияПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ТаблицаДействия.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Действие = "Команда" Тогда
		Элементы.ТаблицаКоманды.Видимость = Истина;
		// Перезаполним таблицу команд по API
		ПерезаполнитьТаблицуКомандПоAPI();
	Иначе
		Элементы.ТаблицаКоманды.Видимость = Ложь;
	КонецЕсли;
	
	Если ТекущиеДанные.Действие = "НайтиОбъект" Тогда
		Элементы.ТаблицаОбъектыИнтерфейса.Видимость = Истина;
		// Перезаполним таблицу типов
		ПерезаполнитьТаблицуТиповПоAPI();
	Иначе
		Элементы.ТаблицаОбъектыИнтерфейса.Видимость = Ложь;
	КонецЕсли;

	Если ТекущиеДанные.Действие = "ГотовыйБлокШагов" Тогда
		Элементы.ДеревоДоступныеГотовыеШаги.Видимость = Истина;
	Иначе
		Элементы.ДеревоДоступныеГотовыеШаги.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСвойстваПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ТаблицаСвойства.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;	
	КонецЕсли; 
	
	Попытка
		Элементы.ТаблицаСвойстваЗначение.ВыбиратьТип = Ложь;
	Исключение
	КонецПопытки;	
	
	Попытка
		Элементы.ТаблицаСвойстваЗначение.КнопкаОчистки = Ложь;
	Исключение
	КонецПопытки;	
	
	Если Элементы.ТаблицаСвойстваЗначение.Вид = ВидПоляФормы.ПолеВвода Тогда
		Если ТекущиеДанные.Свойство="Действие" ИЛИ ТекущиеДанные.Свойство="Команда" ИЛИ ТекущиеДанные.Свойство="ТипОбъекта" 
			ИЛИ ТекущиеДанные.Свойство="Severity" ИЛИ ТекущиеДанные.Свойство="API" Тогда
			Элементы.ТаблицаСвойстваЗначение.КнопкаВыпадающегоСписка = Истина;
		Иначе
			Элементы.ТаблицаСвойстваЗначение.КнопкаВыпадающегоСписка = Ложь;
		КонецЕсли;
		Если ТекущиеДанные.Свойство="CustomCodeClient" ИЛИ ТекущиеДанные.Свойство="CustomCodeServer"  
			ИЛИ ТекущиеДанные.Свойство="СвойстваПодключенияКлиентаТестирования" ИЛИ ТекущиеДанные.Свойство="RowDescription" 
			ИЛИ ТекущиеДанные.Свойство="ПутьБлокШагов" 
			ИЛИ ТекущиеДанные.Свойство="Library" Тогда
			Элементы.ТаблицаСвойстваЗначение.КнопкаВыбора = Истина;
			мСценРедактор_УстановитьДействие("ТаблицаСвойстваЗначение","НачалоВыбора","мСценРедактор_ВнешняяФормаВыбора");
		ИначеЕсли ТекущиеДанные.Свойство="УсловиеСравнения" Тогда
			Элементы.ТаблицаСвойстваЗначение.КнопкаВыбора = Истина;
			мСценРедактор_УстановитьДействие("ТаблицаСвойстваЗначение","НачалоВыбора","мСценРедактор_ВнешняяФормаВыбора");
		ИначеЕсли ТекущиеДанные.Свойство="ИмяПараметра"
			ИЛИ ТекущиеДанные.Свойство="ИмяПараметра1"
			ИЛИ ТекущиеДанные.Свойство="ИмяПараметра2" Тогда
			Элементы.ТаблицаСвойстваЗначение.КнопкаВыбора = Истина;
			мСценРедактор_УстановитьДействие("ТаблицаСвойстваЗначение","НачалоВыбора","мСценРедактор_ВнешняяФормаВыбора");
		ИначеЕсли ТекущиеДанные.Свойство="ИмяПеременной" Тогда
			//Элементы.ТаблицаСвойстваЗначение.КнопкаВыбора = Истина;
			мСценРедактор_УстановитьДействие("ТаблицаСвойстваЗначение","НачалоВыбора","мСценРедактор_ВнешняяФормаВыбора");
		ИначеЕсли ТекущиеДанные.Свойство="ЗначениеПараметра" Тогда
			Элементы.ТаблицаСвойстваЗначение.КнопкаВыбора = Истина;
			Элементы.ТаблицаСвойстваЗначение.ВыбиратьТип = Истина;
			Элементы.ТаблицаСвойстваЗначение.КнопкаОчистки = Истина;
			мСценРедактор_УстановитьДействие("ТаблицаСвойстваЗначение","НачалоВыбора","");
		Иначе
			Если НЕ Элементы.ТаблицаСвойстваЗначение.КнопкаВыбора=Ложь Тогда
				Элементы.ТаблицаСвойстваЗначение.КнопкаВыбора = Ложь;
				мСценРедактор_УстановитьДействие("ТаблицаСвойстваЗначение","НачалоВыбора","");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;   
	
	мСценРедактор_ИзменитьСписокВыбораПриИзмененииСтроки(Элементы.ТаблицаСвойстваЗначение,ТекущиеДанные.Свойство);
КонецПроцедуры

&НаКлиенте
Процедура мСценРедактор_ВнешняяФормаВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мПараметры = новый Структура("Действие,Команда,ИмяТаблицы",
	Элементы.ДеревоСценария.ТекущиеДанные.Действие,Элементы.ДеревоСценария.ТекущиеДанные.Команда,"ТаблицаСвойства");
	
	// для выбора параметров сценария передадим массив
	Попытка
		Если Элемент.Родитель.ТекущиеДанные.Свойство="ИмяПараметра" 
			ИЛИ Элемент.Родитель.ТекущиеДанные.Свойство="ИмяПараметра1"
			ИЛИ Элемент.Родитель.ТекущиеДанные.Свойство="ИмяПараметра2" Тогда
			МассивСтруктурПараметров = новый Массив;
			Для каждого стр из ПараметрыСценария Цикл
				стр_н = новый Структура("Имя,ТипДанных");
				ЗаполнитьЗначенияСвойств(стр_н,стр);
				МассивСтруктурПараметров.Добавить(стр_н);
			КонецЦикла;
			мПараметры.Вставить("МассивСтруктурПараметров",МассивСтруктурПараметров);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Попытка
		Если Элементы.ДеревоСценария.ТекущиеДанные.Действие="ГотовыйБлокШагов" Тогда
			Для каждого стр из ТаблицаСвойства Цикл
				Если стр.Свойство="ПутьБлокШагов" ИЛИ стр.Свойство="Library" Тогда
					мПараметры.Вставить(стр.Свойство,стр.Значение);	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	мПараметры.Вставить("Свойство",Элементы.ТаблицаСвойства.ТекущиеДанные.Свойство);
	мПараметры.Вставить(Элементы.ТаблицаСвойства.ТекущиеДанные.Свойство,Элементы.ТаблицаСвойства.ТекущиеДанные.Значение);
	Форма = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Форма_ВнешнееРедактированиеСвойств",мПараметры);
	Форма.Открыть();
	
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаСвойстваПриИзменении(Элемент)
	СохранитьИзменениеВТаблицуИзменений(МассивИзменений,"Изменение свойства узла");
	мСценрРедактор_ПередатьИзмененияТаблицыСвойствВДеревоСценария();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСценарияПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ДеревоСценария.ТекущиеДанные;
	
	мСценРедактор_ИзменитьВидимостьДоступностьТаблицыСвойств(ТекущиеДанные);
	
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// нельзя редактировать состав блока, но сам блок можно
	Если ТекущиеДанные.ЭтоБлок=Истина И ТекущиеДанные.Действие<>"ГотовыйБлокШагов" Тогда
		//Элементы.ТаблицаСвойства.ТолькоПросмотр = Истина;
		Элементы.ТаблицаСвойстваЗначение.ТолькоПросмотр = Истина;
	Иначе
		//Элементы.ТаблицаСвойства.ТолькоПросмотр = Ложь;
		Элементы.ТаблицаСвойстваЗначение.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если UIDШага=ТекущиеДанные.UID Тогда
		Возврат;
	КонецЕсли;
	
	UIDШага = ТекущиеДанные.UID;
	
	ТипДействия = ТекущиеДанные.Действие;
	
	мСценРедактор_ИзменениеТаблицыСвойств(ТекущиеДанные);
	мСценРедактор_ИзменитьПодсказкуTips(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоСценарияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока=Истина Тогда
		мСценРедактор_ДеревоСценарияПриНачалеРедактированияФрагмент(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСценарияПередНачаломИзменения(Элемент, Отказ)
	Если НЕ Отказ Тогда
		СохранитьИзменениеВТаблицуИзменений(МассивИзменений,"Изменение элемента");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСценарияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекущиеДанные = Элемент.ТекущиеДанные;
		
	Если ТекущиеДанные<>Неопределено Тогда
		Если ТекущиеДанные.ЭтоБлок=Истина Тогда
			Отказ = Истина;
			Сообщить("В блок готовых шагов нельзя добавлять новые шаги. Изменить возможно сам файл блока или изменив блок на комментарий (в этом случае связь будет потерена).");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		СохранитьИзменениеВТаблицуИзменений(МассивИзменений,"Добавление нового узла");
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДеревоСценарияПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные<>Неопределено Тогда
		// нельзя удалять состав блока, но сам блок можно
		Если ТекущиеДанные.ЭтоБлок=Истина И ТекущиеДанные.Действие<>"ГотовыйБлокШагов" Тогда
			Отказ = Истина;
			Сообщить("Из блока готовых шагов нельзя удалять шаги. Изменить возможно сам файл блока или изменив блок на комментарий (в этом случае связь будет потерена).");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		СохранитьИзменениеВТаблицуИзменений(МассивИзменений,"Удаление узла");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСценарияПриСменеТекущегоРодителя(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСценарияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные<>Неопределено Тогда
		Если ТекущиеДанные.ЭтоБлок=Истина Тогда
			Выполнение = Ложь;
			Сообщить("В блок готовых шагов нельзя добавлять новые шаги. Изменить возможно сам файл блока или изменив блок на комментарий (в этом случае связь будет потерена).");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСценарияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элементы.ДеревоСценария.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мСценРедактор_ИзменениеТаблицыСвойств(ТекущиеДанные);
	
КонецПроцедуры


&НаКлиенте
Процедура ДеревоСценарияПриИзменении(Элемент)
	ТекущийСценарийИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСценарияПослеУдаления(Элемент)
	Если ДеревоСценария.ПолучитьЭлементы().Количество()=0 Тогда
		Элементы.ТаблицаСвойстваЗначение.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ТаблицаСвойстваЗначение.ТолькоПросмотр = Ложь;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="ТаблицаСвойства" Тогда
		Значение = Неопределено;
		Если Параметр.Свойство(Элементы.ТаблицаСвойства.ТекущиеДанные.Свойство) Тогда
			Значение = Параметр[Элементы.ТаблицаСвойства.ТекущиеДанные.Свойство];
		КонецЕсли;	
		Элементы.ТаблицаСвойства.ТекущиеДанные.Значение = Значение;
		мСценрРедактор_ПередатьИзмененияТаблицыСвойствВДеревоСценария();
	ИначеЕсли ИмяСобытия="ПараметрыСценария" Тогда
		Значение = Неопределено;
		Если Параметр.Свойство("СвойстваПодключенияКлиентаТестирования") Тогда
			Значение = Параметр["СвойстваПодключенияКлиентаТестирования"];
		КонецЕсли;	
		Если Элементы.ПараметрыСценария.ТекущиеДанные<>Неопределено Тогда
			Элементы.ПараметрыСценария.ТекущиеДанные.Значение = Значение;
		Иначе
			Сообщить("Возможно произошел сбой при установке параметра!");
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Новый сценарий" Тогда
		
		ЗаполнитьЗначенияСвойств(Объект,Параметр);
		мСценСкрипт_СохранитьСценарий(Неопределено);
		мСценПакет_ЗагрузитьИзКаталогаВПроекты(Неопределено);
		
	ИначеЕсли ИмяСобытия = "Изменить сценарий" Тогда
		
		ЗаполнитьЗначенияСвойств(Объект,Параметр);
		ТекущийСценарийИзменен = Истина;
		
	ИначеЕсли ИмяСобытия="ВыборПроектаПоДереву" Тогда
		
		мПараметры = новый Структура("Наименование,Ключ");
		ЗаполнитьЗначенияСвойств(мПараметры,Параметр);
		мРедакторПроекта_ПереместитьПроектМеждуКаталогами(мПараметры);	
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура мСценРедактор_ОбновитьОтображениеРедактированияСценария(Знач РежимОтображения)
	
	Если РежимОтображения="Таблица" Тогда
		
		Элементы.ПанельСвойств.Видимость = Ложь;
		
		Для каждого стр из Элементы.ДеревоСценария.ПодчиненныеЭлементы Цикл
			
			Если Найти(стр.Имя,"Наименование") ИЛИ Найти(стр.Имя,"Активность") 
				ИЛИ Найти(стр.Имя,"Выполнено") ИЛИ Найти(стр.Имя,"Действие") ИЛИ Найти(стр.Имя,"Команда") Тогда
				Продолжить;
			КонецЕсли;
			
			стр.Видимость = Истина;
			
		КонецЦикла;
		
	Иначе
		
		Элементы.ПанельСвойств.Видимость = Истина;
		
		Для каждого стр из Элементы.ДеревоСценария.ПодчиненныеЭлементы Цикл
			
			Если Найти(стр.Имя,"Наименование") ИЛИ Найти(стр.Имя,"Активность") 
				ИЛИ Найти(стр.Имя,"Выполнено") ИЛИ Найти(стр.Имя,"Действие") ИЛИ Найти(стр.Имя,"Команда") 
				ИЛИ Найти(стр.Имя,"НомерШага") Тогда
				Продолжить;
			КонецЕсли;
			
			стр.Видимость = Ложь;
			
		КонецЦикла;
		
		
	КонецЕсли;
	
КонецПроцедуры

#Область МассивыТаблицРедактора

&НаСервереБезКонтекста
Функция мСценРедактор_ПолучитьМассивСтруктурДоступныхДействий()
	
	ДоступныеДействияМассив = новый Массив;
	
	// Комментарий
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Комментарий");
	стр_н.Вставить("Действие","Комментарий");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// НайтиОсновноеОкно
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Найти основное окно");
	стр_н.Вставить("Действие","НайтиОсновноеОкно");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// НайтиОкно
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Найти окно");
	стр_н.Вставить("Действие","НайтиОкно");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// НайтиФорму
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Найти форму");
	стр_н.Вставить("Действие","НайтиФорму");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// НайтиОбъект
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Найти объект");
	стр_н.Вставить("Действие","НайтиОбъект");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// ПолучитьКомандныйИнтерфейс
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Получить командный интерфейс");
	стр_н.Вставить("Действие","ПолучитьКомандныйИнтерфейс");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// ВыполнитьКоманду
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Команда");
	стр_н.Вставить("Действие","Команда");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// ДилогВыбораФайла
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Дилог выбора файла");
	стр_н.Вставить("Действие","ДилогВыбораФайла");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// ПодключитьТестируемоеПриложение 
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Подключить тестируемое приложение");
	стр_н.Вставить("Действие","ПодключитьТестируемоеПриложение");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// ЗакрытьТестируемоеПриложение
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Закрыть тестируемое приложение");
	стр_н.Вставить("Действие","ЗакрытьТестируемоеПриложение");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// ВыполнитьПроизвольныйКодКлиент
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Код клиент");
	стр_н.Вставить("Действие","ВыполнитьПроизвольныйКодКлиент");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// ВыполнитьПроизвольныйКодСервер
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Код сервер");
	стр_н.Вставить("Действие","ВыполнитьПроизвольныйКодСервер");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// ТестовыйСлучай
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Тестовый случай");
	стр_н.Вставить("Действие","ТестовыйСлучай");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	
	
	// СРАВНЕНИЕ ДАННЫХ
	
	// ПолучитьПредставлениеДанных
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Получить представление данных");
	стр_н.Вставить("Действие","ПолучитьПредставлениеДанных");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// СравнитьСПредставлениемДанных
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Сравнить данные");
	стр_н.Вставить("Действие","СравнитьСПредставлениемДанных");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);

	// ДЕЙСТВИЯ ДЛЯ ОТЛАДКИ
	
	// Пауза
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Пауза");
	стр_н.Вставить("Действие","Пауза");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// Стоп
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Стоп");
	стр_н.Вставить("Действие","Стоп");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	
	// МАКРОШАГИ
	
	// БлокШагов
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Библиотека шагов");
	стр_н.Вставить("Действие","ГотовыйБлокШагов");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	
	// Условие
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Условие");
	стр_н.Вставить("Действие","Условие");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	
	// Таймер
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Таймер");
	стр_н.Вставить("Действие","Таймер");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	
	// ИзПараметра1ВПараметр2
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","параметр1->параметр2");
	стр_н.Вставить("Действие","ИзПараметра1ВПараметр2");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);	
	
	// ПроверкаНаличияЭлемента
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Элемент существует?");
	стр_н.Вставить("Действие","ПроверкаНаличияЭлемента");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);		
	
	// Вызвать исключение
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Вызвать исключение");
	стр_н.Вставить("Действие","ВызватьИсключение");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	
	// Сделать Screenshot
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Сделать Screenshot");
	стр_н.Вставить("Действие","СделатьСнимокОкна");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	
	Возврат ДоступныеДействияМассив;
	
КонецФункции

&НаСервереБезКонтекста
Функция мСценРедактор_ПолучитьМассивСтруктурДоступныхДействийAutomationUI()
	
	ДоступныеДействияМассив = новый Массив;
	
	// Комментарий
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Комментарий");
	стр_н.Вставить("Действие","Комментарий");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// НайтиОсновноеОкно
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Найти основное окно");
	стр_н.Вставить("Действие","НайтиОсновноеОкно");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// НайтиОкно
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Найти окно");
	стр_н.Вставить("Действие","НайтиОкно");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// НайтиОбъект
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Найти объект");
	стр_н.Вставить("Действие","НайтиОбъект");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// ВыполнитьКоманду
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Команда");
	стр_н.Вставить("Действие","Команда");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// ПодключитьТестируемоеПриложение 
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Подключить тестируемое приложение");
	стр_н.Вставить("Действие","ПодключитьТестируемоеПриложение");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// ЗакрытьТестируемоеПриложение
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Закрыть тестируемое приложение");
	стр_н.Вставить("Действие","ЗакрытьТестируемоеПриложение");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// ВыполнитьПроизвольныйКодКлиент
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Код клиент");
	стр_н.Вставить("Действие","ВыполнитьПроизвольныйКодКлиент");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// ВыполнитьПроизвольныйКодСервер
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Код сервер");
	стр_н.Вставить("Действие","ВыполнитьПроизвольныйКодСервер");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// ТестовыйСлучай
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Тестовый случай");
	стр_н.Вставить("Действие","ТестовыйСлучай");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	
	
	// СРАВНЕНИЕ ДАННЫХ
	
	// ПолучитьПредставлениеДанных
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Получить представление данных");
	стр_н.Вставить("Действие","ПолучитьПредставлениеДанных");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// СравнитьСПредставлениемДанных
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Сравнить данные");
	стр_н.Вставить("Действие","СравнитьСПредставлениемДанных");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);

	// ДЕЙСТВИЯ ДЛЯ ОТЛАДКИ
	
	// Пауза
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Пауза");
	стр_н.Вставить("Действие","Пауза");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// Стоп
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Стоп");
	стр_н.Вставить("Действие","Стоп");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	
	// МАКРОШАГИ
	
	// БлокШагов
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Библиотека шагов");
	стр_н.Вставить("Действие","ГотовыйБлокШагов");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	
	// Условие
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Условие");
	стр_н.Вставить("Действие","Условие");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	
	// Таймер
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Таймер");
	стр_н.Вставить("Действие","Таймер");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	
	// ИзПараметра1ВПараметр2
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","параметр1->параметр2");
	стр_н.Вставить("Действие","ИзПараметра1ВПараметр2");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);	
	
	// ПроверкаНаличияЭлемента
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Элемент существует?");
	стр_н.Вставить("Действие","ПроверкаНаличияЭлемента");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);	
	
	// Вызвать исключение
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Вызвать исключение");
	стр_н.Вставить("Действие","ВызватьИсключение");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
		
	// Сделать Screenshot
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Сделать Screenshot");
	стр_н.Вставить("Действие","СделатьСнимокОкна");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
		
	Возврат ДоступныеДействияМассив;
	
КонецФункции

&НаСервереБезКонтекста
Функция мСценРедактор_ПолучитьМассивСтруктурДоступныхДействийSelenium()
	
	ДоступныеДействияМассив = новый Массив;
	
	// Комментарий
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Комментарий");
	стр_н.Вставить("Действие","Комментарий");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// НайтиОбъект
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Найти объект");
	стр_н.Вставить("Действие","НайтиОбъект");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// ВыполнитьКоманду
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Команда");
	стр_н.Вставить("Действие","Команда");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// ПодключитьТестируемоеПриложение 
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Подключить тестируемое приложение");
	стр_н.Вставить("Действие","ПодключитьТестируемоеПриложение");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// ЗакрытьТестируемоеПриложение
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Закрыть тестируемое приложение");
	стр_н.Вставить("Действие","ЗакрытьТестируемоеПриложение");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// ВыполнитьПроизвольныйКодКлиент
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Код клиент");
	стр_н.Вставить("Действие","ВыполнитьПроизвольныйКодКлиент");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// ВыполнитьПроизвольныйКодСервер
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Код сервер");
	стр_н.Вставить("Действие","ВыполнитьПроизвольныйКодСервер");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// ТестовыйСлучай
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Тестовый случай");
	стр_н.Вставить("Действие","ТестовыйСлучай");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	
	
	// СРАВНЕНИЕ ДАННЫХ
	
	// ПолучитьПредставлениеДанных
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Получить представление данных");
	стр_н.Вставить("Действие","ПолучитьПредставлениеДанных");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// СравнитьСПредставлениемДанных
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Сравнить данные");
	стр_н.Вставить("Действие","СравнитьСПредставлениемДанных");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);

	// ДЕЙСТВИЯ ДЛЯ ОТЛАДКИ
	
	// Пауза
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Пауза");
	стр_н.Вставить("Действие","Пауза");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	// Стоп
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Стоп");
	стр_н.Вставить("Действие","Стоп");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	
	// МАКРОШАГИ
	
	// БлокШагов
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Библиотека шагов");
	стр_н.Вставить("Действие","ГотовыйБлокШагов");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	
	// Условие
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Условие");
	стр_н.Вставить("Действие","Условие");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	
	// Таймер
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Таймер");
	стр_н.Вставить("Действие","Таймер");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	
	// ИзПараметра1ВПараметр2
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","параметр1->параметр2");
	стр_н.Вставить("Действие","ИзПараметра1ВПараметр2");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);	
	
	// ПроверкаНаличияЭлемента
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Элемент существует?");
	стр_н.Вставить("Действие","ПроверкаНаличияЭлемента");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);	
		
	// Вызвать исключение
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Вызвать исключение");
	стр_н.Вставить("Действие","ВызватьИсключение");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
	
	// Сделать Screenshot
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Сделать Screenshot");
	стр_н.Вставить("Действие","СделатьСнимокОкна");
	стр_н.Вставить("ДанныеКартинки",мСцен_ПолучитьДанныеКартинки_НаКлиенте(стр_н));
	ДоступныеДействияМассив.Добавить(стр_н);
		
	
	Возврат ДоступныеДействияМассив;
	
КонецФункции

&НаСервереБезКонтекста
Функция мСценРедактор_ПолучитьМассивСтруктурДоступныхКоманд()
	
	ДоступныеКомандыМассив = новый Массив;
	
	// 
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Нажать");
	стр_н.Вставить("Команда","Нажать");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// Выбрать
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Выбрать");
	стр_н.Вставить("Команда","Выбрать");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// Активизировать
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Активизировать");
	стр_н.Вставить("Команда","Активизировать");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// Закрыть
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Закрыть");
	стр_н.Вставить("Команда","Закрыть");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// Открыть
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Открыть");
	стр_н.Вставить("Команда","Открыть");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// Очистить
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Очистить");
	стр_н.Вставить("Команда","Очистить");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// Создать
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Создать");
	стр_н.Вставить("Команда","Создать");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// УстановитьОтметку
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","УстановитьОтметку");
	стр_н.Вставить("Команда","УстановитьОтметку");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// ВвестиТекст
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ВвестиТекст");
	стр_н.Вставить("Команда","ВвестиТекст");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// Открыть
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Открыть");
	стр_н.Вставить("Команда","Открыть");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// ОтменитьРедактирование
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ОтменитьРедактирование");
	стр_н.Вставить("Команда","ОтменитьРедактирование");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// ВыбратьВариант
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ВыбратьВариант");
	стр_н.Вставить("Команда","ВыбратьВариант");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// ВыбратьИзСпискаВыбора
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ВыбратьИзСпискаВыбора");
	стр_н.Вставить("Команда","ВыбратьИзСпискаВыбора");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// ВыполнитьВыборИзСпискаВыбора
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ВыполнитьВыборИзСпискаВыбора");
	стр_н.Вставить("Команда","ВыполнитьВыборИзСпискаВыбора");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// ВыполнитьВыборИзМеню 
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ВыполнитьВыборИзМеню");
	стр_н.Вставить("Команда","ВыполнитьВыборИзМеню");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// Развернуть
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Развернуть");
	стр_н.Вставить("Команда","Развернуть");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// Свернуть
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Свернуть");
	стр_н.Вставить("Команда","Свернуть");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// ВыполнитьКоманду
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ВыполнитьКоманду");
	стр_н.Вставить("Команда","ВыполнитьКоманду");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// УвеличитьЗначение
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","УвеличитьЗначение");
	стр_н.Вставить("Команда","УвеличитьЗначение");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// УменьшитьЗначение
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","УменьшитьЗначение");
	стр_н.Вставить("Команда","УменьшитьЗначение");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// ОткрытьВыпадающийСписок
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ОткрытьВыпадающийСписок");
	стр_н.Вставить("Команда","ОткрытьВыпадающийСписок");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// ЗакрытьВыпадающийСписок
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ЗакрытьВыпадающийСписок");
	стр_н.Вставить("Команда","ЗакрытьВыпадающийСписок");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// ВыполнитьВыборИзВыпадающегоСписка
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ВыполнитьВыборИзВыпадающегоСписка");
	стр_н.Вставить("Команда","ВыполнитьВыборИзВыпадающегоСписка");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// ПерейтиКСтроке
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ПерейтиКСтроке");
	стр_н.Вставить("Команда","ПерейтиКСтроке");
	ДоступныеКомандыМассив.Добавить(стр_н);	
	// ВыделитьВсеСтроки
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ВыделитьВсеСтроки");
	стр_н.Вставить("Команда","ВыделитьВсеСтроки");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// ИзменитьСтроку
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ИзменитьСтроку");
	стр_н.Вставить("Команда","ИзменитьСтроку");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// ДобавитьСтроку
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ДобавитьСтроку");
	стр_н.Вставить("Команда","ДобавитьСтроку");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// УдалитьСтроку
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","УдалитьСтроку");
	стр_н.Вставить("Команда","УдалитьСтроку");
	ДоступныеКомандыМассив.Добавить(стр_н);	
	// ПерейтиКПервойСтроке
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ПерейтиКПервойСтроке");
	стр_н.Вставить("Команда","ПерейтиКПервойСтроке");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// ПерейтиКПоследнейСтроке
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ПерейтиКПоследнейСтроке");
	стр_н.Вставить("Команда","ПерейтиКПоследнейСтроке");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// ПерейтиКСледующейСтроке	
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ПерейтиКСледующейСтроке");
	стр_н.Вставить("Команда","ПерейтиКСледующейСтроке");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// ПерейтиКПредыдущейСтроке
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ПерейтиКПредыдущейСтроке");
	стр_н.Вставить("Команда","ПерейтиКПредыдущейСтроке");
	ДоступныеКомандыМассив.Добавить(стр_н);

	
	
	
	// ПерейтиКСледующемуЭлементу
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ПерейтиКСледующемуЭлементу");
	стр_н.Вставить("Команда","ПерейтиКСледующемуЭлементу");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// ПерейтиКПредыдущемуЭлементу
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ПерейтиКПредыдущемуЭлементу");
	стр_н.Вставить("Команда","ПерейтиКПредыдущемуЭлементу");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// ПерейтиНаУровеньВверх
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ПерейтиНаУровеньВверх");
	стр_н.Вставить("Команда","ПерейтиНаУровеньВверх");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// ПерейтиНаУровеньВниз
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ПерейтиНаУровеньВниз");
	стр_н.Вставить("Команда","ПерейтиНаУровеньВниз");
	ДоступныеКомандыМассив.Добавить(стр_н);	
	
	
	// ЗакончитьРедактированиеСтроки
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ЗакончитьРедактированиеСтроки");
	стр_н.Вставить("Команда","ЗакончитьРедактированиеСтроки");
	ДоступныеКомандыМассив.Добавить(стр_н);
	
	
	// НачатьРедактированиеТекущейОбласти
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","НачатьРедактированиеТекущейОбласти");
	стр_н.Вставить("Команда","НачатьРедактированиеТекущейОбласти");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// УстановитьТекущуюОбласть
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","УстановитьТекущуюОбласть");
	стр_н.Вставить("Команда","УстановитьТекущуюОбласть");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// ЗавершитьРедактированиеТекущейОбласти
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ЗавершитьРедактированиеТекущейОбласти");
	стр_н.Вставить("Команда","ЗавершитьРедактированиеТекущейОбласти");
	ДоступныеКомандыМассив.Добавить(стр_н);
	
	
	// ПерейтиКНачальнойСтранице
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ПерейтиКНачальнойСтранице");
	стр_н.Вставить("Команда","ПерейтиКНачальнойСтранице");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// ПерейтиКСледующемуОкну
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ПерейтиКСледующемуОкну");
	стр_н.Вставить("Команда","ПерейтиКСледующемуОкну");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// ПерейтиКПредыдущемуОкну
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ПерейтиКПредыдущемуОкну");
	стр_н.Вставить("Команда","ПерейтиКПредыдущемуОкну");
	ДоступныеКомандыМассив.Добавить(стр_н);
	
	// ПерейтиКЗначению
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ПерейтиКЗначению");
	стр_н.Вставить("Команда","ПерейтиКЗначению");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// ПерейтиКДате
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ПерейтиКДате");
	стр_н.Вставить("Команда","ПерейтиКДате");
	ДоступныеКомандыМассив.Добавить(стр_н); 	
	
	// ЗакрытьПанельСообщенийПользователю
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ЗакрытьПанельСообщенийПользователю");
	стр_н.Вставить("Команда","ЗакрытьПанельСообщенийПользователю");
	ДоступныеКомандыМассив.Добавить(стр_н);
	// ПолучитьТекстыСообщенийПользователю
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ПолучитьТекстыСообщенийПользователю");
	стр_н.Вставить("Команда","ПолучитьТекстыСообщенийПользователю");
	ДоступныеКомандыМассив.Добавить(стр_н); 	
	
	
	// УстановитьМаксимальноеВремяВыполненияДействия
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","УстановитьМаксимальноеВремяВыполненияДействия");
	стр_н.Вставить("Команда","УстановитьМаксимальноеВремяВыполненияДействия");
	ДоступныеКомандыМассив.Добавить(стр_н); 	
	
	// ПолучитьПредставлениеДанных
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ПолучитьПредставлениеДанных");
	стр_н.Вставить("Команда","ПолучитьПредставлениеДанных");
	ДоступныеКомандыМассив.Добавить(стр_н); 	
	// ПолучитьТекстРедактирования
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ПолучитьТекстРедактирования");
	стр_н.Вставить("Команда","ПолучитьТекстРедактирования");
	ДоступныеКомандыМассив.Добавить(стр_н); 	
	
	
	Возврат ДоступныеКомандыМассив;
	
КонецФункции	

&НаСервереБезКонтекста
Функция мСценРедактор_ПолучитьМассивСтруктурДоступныхКомандAutomationUI()
	
	ДоступныеКомандыМассив = новый Массив;
	
	// Нажать
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Нажать");
	стр_н.Вставить("Команда","click");
	ДоступныеКомандыМассив.Добавить(стр_н);

	// Нажать
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Нажать (simaulte)");
	стр_н.Вставить("Команда","simulate click");
	ДоступныеКомандыМассив.Добавить(стр_н);
		
	// Нажать %
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Нажать %");
	стр_н.Вставить("Команда","click%");
	ДоступныеКомандыМассив.Добавить(стр_н);
	
	// Нажать %
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Нажать % (simulate)");
	стр_н.Вставить("Команда","simulate click%");
	ДоступныеКомандыМассив.Добавить(стр_н);	
	
	// Нажать
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Нажать правая кнопка (simulate)");
	стр_н.Вставить("Команда","simulate rclick");
	ДоступныеКомандыМассив.Добавить(стр_н);	
	
	
	// Двойной клик
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Двойной клик");
	стр_н.Вставить("Команда","dblclick");
	ДоступныеКомандыМассив.Добавить(стр_н);

	// Двойной клик
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Двойной клик (simulate)");
	стр_н.Вставить("Команда","simulate dblclick");
	ДоступныеКомандыМассив.Добавить(стр_н);
		
	// Фокус
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Фокус");
	стр_н.Вставить("Команда","focus");
	ДоступныеКомандыМассив.Добавить(стр_н);
	
	// Устновить текст
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Установить текст");
	стр_н.Вставить("Команда","text");
	ДоступныеКомандыМассив.Добавить(стр_н);

	// Устновить текст
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Установить текст (simulate)");
	стр_н.Вставить("Команда","simulate text");
	ДоступныеКомандыМассив.Добавить(стр_н);
		
	// Отправить key
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Отправить key");
	стр_н.Вставить("Команда","send key");
	ДоступныеКомандыМассив.Добавить(стр_н);		

	// Отправить key
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Отправить key (simulate)");
	стр_н.Вставить("Команда","simulate send key");
	ДоступныеКомандыМассив.Добавить(стр_н);		
		
	// Переключить флаг
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Переключить флаг");
	стр_н.Вставить("Команда","toggle");
	ДоступныеКомандыМассив.Добавить(стр_н);
	
	// Развернуть или схлопнуть
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Развернуть или схлопнуть");
	стр_н.Вставить("Команда","expand or collapse");
	ДоступныеКомандыМассив.Добавить(стр_н);

	// Установить неявное ожидание
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Установить неявное ожидание");
	стр_н.Вставить("Команда","implicit wait");
	ДоступныеКомандыМассив.Добавить(стр_н);
	
	// Получить родителя
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Получить родителя");
	стр_н.Вставить("Команда","parent");
	ДоступныеКомандыМассив.Добавить(стр_н);
	
	// Получить текст
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Получить текст");
	стр_н.Вставить("Команда","get text");
	ДоступныеКомандыМассив.Добавить(стр_н);

	// Получить текст
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Получить загловок окна (simulate)");
	стр_н.Вставить("Команда","simulate get window title");
	ДоступныеКомандыМассив.Добавить(стр_н);

	// Close
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Закрыть окно");
	стр_н.Вставить("Команда","close");
	ДоступныеКомандыМассив.Добавить(стр_н);
	
	// Получить текст из буфера
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Текст из буфера обмена");
	стр_н.Вставить("Команда","clipboard get text");
	ДоступныеКомандыМассив.Добавить(стр_н);

	// Установить текст в буфера
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Установить в буфера обмена");
	стр_н.Вставить("Команда","clipboard set text");
	ДоступныеКомандыМассив.Добавить(стр_н);	
	
	// Получить фокусированный текст
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Получить текст под фокусом");
	стр_н.Вставить("Команда","simulate get focused text");
	ДоступныеКомандыМассив.Добавить(стр_н);
		
	// wait for input
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Ожидать отклика");
	стр_н.Вставить("Команда","wait for input");
	ДоступныеКомандыМассив.Добавить(стр_н);
	
	Возврат ДоступныеКомандыМассив;
	
КонецФункции	

&НаСервереБезКонтекста
Функция мСценРедактор_ПолучитьМассивСтруктурДоступныхКомандSelenium()
	
	ДоступныеКомандыМассив = новый Массив;
	
	// Нажать
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Нажать");
	стр_н.Вставить("Команда","click");
	ДоступныеКомандыМассив.Добавить(стр_н);
		
	// Двойной клик
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Двойной клик");
	стр_н.Вставить("Команда","dblclick");
	ДоступныеКомандыМассив.Добавить(стр_н);
		
	// Фокус
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Фокус");
	стр_н.Вставить("Команда","focus");
	ДоступныеКомандыМассив.Добавить(стр_н);

	// Устновить текст
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Установить текст");
	стр_н.Вставить("Команда","text");
	ДоступныеКомандыМассив.Добавить(стр_н);
	
	// Отправить key
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Отправить key");
	стр_н.Вставить("Команда","send key");
	ДоступныеКомандыМассив.Добавить(стр_н);		
	
	// Перейти по адресу
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Перейти по адресу");
	стр_н.Вставить("Команда","navigate");
	ДоступныеКомандыМассив.Добавить(стр_н);
	
	// Установить неявное ожидание
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Установить неявное ожидание");
	стр_н.Вставить("Команда","implicit wait");
	ДоступныеКомандыМассив.Добавить(стр_н);
	
	// Нажать
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Нажать правая кнопка");
	стр_н.Вставить("Команда","rclick");
	ДоступныеКомандыМассив.Добавить(стр_н);	

	// Получить родителя
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Получить родителя");
	стр_н.Вставить("Команда","parent");
	ДоступныеКомандыМассив.Добавить(стр_н);
	
	// Очистить
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Очистить");
	стр_н.Вставить("Команда","clear");
	ДоступныеКомандыМассив.Добавить(стр_н);
	
	// Получить текст
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Получить текст");
	стр_н.Вставить("Команда","get text");
	ДоступныеКомандыМассив.Добавить(стр_н);

	// Получить атрибут
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","Получить атрибут");
	стр_н.Вставить("Команда","get attribute");
	ДоступныеКомандыМассив.Добавить(стр_н);
		
	// ctrl+a
	стр_н = новый Структура;
	стр_н.Вставить("Синоним","ctrl+a");
	стр_н.Вставить("Команда","ctrl plus a");
	ДоступныеКомандыМассив.Добавить(стр_н);	
	
	Возврат ДоступныеКомандыМассив;
	
КонецФункции

&НаСервереБезКонтекста
Функция мСценРедактор_ПолучитьМассивСтруктурДоступныхСвойств()
	
	// Создание описателя типов для таблицы значений
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока = Новый ОписаниеТипов(Массив);
	Массив.Очистить();
	Массив.Добавить(Тип("Число"));
	ОписаниеТиповЧисло = Новый ОписаниеТипов(Массив);
	Массив.Очистить();
	Массив.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(Массив);
	Массив.Очистить();
	Массив.Добавить(Тип("Дата"));
	ОписаниеТиповДата = Новый ОписаниеТипов(Массив);  	
	Массив.Очистить();
	Массив.Добавить(Тип("Строка"));
	Массив.Добавить(Тип("Число"));
	Массив.Добавить(Тип("Булево"));
	Массив.Добавить(Тип("Дата"));
	ОписаниеТиповСтрокаЧислоБулевоДата = Новый ОписаниеТипов(Массив);
	
	
	ДоступныеСвойстваМассив = новый Массив;
	
	// Наименование
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","Наименование");
	стр_н.Вставить("Синоним","Наименование");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Ложь);
	стр_н.Вставить("Видимость",Истина);	
	ДоступныеСвойстваМассив.Добавить(стр_н);
	// Активность
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","Активность");
	стр_н.Вставить("Синоним","Активность");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповБулево);
	стр_н.Вставить("ТолькоПросмотр",Ложь);
	стр_н.Вставить("Видимость",Истина);	
	ДоступныеСвойстваМассив.Добавить(стр_н);
	// Действие
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","Действие");
	стр_н.Вставить("Синоним","Действие");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Ложь);
	стр_н.Вставить("Видимость",Истина);	
	ДоступныеСвойстваМассив.Добавить(стр_н);
	// Команда
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","Команда");
	стр_н.Вставить("Синоним","Команда");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Ложь);
	стр_н.Вставить("Видимость",Ложь);	
	ДоступныеСвойстваМассив.Добавить(стр_н);
	// ТипОбъекта
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","ТипОбъекта");
	стр_н.Вставить("Синоним","Тип объекта");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Ложь);
	стр_н.Вставить("Видимость",Ложь);	
	ДоступныеСвойстваМассив.Добавить(стр_н);
	// ИмяОбъекта
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","ИмяОбъекта");
	стр_н.Вставить("Синоним","Имя объекта");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Ложь);
	стр_н.Вставить("Видимость",Ложь);	
	ДоступныеСвойстваМассив.Добавить(стр_н);	
	// ПродолжитьПриОшибке
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","ПродолжитьПриОшибке");
	стр_н.Вставить("Синоним","Продолжить при ошибке");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповБулево);
	стр_н.Вставить("ТолькоПросмотр",Ложь);
	стр_н.Вставить("Видимость",Ложь);	
	ДоступныеСвойстваМассив.Добавить(стр_н);
	// ЗаголовокОбъекта
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","ЗаголовокОбъекта");
	стр_н.Вставить("Синоним","Заголовок объекта");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Ложь);
	стр_н.Вставить("Видимость",Ложь);	
	ДоступныеСвойстваМассив.Добавить(стр_н);
	// ИмяПеременной
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","ИмяПеременной");
	стр_н.Вставить("Синоним","Имя переменной (для команд и условий родителя)");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Ложь);
	стр_н.Вставить("Видимость",Ложь);	
	ДоступныеСвойстваМассив.Добавить(стр_н);
	// Описание
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","Описание");
	стр_н.Вставить("Синоним","Описание");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Ложь);
	стр_н.Вставить("Видимость",Ложь);	
	ДоступныеСвойстваМассив.Добавить(стр_н);
	// ЭтоГлавноеОкно
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","ЭтоГлавноеОкно");
	стр_н.Вставить("Синоним","Это основное окно");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповБулево);
	стр_н.Вставить("ТолькоПросмотр",Ложь);
	стр_н.Вставить("Видимость",Ложь);	
	ДоступныеСвойстваМассив.Добавить(стр_н);
	// OutputText
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","OutputText");
	стр_н.Вставить("Синоним","Вводимый текст");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Ложь);
	стр_н.Вставить("Видимость",Ложь);	
	ДоступныеСвойстваМассив.Добавить(стр_н);
	// CommandRef
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","CommandRef");
	стр_н.Вставить("Синоним","Ссылка на команду");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Ложь);
	стр_н.Вставить("Видимость",Ложь);	
	ДоступныеСвойстваМассив.Добавить(стр_н);
	// Presentation
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","Presentation");
	стр_н.Вставить("Синоним","Представление");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Ложь);
	стр_н.Вставить("Видимость",Ложь);	
	ДоступныеСвойстваМассив.Добавить(стр_н);
	// Direction
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","Direction");
	стр_н.Вставить("Синоним","Направление");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Ложь);
	стр_н.Вставить("Видимость",Ложь);	
	ДоступныеСвойстваМассив.Добавить(стр_н);
	// RowDescription 
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","RowDescription");
	стр_н.Вставить("Синоним","Описание строки");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Ложь);
	стр_н.Вставить("Видимость",Ложь);	
	ДоступныеСвойстваМассив.Добавить(стр_н);
	// SwitchSelection
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","SwitchSelection");
	стр_н.Вставить("Синоним","Переключатель выделение");
	стр_н.Вставить("Значение",Ложь);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповБулево);
	стр_н.Вставить("ТолькоПросмотр",Ложь);
	стр_н.Вставить("Видимость",Ложь);	
	ДоступныеСвойстваМассив.Добавить(стр_н);
	// CustomCodeClient
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","CustomCodeClient");
	стр_н.Вставить("Синоним","Код клиента");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Ложь);
	стр_н.Вставить("Видимость",Ложь);	
	ДоступныеСвойстваМассив.Добавить(стр_н);
	// CustomCodeServer
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","CustomCodeServer");
	стр_н.Вставить("Синоним","Код сервера");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Ложь);
	стр_н.Вставить("Видимость",Ложь);	
	ДоступныеСвойстваМассив.Добавить(стр_н);
	// UID
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","UID");
	стр_н.Вставить("Синоним","Уникальный идентификатор");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Истина);
	стр_н.Вставить("Видимость",Ложь);	
	ДоступныеСвойстваМассив.Добавить(стр_н);
	// ИдентификаторУзелаДерева
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","ИдентификаторУзелаДерева");
	стр_н.Вставить("Синоним","Идентификатор узела дерева сценария");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповЧисло);
	стр_н.Вставить("ТолькоПросмотр",Истина);
	стр_н.Вставить("Видимость",Ложь);
	ДоступныеСвойстваМассив.Добавить(стр_н);
	// ПредставлениеДанных
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","ПредставлениеДанных");
	стр_н.Вставить("Синоним","Представление данных");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Истина);
	стр_н.Вставить("Видимость",Ложь);
	ДоступныеСвойстваМассив.Добавить(стр_н);	
	// СвойстваПодключенияКлиентаТестирования
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","СвойстваПодключенияКлиентаТестирования");
	стр_н.Вставить("Синоним","Свойства подключения");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Истина);
	стр_н.Вставить("Видимость",Ложь);
	ДоступныеСвойстваМассив.Добавить(стр_н);
	// API
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","API");
	стр_н.Вставить("Синоним","API");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Истина);
	стр_н.Вставить("Видимость",Ложь);
	ДоступныеСвойстваМассив.Добавить(стр_н);
	// ИмяКлассаОбъекта	
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","ИмяКлассаОбъекта");
	стр_н.Вставить("Синоним","Имя класса");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Истина);
	стр_н.Вставить("Видимость",Ложь);
	ДоступныеСвойстваМассив.Добавить(стр_н);
	// ИдентификаторОбъекта	
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","ИдентификаторОбъекта");
	стр_н.Вставить("Синоним","ID/Automation ID");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Истина);
	стр_н.Вставить("Видимость",Ложь);
	ДоступныеСвойстваМассив.Добавить(стр_н);
	// Attribute	
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","Attribute");
	стр_н.Вставить("Синоним","Атрибут");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Истина);
	стр_н.Вставить("Видимость",Ложь);
	ДоступныеСвойстваМассив.Добавить(стр_н);	
	// ОдинУровеньВниз
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","ОдинУровеньВниз");
	стр_н.Вставить("Синоним","ОдинУровеньВниз");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповБулево);
	стр_н.Вставить("ТолькоПросмотр",Истина);
	стр_н.Вставить("Видимость",Ложь);
	ДоступныеСвойстваМассив.Добавить(стр_н);	// ClickX	
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","ClickX");
	стр_н.Вставить("Синоним","Click X");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Истина);
	стр_н.Вставить("Видимость",Ложь);
	ДоступныеСвойстваМассив.Добавить(стр_н);	
	// ClickY	
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","ClickY");
	стр_н.Вставить("Синоним","Click Y");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Истина);
	стр_н.Вставить("Видимость",Ложь);
	ДоступныеСвойстваМассив.Добавить(стр_н);
	// xPath	
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","xPath");
	стр_н.Вставить("Синоним","xPath");
	стр_н.Вставить("Значение",Неопределено);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Истина);
	стр_н.Вставить("Видимость",Ложь);
	ДоступныеСвойстваМассив.Добавить(стр_н);	
		
	// Cancel
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","Cancel");
	стр_н.Вставить("Синоним","Отмена");
	стр_н.Вставить("Значение","");
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповБулево);
	стр_н.Вставить("ТолькоПросмотр",Истина);
	стр_н.Вставить("Видимость",Ложь);
	ДоступныеСвойстваМассив.Добавить(стр_н);
	// Area
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","Area");
	стр_н.Вставить("Синоним","Область");
	стр_н.Вставить("Значение","");
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Истина);
	стр_н.Вставить("Видимость",Ложь);
	ДоступныеСвойстваМассив.Добавить(стр_н);	
	// Library
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","Library");
	стр_н.Вставить("Синоним","Библиотека");
	стр_н.Вставить("Значение","");
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Истина);
	стр_н.Вставить("Видимость",Ложь);
	ДоступныеСвойстваМассив.Добавить(стр_н);	
	// УсловиеСравнения
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","УсловиеСравнения");
	стр_н.Вставить("Синоним","Условие сравнения");
	стр_н.Вставить("Значение","");
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Истина);
	стр_н.Вставить("Видимость",Ложь);
	ДоступныеСвойстваМассив.Добавить(стр_н);	
	// ПутьБлокШагов
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","ПутьБлокШагов");
	стр_н.Вставить("Синоним","Путь к файлу блока шагов");
	стр_н.Вставить("Значение","");
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Истина);
	стр_н.Вставить("Видимость",Ложь);
	ДоступныеСвойстваМассив.Добавить(стр_н);	
	// ЭтоБлок
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","ЭтоБлок");
	стр_н.Вставить("Синоним","Это блок готовых шагов");
	стр_н.Вставить("Значение","");
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповБулево);
	стр_н.Вставить("ТолькоПросмотр",Истина);
	стр_н.Вставить("Видимость",Ложь);
	ДоступныеСвойстваМассив.Добавить(стр_н);	
	// filename
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","filename");
	стр_н.Вставить("Синоним","путь к файлу");
	стр_н.Вставить("Значение","");
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Истина);
	стр_н.Вставить("Видимость",Ложь);
	ДоступныеСвойстваМассив.Добавить(стр_н);	
	// ИмяПараметра
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","ИмяПараметра");
	стр_н.Вставить("Синоним","Имя параметра");
	стр_н.Вставить("Значение","");
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Истина);
	стр_н.Вставить("Видимость",Ложь);
	ДоступныеСвойстваМассив.Добавить(стр_н);	
	// ИмяПараметра2
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","ИмяПараметра2");
	стр_н.Вставить("Синоним","Имя параметра2");
	стр_н.Вставить("Значение","");
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Истина);
	стр_н.Вставить("Видимость",Ложь);
	ДоступныеСвойстваМассив.Добавить(стр_н);	
	// ЗначениеПараметра
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","ЗначениеПараметра");
	стр_н.Вставить("Синоним","Значение параметра");
	стр_н.Вставить("Значение","");
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрокаЧислоБулевоДата);
	стр_н.Вставить("ТолькоПросмотр",Истина);
	стр_н.Вставить("Видимость",Ложь);
	ДоступныеСвойстваМассив.Добавить(стр_н);
	//Severity
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","Severity");
	стр_н.Вставить("Синоним","Серьезность дефекта");
	стр_н.Вставить("Значение","Значительный");
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповСтрока);
	стр_н.Вставить("ТолькоПросмотр",Истина);
	стр_н.Вставить("Видимость",Ложь);
	ДоступныеСвойстваМассив.Добавить(стр_н);
	// Интервал
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","Интервал");
	стр_н.Вставить("Синоним","Интервал");
	стр_н.Вставить("Значение",0);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповЧисло);
	стр_н.Вставить("ТолькоПросмотр",Ложь);
	стр_н.Вставить("Видимость",Ложь);
	ДоступныеСвойстваМассив.Добавить(стр_н);	
	// ИспользоватьВариантыПоиска
	стр_н = новый Структура;
	стр_н.Вставить("Свойство","ИспользоватьВариантыПоиска");
	стр_н.Вставить("Синоним","Варианты поиска");
	стр_н.Вставить("Значение",0);
	стр_н.Вставить("ОписаниеТипов",ОписаниеТиповБулево);
	стр_н.Вставить("ТолькоПросмотр",Ложь);
	стр_н.Вставить("Видимость",Ложь);
	ДоступныеСвойстваМассив.Добавить(стр_н);
	
	Возврат ДоступныеСвойстваМассив;
	
КонецФункции

&НаСервереБезКонтекста
Функция мСценРедактор_ПолучитьСписокСвойствДляДействияКоманды(Знач Действие="", Знач Команда="",знач API="")
	
	ДоступныеСвойстваМассив = мСценРедактор_ПолучитьМассивСтруктурДоступныхСвойств();
	
	СоответсвиеДляПоиска = новый Соответствие;
	
	Для каждого стр из ДоступныеСвойстваМассив Цикл
		СоответсвиеДляПоиска.Вставить(стр.Свойство,стр);
	КонецЦикла;
	
	Если Действие="Комментарий" Тогда
		СоответсвиеДляПоиска.Получить("Описание").Видимость = Истина;
	ИначеЕсли Действие="СделатьСнимокОкна" ИЛИ Действие="MakeScreenShot" Тогда
		СоответсвиеДляПоиска.Получить("Описание").Видимость = Истина;
	ИначеЕсли Действие="НайтиОсновноеОкно" Тогда
		СоответсвиеДляПоиска.Получить("ЗаголовокОбъекта").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ТипОбъекта").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ИмяПеременной").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ИмяОбъекта").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ЭтоГлавноеОкно").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ПродолжитьПриОшибке").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("API").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("Интервал").Видимость = Истина;
		Если API="AutomationUI" ИЛИ API="Selenium" Тогда
			СоответсвиеДляПоиска.Получить("ИмяКлассаОбъекта").Видимость = Истина;
			СоответсвиеДляПоиска.Получить("ИдентификаторОбъекта").Видимость = Истина;
		КонецЕсли;
	ИначеЕсли Действие="НайтиОкно" Тогда
		СоответсвиеДляПоиска.Получить("ЗаголовокОбъекта").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ТипОбъекта").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ИмяПеременной").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ИмяОбъекта").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ИспользоватьВариантыПоиска").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ПродолжитьПриОшибке").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("API").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("Интервал").Видимость = Истина;
		Если API="AutomationUI" ИЛИ API="Selenium" Тогда
			СоответсвиеДляПоиска.Получить("ИмяКлассаОбъекта").Видимость = Истина;
			СоответсвиеДляПоиска.Получить("ИдентификаторОбъекта").Видимость = Истина;
		КонецЕсли;
		СоответсвиеДляПоиска.Получить("Интервал").Видимость = Истина;
	ИначеЕсли Действие="НайтиФорму" Тогда
		СоответсвиеДляПоиска.Получить("ЗаголовокОбъекта").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ТипОбъекта").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ИмяПеременной").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ИмяОбъекта").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ИспользоватьВариантыПоиска").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ПродолжитьПриОшибке").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("API").Видимость = Истина;
		Если API="AutomationUI" ИЛИ API="Selenium" Тогда
			СоответсвиеДляПоиска.Получить("ИмяКлассаОбъекта").Видимость = Истина;
			СоответсвиеДляПоиска.Получить("ИдентификаторОбъекта").Видимость = Истина;
		КонецЕсли;
		СоответсвиеДляПоиска.Получить("Интервал").Видимость = Истина;
	ИначеЕсли Действие="НайтиОбъект" Тогда
		СоответсвиеДляПоиска.Получить("ЗаголовокОбъекта").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ТипОбъекта").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ИмяПеременной").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ИмяОбъекта").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ПродолжитьПриОшибке").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ИспользоватьВариантыПоиска").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("API").Видимость = Истина;
		Если API="AutomationUI" Тогда
			СоответсвиеДляПоиска.Получить("ОдинУровеньВниз").Видимость = Истина;
		КонецЕсли;
		Если API="AutomationUI" ИЛИ API="Selenium" Тогда
			СоответсвиеДляПоиска.Получить("ИмяКлассаОбъекта").Видимость = Истина;
			СоответсвиеДляПоиска.Получить("xPath").Видимость = Истина;
			СоответсвиеДляПоиска.Получить("ИдентификаторОбъекта").Видимость = Истина;
		КонецЕсли;				
		Если API="Selenium" Тогда
			СоответсвиеДляПоиска.Получить("OutputText").Видимость = Истина;
		КонецЕсли;
		СоответсвиеДляПоиска.Получить("Интервал").Видимость = Истина;
	ИначеЕсли Действие="ПроверкаНаличияЭлемента" Тогда
		СоответсвиеДляПоиска.Получить("ЗаголовокОбъекта").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ТипОбъекта").Видимость = Истина;
		//СоответсвиеДляПоиска.Получить("ИмяПеременной").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ИмяОбъекта").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ИмяПараметра").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ИспользоватьВариантыПоиска").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("API").Видимость = Истина;	
		СоответсвиеДляПоиска.Получить("Интервал").Видимость = Истина;	
		Если API="AutomationUI" ИЛИ API="Selenium" Тогда
			СоответсвиеДляПоиска.Получить("ИмяКлассаОбъекта").Видимость = Истина;
			СоответсвиеДляПоиска.Получить("xPath").Видимость = Истина;
			СоответсвиеДляПоиска.Получить("ИдентификаторОбъекта").Видимость = Истина;
		КонецЕсли;				
		Если API="Selenium" Тогда
			СоответсвиеДляПоиска.Получить("OutputText").Видимость = Истина;
		КонецЕсли;
	ИначеЕсли Действие="ПолучитьКомандныйИнтерфейс" Тогда
		СоответсвиеДляПоиска.Получить("ЗаголовокОбъекта").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ТипОбъекта").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ИмяПеременной").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ИмяОбъекта").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ПродолжитьПриОшибке").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("API").Видимость = Истина;
	ИначеЕсли Действие="ПодключитьТестируемоеПриложение" или Действие="GenerateClientConnectionScript" Тогда
		СоответсвиеДляПоиска.Получить("ПродолжитьПриОшибке").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("СвойстваПодключенияКлиентаТестирования").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("Интервал").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("API").Видимость = Истина;		
	ИначеЕсли Действие = "ВызватьИсключение" ИЛИ Действие = "ThrowException" Тогда
		СоответсвиеДляПоиска.Получить("ПродолжитьПриОшибке").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("OutputText").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("API").Видимость = Истина;			
 	ИначеЕсли Действие="ЗакрытьТестируемоеПриложение" Тогда
		СоответсвиеДляПоиска.Получить("ПродолжитьПриОшибке").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("СвойстваПодключенияКлиентаТестирования").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("API").Видимость = Истина;
	ИначеЕсли Действие="Таймер" Тогда
		СоответсвиеДляПоиска.Получить("Интервал").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("API").Видимость = Истина;		
	ИначеЕсли Действие="ИзПараметра1ВПараметр2" Тогда
		СоответсвиеДляПоиска.Получить("ИмяПараметра").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ИмяПараметра2").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("API").Видимость = Истина;
	ИначеЕсли Действие="ВыполнитьПроизвольныйКодКлиент" Тогда
		СоответсвиеДляПоиска.Получить("CustomCodeClient").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ПродолжитьПриОшибке").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("API").Видимость = Истина;
	ИначеЕсли Действие="ВыполнитьПроизвольныйКодСервер" Тогда
		СоответсвиеДляПоиска.Получить("CustomCodeServer").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ПродолжитьПриОшибке").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("API").Видимость = Истина;
	ИначеЕсли Действие="ПолучитьПредставлениеДанных" Тогда
		СоответсвиеДляПоиска.Получить("ИмяПеременной").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ПредставлениеДанных").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ПродолжитьПриОшибке").Видимость = Истина;		
		СоответсвиеДляПоиска.Получить("ИмяПараметра").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ЗначениеПараметра").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("API").Видимость = Истина;
		Если (API="AutomationUI" ИЛИ API="Selenium") Тогда
			СоответсвиеДляПоиска.Получить("Attribute").Видимость = Истина;			
		КонецЕсли;
	ИначеЕсли Действие="СравнитьСПредставлениемДанных" Тогда
		СоответсвиеДляПоиска.Получить("УсловиеСравнения").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ИмяПараметра").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ИмяПараметра2").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ИмяПеременной").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ПредставлениеДанных").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ПродолжитьПриОшибке").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("API").Видимость = Истина; 		
	ИначеЕсли Действие="ТестовыйСлучай" Тогда
		СоответсвиеДляПоиска.Получить("Описание").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("Severity").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("API").Видимость = Истина;		
	ИначеЕсли Действие="Команда" Тогда
		СоответсвиеДляПоиска.Получить("ТипОбъекта").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("Команда").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ИмяПеременной").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ИмяОбъекта").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ПродолжитьПриОшибке").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("API").Видимость = Истина;

		Если (API="AutomationUI" ИЛИ API="Selenium") И (Найти(Команда,"attribute") ИЛИ Найти(Команда,"get text") ИЛИ Найти(Команда,"get window title") ИЛИ Найти(Команда,"get focused text")) Тогда
			СоответсвиеДляПоиска.Получить("Attribute").Видимость = Истина;
			СоответсвиеДляПоиска.Получить("ИмяПараметра").Видимость = Истина;
			СоответсвиеДляПоиска.Получить("ЗначениеПараметра").Видимость = Истина;						
		КонецЕсли;
		
		Если API="AutomationUI" И Найти(Команда,"click")Тогда
			СоответсвиеДляПоиска.Получить("ClickX").Видимость = Истина;
			СоответсвиеДляПоиска.Получить("ClickY").Видимость = Истина;
		КонецЕсли;
		
		
		Если Команда="ВвестиТекст" ИЛИ Найти(Команда,"text") ИЛИ Найти(Команда,"key") ИЛИ Найти(Команда,"navigate") Тогда
			СоответсвиеДляПоиска.Получить("OutputText").Видимость = Истина;
		КонецЕсли;

		Если (API="AutomationUI" ИЛИ API="Selenium") И (Найти(Команда,"attribute") ИЛИ Найти(Команда,"get text") ИЛИ Найти(Команда,"get window title") ИЛИ Найти(Команда,"get focused text")) Тогда
			СоответсвиеДляПоиска.Получить("Attribute").Видимость = Истина;
			СоответсвиеДляПоиска.Получить("ИмяПараметра").Видимость = Истина;
			СоответсвиеДляПоиска.Получить("ЗначениеПараметра").Видимость = Ложь;
			СоответсвиеДляПоиска.Получить("ПредставлениеДанных").Видимость = Истина;
			СоответсвиеДляПоиска.Получить("OutputText").Видимость = Ложь;
			СоответсвиеДляПоиска.Получить("ТипОбъекта").Видимость = Ложь;
			СоответсвиеДляПоиска.Получить("ИмяОбъекта").Видимость = Ложь;									
		КонецЕсли;
		
		Если Найти(Команда,"wait") ИЛИ Найти(Команда,"УстановитьМаксимальноеВремяВыполненияДействия") ИЛИ Найти(Команда,"wait for input") Тогда
			СоответсвиеДляПоиска.Получить("Интервал").Видимость = Истина;
		КонецЕсли;
	
		Если Команда="ВыполнитьКоманду"  Тогда
			СоответсвиеДляПоиска.Получить("CommandRef").Видимость = Истина;
		КонецЕсли;
		
		Если Команда="ВыполнитьВыборИзВыпадающегоСписка" ИЛИ
			Команда="ВыполнитьВыборИзСпискаВыбора" ИЛИ
			Команда="ВыбратьВариант" ИЛИ
			Команда="ПерейтиКЗначению" ИЛИ
			Команда="ПерейтиКДате" ИЛИ
			Команда="НажатьНаГиперссылкуВФорматированнойСтроке"
			Тогда
			СоответсвиеДляПоиска.Получить("Presentation").Видимость = Истина;
		КонецЕсли;
		
		Если Команда="ПерейтиКСтроке" Тогда
			СоответсвиеДляПоиска.Получить("Direction").Видимость = Истина;
			СоответсвиеДляПоиска.Получить("RowDescription").Видимость = Истина;
		КонецЕсли;	
		
		Если Команда="ПерейтиКСтроке" ИЛИ
			Команда="ПерейтиКПервойСтроке" ИЛИ
			Команда="ПерейтиКПоследнейСтроке" ИЛИ
			Команда="ПерейтиКСледующейСтроке" ИЛИ
			Команда="ПерейтиКПредыдущейСтроке"
			Тогда
			СоответсвиеДляПоиска.Получить("SwitchSelection").Видимость = Истина;
		КонецЕсли;
		
		Если Команда="ЗавершитьРедактированиеТекущейОбласти" ИЛИ Команда="ЗакончитьРедактированиеСтроки" Тогда
			СоответсвиеДляПоиска.Получить("Cancel").Видимость = Истина;
		КонецЕсли;
		
		Если Команда="УстановитьТекущуюОбласть" Тогда
			СоответсвиеДляПоиска.Получить("Area").Видимость = Истина;
		КонецЕсли;	
		
		Если Команда="ПолучитьТекстыСообщенийПользователю" ИЛИ
			Команда="ПолучитьПредставлениеДанных" ИЛИ
			Команда="ПолучитьТекстРедактирования"
			Тогда
			СоответсвиеДляПоиска.Получить("ИмяПараметра").Видимость = Истина;
			СоответсвиеДляПоиска.Получить("ЗначениеПараметра").Видимость = Истина;
		КонецЕсли;
		
	ИначеЕсли Действие="ГотовыйБлокШагов" Тогда		
		СоответсвиеДляПоиска.Получить("Library").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ПутьБлокШагов").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ЭтоБлок").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ПродолжитьПриОшибке").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("API").Видимость = Истина;
	ИначеЕсли Действие="ДилогВыбораФайла" Тогда
		СоответсвиеДляПоиска.Получить("filename").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ПродолжитьПриОшибке").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("API").Видимость = Истина;
	ИначеЕсли Действие="Условие" Тогда
		СоответсвиеДляПоиска.Получить("УсловиеСравнения").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ИмяПеременной").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ИмяПараметра").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ИмяПараметра2").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("ЗначениеПараметра").Видимость = Истина;
		СоответсвиеДляПоиска.Получить("API").Видимость = Истина;
	КонецЕсли;
	
	Возврат ДоступныеСвойстваМассив;
	
КонецФункции

&НаСервереБезКонтекста
Функция	мСценРедактор_ПолучитьМассивСтруктурДоступныхТиповОбъектовТестируемогоПриложения()
	
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив = новый Массив;
	
	// FormField
	стр_н = новый Структура;
	стр_н.Вставить("Имя","FormField");
	стр_н.Вставить("Синоним","Поле формы");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);
	
	// FormDecoration
	стр_н = новый Структура;
	стр_н.Вставить("Имя","FormDecoration");
	стр_н.Вставить("Синоним","Декорация формы");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);
	
	// FormButton
	стр_н = новый Структура;
	стр_н.Вставить("Имя","FormButton");
	стр_н.Вставить("Синоним","Кнопка формы");
	стр_н.Вставить("ДоступныеКоманды","Активизировать Нажать");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);
	
	// FormGroup 
	стр_н = новый Структура;
	стр_н.Вставить("Имя","FormGroup");
	стр_н.Вставить("Синоним","Группа формы");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);
	
	// FormTable 
	стр_н = новый Структура;
	стр_н.Вставить("Имя","FormTable");
	стр_н.Вставить("Синоним","Таблица формы");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);
	
	// CommandInterfaceButton
	стр_н = новый Структура;
	стр_н.Вставить("Имя","CommandInterfaceButton");
	стр_н.Вставить("Синоним","Кнопка командного интерфейса");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);
	
	// CommandInterfaceGroup
	стр_н = новый Структура;
	стр_н.Вставить("Имя","CommandInterfaceGroup");
	стр_н.Вставить("Синоним","Группа командного интерфейса");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);
	
	//// FormField
	//стр_н = новый Структура;
	//стр_н.Вставить("Имя","");
	//стр_н.Вставить("Синоним","<любой>");
	//ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);
	
	Возврат ДоступныеЭлементыТестируемогоИнтерфейсаМассив;
	
КонецФункции

&НаСервереБезКонтекста
Функция	мСценРедактор_ПолучитьМассивСтруктурТиповОбъектовТестируемогоПриложения()
	
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив = мСценРедактор_ПолучитьМассивСтруктурДоступныхТиповОбъектовТестируемогоПриложения();
	
	// ClientApplicationWindow
	стр_н = новый Структура;
	стр_н.Вставить("Имя","ClientApplicationWindow");
	стр_н.Вставить("Синоним","Окно клиентского приложения");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);
	
	// CommandInterface
	стр_н = новый Структура;
	стр_н.Вставить("Имя","CommandInterface");
	стр_н.Вставить("Синоним","Командный интерфейс");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);
	
	// CommandInterface
	стр_н = новый Структура;
	стр_н.Вставить("Имя","Form");
	стр_н.Вставить("Синоним","Форма");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);
	
	Возврат ДоступныеЭлементыТестируемогоИнтерфейсаМассив;
	
КонецФункции


&НаСервереБезКонтекста
Функция	мСценРедактор_ПолучитьМассивСтруктурТиповОбъектовТестируемогоПриложенияAutomationUI()
	
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив = новый Массив;
	
	// Любой
	стр_н = новый Структура;
	стр_н.Вставить("Имя","");
	стр_н.Вставить("Синоним","Произвольный - other");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);		
	
	// Window
	стр_н = новый Структура;
	стр_н.Вставить("Имя","window");
	стр_н.Вставить("Синоним","window - окно");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);
	
	// Button
	стр_н = новый Структура;
	стр_н.Вставить("Имя","button");
	стр_н.Вставить("Синоним","Button - кнопка");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);	
		
	// CheckBox
	стр_н = новый Структура;
	стр_н.Вставить("Имя","checkbox");
	стр_н.Вставить("Синоним","CheckBox - переключатель");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);	
		
	// Edit
	стр_н = новый Структура;
	стр_н.Вставить("Имя","edit");
	стр_н.Вставить("Синоним","Edit - ввод текста");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);	
		
	// TabItem
	стр_н = новый Структура;
	стр_н.Вставить("Имя","tabitem");
	стр_н.Вставить("Синоним","TabItem - элемент вкладки");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);	

	// Text
	стр_н = новый Структура;
	стр_н.Вставить("Имя","text");
	стр_н.Вставить("Синоним","Text - текст");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);	
		
	// RadioButton
	стр_н = новый Структура;
	стр_н.Вставить("Имя","radiobutton");
	стр_н.Вставить("Синоним","RadioButton - радио кнопка");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);	
		
	// Pane
	стр_н = новый Структура;
	стр_н.Вставить("Имя","pane");
	стр_н.Вставить("Синоним","Pane - панель");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);	
		
	// MenuItem
	стр_н = новый Структура;
	стр_н.Вставить("Имя","menuitem");
	стр_н.Вставить("Синоним","MenuItem - элемент меню");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);	
	
	// Custom
	стр_н = новый Структура;
	стр_н.Вставить("Имя","custom");
	стр_н.Вставить("Синоним","Custom - пользовательский");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);	
		
	Возврат ДоступныеЭлементыТестируемогоИнтерфейсаМассив;
	
КонецФункции


&НаСервереБезКонтекста
Функция	мСценРедактор_ПолучитьМассивСтруктурТиповОбъектовТестируемогоПриложенияSelenium()
	
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив = новый Массив;
	
	// div
	стр_н = новый Структура;
	стр_н.Вставить("Имя","div");
	стр_н.Вставить("Синоним","div - слой");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);
	
	// input
	стр_н = новый Структура;
	стр_н.Вставить("Имя","input");
	стр_н.Вставить("Синоним","input - ввод");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);
	
	// a
	стр_н = новый Структура;
	стр_н.Вставить("Имя","a");
	стр_н.Вставить("Синоним","a - ссылка");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);
	
	// span
	стр_н = новый Структура;
	стр_н.Вставить("Имя","span");
	стр_н.Вставить("Синоним","span - контейнер");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);
	
	// textarea
	стр_н = новый Структура;
	стр_н.Вставить("Имя","textarea");
	стр_н.Вставить("Синоним","textarea - область текста");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);
	
	// img
	стр_н = новый Структура;
	стр_н.Вставить("Имя","img");
	стр_н.Вставить("Синоним","img - картинка");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);
	
	// li
	стр_н = новый Структура;
	стр_н.Вставить("Имя","li");
	стр_н.Вставить("Синоним","li - элент списка");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);
	
	// td
	стр_н = новый Структура;
	стр_н.Вставить("Имя","td");
	стр_н.Вставить("Синоним","td - ячейка таблицы");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);
	
	// другой
	стр_н = новый Структура;
	стр_н.Вставить("Имя","");
	стр_н.Вставить("Синоним","произвольный");
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив.Добавить(стр_н);
		
	Возврат ДоступныеЭлементыТестируемогоИнтерфейсаМассив;
	
КонецФункции

// Функция - получить массив структур серьезности дефектов
// 
// Возвращаемое значение:
//  массив - список серьезности значений
//
Функция мСценРедактор_ПолучитьМассивСтруктурСерьезностиДефектов()
	
	СерьезностьМассив = новый Массив;
	
	// Блокирующая
	стр_н = новый Структура;
	стр_н.Вставить("Severity","Блокирующая");
	стр_н.Вставить("Синоним","Блокирующая");
	СерьезностьМассив.Добавить(стр_н);
	
	// Критическая
	стр_н = новый Структура;
	стр_н.Вставить("Severity","Критическая");
	стр_н.Вставить("Синоним","Критическая");
	СерьезностьМассив.Добавить(стр_н);
	
	// Значительная
	стр_н = новый Структура;
	стр_н.Вставить("Severity","Значительная");
	стр_н.Вставить("Синоним","Значительная");
	СерьезностьМассив.Добавить(стр_н);
	
	// Незначительная 
	стр_н = новый Структура;
	стр_н.Вставить("Severity","Незначительная");
	стр_н.Вставить("Синоним","Незначительная");
	СерьезностьМассив.Добавить(стр_н);
	
	// Тривиальная 
	стр_н = новый Структура;
	стр_н.Вставить("Severity","Тривиальная");
	стр_н.Вставить("Синоним","Тривиальная");
	СерьезностьМассив.Добавить(стр_н);
	
	Возврат СерьезностьМассив;
	
КонецФункции

// Функция - получить массив структур серьезности дефектов
// 
// Возвращаемое значение:
//  массив - список серьезности значений
//
Функция мСценРедактор_ПолучитьМассивСтруктурAPI()
	
	СерьезностьМассив = новый Массив;
	
	// 1C
	стр_н = новый Структура;
	стр_н.Вставить("API","1cClientApp");
	стр_н.Вставить("Синоним","1C Automation UI");
	СерьезностьМассив.Добавить(стр_н);
	
	// Automation UI
	стр_н = новый Структура;
	стр_н.Вставить("API","AutomationUI");
	стр_н.Вставить("Синоним","Automation UI");
	СерьезностьМассив.Добавить(стр_н);
	
	// Selenium
	стр_н = новый Структура;
	стр_н.Вставить("API","Selenium");
	стр_н.Вставить("Синоним","Selenium");
	СерьезностьМассив.Добавить(стр_н);
	

	
	Возврат СерьезностьМассив;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура мСценрРедактор_ПередатьИзмененияТаблицыСвойствВДеревоСценария()
	
	Перем стр, Узел, СтароеЗначение;
	
	Узел = Неопределено;
	ДействиеСтароеЗначение = Неопределено;
	
	// Найдем Узел дерева
	Для каждого стр из ТаблицаСвойства Цикл
		Если стр.Свойство="ИдентификаторУзелаДерева" Тогда
			Если стр.Значение<>Неопределено Тогда
				Узел = ДеревоСценария.НайтиПоИдентификатору(стр.Значение);
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Изменим значение в Узле дерева
	Если Узел<>Неопределено Тогда	
		Для каждого стр из ТаблицаСвойства Цикл
			Если стр.Свойство<>"ИдентификаторУзелаДерева" Тогда
				Если стр.Свойство="Действие" Тогда
					ДействиеСтароеЗначение = Узел[стр.Свойство];
				КонецЕсли;
				Узел[стр.Свойство]=стр.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Выполним изменения для текущего элемента или элементов дерева в зависимости от изменений
	Если Узел<>Неопределено Тогда	
		// если сбрасываем готовый блок
		Если ДействиеСтароеЗначение="ГотовыйБлокШагов" И Узел.Действие = "Комментарий" Тогда
			Узел.ЭтоБлок = Ложь;
			ПройтиПоУзлуУстновкаЭлементаВниз(Узел,"ЭтоБлок",Ложь);
		ИначеЕсли Узел.Действие = "ГотовыйБлокШагов" Тогда
			Узел.ЭтоБлок = Истина;
			ПройтиПоУзлуУстновкаЭлементаВниз(Узел,"ЭтоБлок",Истина);
			// перегрузим блок?
			Сообщить("Перегрузка/сохранение измений блока не поддерживается в текущей версии. Сохраните и откройте сценарий снова!");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура мСценРедактор_ИзменитьСписокВыбораПриИзмененииСтроки(Элемент,Знач ТипПоля = "")
	
	ДоступныйСписокВыбора = Неопределено;
	ИмяПоляЗначения = "";
	
	Элемент.СписокВыбора.Очистить();
	
	Если ТипПоля="Действие" Тогда
		
		ДоступныйСписокВыбора = мСценРедактор_ПолучитьМассивСтруктурДоступныхДействий();
		ИмяПоляЗначения = "Действие";
		
	ИначеЕсли ТипПоля="Команда" Тогда		
	
		Если Объект.ИспользуемыйAPI = ""
				ИЛИ Объект.ИспользуемыйAPI = "1cClientApp" Тогда
			ДоступныйСписокВыбора = мСценРедактор_ПолучитьМассивСтруктурДоступныхКоманд();
		ИначеЕсли Объект.ИспользуемыйAPI = "AutomationUI" Тогда
			ДоступныйСписокВыбора = мСценРедактор_ПолучитьМассивСтруктурДоступныхКомандAutomationUI();
		ИначеЕсли Объект.ИспользуемыйAPI = "Selenium" Тогда
			ДоступныйСписокВыбора = мСценРедактор_ПолучитьМассивСтруктурДоступныхКомандSelenium();
		КонецЕсли;
		ИмяПоляЗначения = "Команда";
			
	ИначеЕсли ТипПоля="ТипОбъекта" Тогда

		Если Объект.ИспользуемыйAPI = ""
				ИЛИ Объект.ИспользуемыйAPI = "1cClientApp" Тогда
			ДоступныйСписокВыбора = мСценРедактор_ПолучитьМассивСтруктурТиповОбъектовТестируемогоПриложения();
		ИначеЕсли Объект.ИспользуемыйAPI = "AutomationUI" Тогда
			ДоступныйСписокВыбора = мСценРедактор_ПолучитьМассивСтруктурТиповОбъектовТестируемогоПриложенияAutomationUI();
		ИначеЕсли Объект.ИспользуемыйAPI = "Selenium" Тогда
			ДоступныйСписокВыбора = мСценРедактор_ПолучитьМассивСтруктурТиповОбъектовТестируемогоПриложенияSelenium();
		КонецЕсли;
		ИмяПоляЗначения = "Имя";
		
	ИначеЕсли ТипПоля="Severity" Тогда
		
		ДоступныйСписокВыбора = мСценРедактор_ПолучитьМассивСтруктурСерьезностиДефектов();
		ИмяПоляЗначения = "Severity";
		
	ИначеЕсли ТипПоля="API" Тогда
		ДоступныйСписокВыбора = мСценРедактор_ПолучитьМассивСтруктурAPI();
		ИмяПоляЗначения = "API";
	КонецЕсли;
	
	Если НЕ ДоступныйСписокВыбора=Неопределено Тогда
		Для каждого стр из ДоступныйСписокВыбора Цикл
			Элемент.СписокВыбора.Добавить(стр[ИмяПоляЗначения],стр.Синоним);
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура мСценРедактор_УстановитьДействие(ИмяЭлемента,ИмяСобытия,Действие)
	Если Элементы[ИмяЭлемента].ПолучитьДействие(ИмяСобытия)<>Действие Тогда
		Элементы[ИмяЭлемента].УстановитьДействие(ИмяСобытия,Действие);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура мСценРедактор_ИзменитьВидимостьДоступностьТаблицыСвойств(ТекущиеДанные)
	
	Действие = "";
	Команда = "";
	API = "";
	
	Если ТекущиеДанные<>Неопределено Тогда
		Действие = ТекущиеДанные.Действие;
		Команда = ТекущиеДанные.Команда;
		API = ТекущиеДанные.API;
	КонецЕсли;
	
	ДоступныеСвойстваМассив = мСценРедактор_ПолучитьСписокСвойствДляДействияКоманды(Действие,Команда,API);
	
	СоответсвиеДляПоиска = новый Соответствие;
	
	Для каждого стр из ДоступныеСвойстваМассив Цикл
		СоответсвиеДляПоиска.Вставить(стр.Свойство,стр);
	КонецЦикла;
	
	Для каждого стр из ТаблицаСвойства Цикл
		стр.Видимость = СоответсвиеДляПоиска.Получить(стр.Свойство).Видимость;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура мСценРедактор_ЗаполнитьКнопкиПоУмолчанию()
	
	
	// ********************************
	// ДОСТУПНЫЕ ДЕЙСТВИЯ
	
	ДоступныеДействияМассив = мСценРедактор_ПолучитьМассивСтруктурДоступныхДействий();
	
	
	// ********************************
	// ДОСТУПНЫЕ КОМАНДЫ
	
	ДоступныеКомандыМассив = мСценРедактор_ПолучитьМассивСтруктурДоступныхКоманд();
	
	
	// ********************************
	// ДОСТУПНЫЕ ЭЛЕМЕНТЫ ТЕСТИРУЕМОГО ИНТЕРФЕЙСА
	
	ДоступныеЭлементыТестируемогоИнтерфейсаМассив = мСценРедактор_ПолучитьМассивСтруктурДоступныхТиповОбъектовТестируемогоПриложения();
	
	
	// ********************************
	// ДОСТУПНЫЕ СВОЙСТВА
	
	ДоступныеСвойстваМассив = мСценРедактор_ПолучитьМассивСтруктурДоступныхСвойств();
	
	
	// ********************************
	// ПАНЕЛЬ ИНСТРУМЕНТОВ
	
	#Область ЗаполнениеТаблицПанелиИнстументов
	
	Для каждого стр из ДоступныеДействияМассив Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДействия.Добавить(),стр);
	КонецЦикла;
	
	Для каждого стр из ДоступныеКомандыМассив Цикл  
		ЗаполнитьЗначенияСвойств(ТаблицаКоманды.Добавить(),стр);
	КонецЦикла;
	
	Для каждого стр из ДоступныеСвойстваМассив Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаСвойства.Добавить(),стр);
	КонецЦикла;
	
	Для каждого стр из ДоступныеЭлементыТестируемогоИнтерфейсаМассив Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаОбъектыИнтерфейса.Добавить(),стр);
	КонецЦикла;    	
	
	
	
	#КонецОбласти
	
	// ********************************
	// ДЕРЕВО СЦЕНАРИЕВ
	
	
	
	
	// ********************************
	// ДЕРЕВО СчетчикПеременных
	
	СчетчикПеременных = новый Структура("НайтиОкно,НайтиОсновноеОкно,НайтиФорму,НайтиОбъект,ПолучитьКомандныйИнтерфейс,Команда",1,1,1,1,1,1,1);
	
	Элементы.ПараметрыСценарияТипДанных.СписокВыбора.Очистить();
	Элементы.ПараметрыСценарияТипДанных.СписокВыбора.Добавить("Строка","Строка");
	Элементы.ПараметрыСценарияТипДанных.СписокВыбора.Добавить("Число","Число");
	Элементы.ПараметрыСценарияТипДанных.СписокВыбора.Добавить("Булево","Булево");
	Элементы.ПараметрыСценарияТипДанных.СписокВыбора.Добавить("Дата","Дата");
	Элементы.ПараметрыСценарияТипДанных.СписокВыбора.Добавить("СтруктураПодключения","СтруктураПодключения");
	
	// изначально свойства менять нельзя
	Элементы.ТаблицаСвойстваЗначение.ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура мСценРедактор_ИзменениеТаблицыСвойств(Знач ТекущиеДанные)
	
	Перем стр;
	
	Для каждого стр из ТаблицаСвойства Цикл
		Если стр.Свойство="ИдентификаторУзелаДерева" Тогда
			стр.Значение = ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			стр.Значение = ТекущиеДанные[стр.Свойство];
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура мСценРедактор_ДеревоСценарияПриНачалеРедактированияФрагмент(Знач Элемент)
	
	Перем ТекущиеДействие;
	
	ТекущиеДействие = Элементы.ТаблицаДействия.ТекущиеДанные;
	ТекущиеДанные = Элемент.ТекущиеДанные; 
	ТекущаяКоманда = Элементы.ТаблицаКоманды.ТекущиеДанные;
	ТекущийГотовйШаг = Элементы.ДеревоДоступныеГотовыеШаги.ТекущиеДанные;
	ТекущийОбъектИнтерфейса = Элементы.ТаблицаОбъектыИнтерфейса.ТекущиеДанные;
	мСценРедактор_ДобавлениеНовогоУзлаВДеревоСценария(ТекущиеДанные, ТекущиеДействие,  ТекущаяКоманда, ТекущийОбъектИнтерфейса,ТекущийГотовйШаг);
	ТекущиеДанные.ДанныеКартинки = Модуль_ПреобразоватьЖурналДействийВДеревоСценария.мСцен_ПолучитьДанныеКартинки_НаКлиенте(новый Структура("Действие,Команда,ТипОбъекта",ТекущиеДанные.Действие,ТекущиеДанные.Команда,ТекущиеДанные.ТипОбъекта));

КонецПроцедуры

&НаКлиенте
Процедура мСценРедактор_ДобавлениеНовогоУзлаВДеревоСценария(Знач ТекущиеДанные, Знач ТекущиеДействие, Знач ТекущаяКоманда, Знач ТекущийОбъектИнтерфейса, Знач ТекущийГотовйШаг)
	
	Если ТекущиеДанные<>Неопределено Тогда
		Если ТекущиеДействие<>Неопределено Тогда
			ТекущиеДанные.Действие = ТекущиеДействие.Действие;
			ТекущиеДанные.API = Объект.ИспользуемыйAPI;
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Наименование) Тогда
				ТекущиеДанные.Наименование = ТекущиеДействие.Синоним;	
			КонецЕсли; 	
			Если ТекущиеДанные.Действие = "Команда" Тогда
				Если ТекущаяКоманда<>Неопределено Тогда
					ТекущиеДанные.Команда = ТекущаяКоманда.Команда;
					ТекущиеДанные.Наименование = ТекущиеДействие.Синоним+" : "+ТекущиеДанные.Команда;	
				КонецЕсли;
			КонецЕсли;
			Если ТекущиеДанные.Действие = "НайтиОбъект" Тогда
				Если ТекущийОбъектИнтерфейса<>Неопределено Тогда
					ТекущиеДанные.ТипОбъекта = ТекущийОбъектИнтерфейса.Имя;
				КонецЕсли;				
			КонецЕсли;
			Если ТекущиеДанные.Действие = "ГотовыйБлокШагов" Тогда
				Если ТекущийГотовйШаг<>Неопределено Тогда
					ТекущиеДанные.ПутьБлокШагов = ТекущийГотовйШаг.ПутьКФайлу;
					ТекущиеДанные.Library = ТекущийГотовйШаг.Library;
					ТекущиеДанные.Наименование = "Готовый блок шагов """+ТекущийГотовйШаг.Наименование+"""";
					ТекущиеДанные.UID = Строка(новый UUID());
					ТекущиеДанные.ЭтоБлок = Истина;
					
					// подгружаем файл блока шагов
					Если НЕ ЗагрузитьСценарийФорматXML(ТекущиеДанные.ПутьБлокШагов,Истина) = Ложь Тогда
						мСценСкрипт_РазвернутьТаблицуВДерево(Истина,ТекущиеДанные);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			Если ТекущиеДанные.Действие = "ТестовыйСлучай" Тогда
				ТекущиеДанные.Severity = "Значительная";
			КонецЕсли;
		КонецЕсли;
		
		ТипОбъектаРодителя = Неопределено;
		ИмяПеременнойРодителя = Неопределено;
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		Если Родитель<>Неопределено Тогда
			ТипОбъектаРодителя = Родитель.ТипОбъекта;
			ИмяПеременнойРодителя = Родитель.ИмяПеременной;
		КонецЕсли;
		мСценРедактор_ПолучитьТипОбъектаПоДействию(ТекущиеДанные.Действие, ТипОбъектаРодителя, ТекущиеДанные.ТипОбъекта);
		ТекущиеДанные.ИмяПеременной = мСценРедактор_ПолучитьИмяПеременной(ТекущиеДанные.Действие, ИмяПеременнойРодителя, ТекущиеДанные.ТипОбъекта);
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.UID) Тогда
			ТекущиеДанные.UID = Строка(новый UUID());	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура мСценРедактор_ПолучитьТипОбъектаПоДействию(Знач Действие, Знач ТипОбъектаРодителя, ТипОбъекта)
	
	Если Действие = "НайтиОкно" Тогда
		ТипОбъекта = "ClientApplicationWindow";
	ИначеЕсли Действие = "НайтиОсновноеОкно" Тогда
		ТипОбъекта = "ClientApplicationWindow";
	ИначеЕсли Действие = "НайтиФорму" Тогда
		ТипОбъекта = "Form";
	ИначеЕсли Действие = "ПолучитьКомандныйИнтерфейс" Тогда
		ТипОбъекта = "CommandInterface";
	ИначеЕсли Действие = "Команда" Тогда  // тип объекта должен быть как у родителя, или ставьте вручную
		ТипОбъекта = ТипОбъектаРодителя;
	ИначеЕсли Действие = "" Тогда
		ТипОбъекта = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция мСценРедактор_ПолучитьИмяПеременной(Знач Действие, Знач ИмяПеременнойРодителя="", Знач ТипОбъекта)
	ИмяПеременной = "";
	
	Если Действие = "СравнитьСПредставлениемДанных" ИЛИ Действие = "ПолучитьПредставлениеДанных" Тогда
		ИмяПеременной = ИмяПеременнойРодителя;
		Возврат ИмяПеременной; 
	КонецЕсли;		
	
	Если НЕ СчетчикПеременных.Свойство(Действие) Тогда 
		Возврат ИмяПеременной;
	КонецЕсли;
	
	ПоследнийНомер = СчетчикПеременных[Действие];
	СчетчикПеременных[Действие] = СчетчикПеременных[Действие] + 1;
	
	Если ИмяПеременнойРодителя=Неопределено Тогда
		ИмяПеременнойРодителя = "";
	КонецЕсли;
	
	Если Действие="Команда" Тогда
		ИмяПеременной = ИмяПеременнойРодителя;
	Иначе
		ИмяПеременной = ИмяПеременнойРодителя+ТипОбъекта+Строка(ПоследнийНомер);
	КонецЕсли;
	
	Возврат ИмяПеременной;
КонецФункции

&НаКлиенте
Процедура мСценРедактор_ПроставитьПродолжатьПоОшибкеДляПодчиненныхПоРодителю(Команда)
	ТекущиеДанные = Элементы.ДеревоСценария.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПройтиПоУзлуУстновкаЭлементаВниз(ТекущиеДанные,"ПродолжитьПриОшибке",ТекущиеДанные.ПродолжитьПриОшибке);
КонецПроцедуры


#КонецОбласти


#Область КопированиеВБуферВставкаПеремещениеУзлаПоДереву

&НаКлиенте
Процедура мРедактор_Добавить(Команда)// пока не используем

	
	ТекущиеДанные = Элементы.ДеревоСценария.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда
		стр_н = ДеревоСценария.ПолучитьЭлементы().Добавить();
	Иначе
		стр_н = ТекущиеДанные.ПолучитьЭлементы().Добавить();
	КонецЕсли;
	
	Элементы.ДеревоСценария.Развернуть(ТекущиеДанные.ПолучитьИдентификатор());
	ДеревоСценарияПередНачаломДобавления(Элементы.ДеревоСценария,Ложь,Ложь,Неопределено,Неопределено,Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура мРедактор_ПереместитьВниз(Команда)
	
	ТекущиеДанные = Элементы.ДеревоСценария.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьИзменениеВТаблицуИзменений(МассивИзменений,"Перемещаем узел вниз");
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	
	// установим этот элемент следом за родителем
	Если Родитель=Неопределено Тогда
		Индекс = ДеревоСценария.ПолучитьЭлементы().Индекс(ТекущиеДанные);
		Если Индекс-ДеревоСценария.ПолучитьЭлементы().Индекс(ДеревоСценария.ПолучитьЭлементы()[0])
			< ДеревоСценария.ПолучитьЭлементы().Количество()-1 тогда
			ДеревоСценария.ПолучитьЭлементы().Сдвинуть(Индекс,1);
		Иначе
			ДеревоСценария.ПолучитьЭлементы().Сдвинуть(Индекс,-(ДеревоСценария.ПолучитьЭлементы().Количество()-1));
		КонецЕсли; 		
	Иначе
		Индекс = ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Индекс(ТекущиеДанные);
		Если Индекс-ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Индекс(ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0])
			< ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество()-1 тогда
			ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Сдвинуть(Индекс,1);
		Иначе
			ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Сдвинуть(Индекс,-(ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество()-1));
		КонецЕсли;  		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура мРедактор_ПереместитьВверх(Команда)
	
	ТекущиеДанные = Элементы.ДеревоСценария.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьИзменениеВТаблицуИзменений(МассивИзменений,"Перемещаем узел вверх");
	
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	
	// установим этот элемент следом за родителем
	Если Родитель=Неопределено Тогда
		Индекс = ДеревоСценария.ПолучитьЭлементы().Индекс(ТекущиеДанные);
		Если Индекс-ДеревоСценария.ПолучитьЭлементы().Индекс(ДеревоСценария.ПолучитьЭлементы()[0])>0 тогда
			ДеревоСценария.ПолучитьЭлементы().Сдвинуть(Индекс,-1);
		Иначе
			ДеревоСценария.ПолучитьЭлементы().Сдвинуть(Индекс,(ДеревоСценария.ПолучитьЭлементы().Количество()-1));
		КонецЕсли; 		
	Иначе
		Индекс = ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Индекс(ТекущиеДанные);
		Если Индекс-ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Индекс(ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0])>0 тогда
			ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Сдвинуть(Индекс,-1);
		Иначе
			ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Сдвинуть(Индекс,(ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество()-1));
		КонецЕсли;  		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура мРедактор_Отмена(Команда)
	
	// шаг назад )
	ВернутьсяПоТаблицеИзмененийНазад(МассивИзменений);
	
КонецПроцедуры

&НаКлиенте
Процедура мСценСкрипт_СкопироватьВБуфер(Команда)
	
	ТекущиеДанные = Элементы.ДеревоСценария.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// очищаем буффер
	БуферОбмена.ПолучитьЭлементы().Очистить();
	// копируем данные
	мСценРедактор_СкопироватьСтрокуДерева(БуферОбмена,Неопределено,ТекущиеДанные,Ложь);
	// устанавливаем доступность
	Элементы.ДеревоСценариямСценСкрипт_ВставитьИзБуфера.Доступность = Истина;
	// генерим новый UID
	мСценРедактор_ПерегенерироватьUIDСтрокДерева(БуферОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура мСценСкрипт_ВырезатьВБуфер(Команда)

	СохранитьИзменениеВТаблицуИзменений(МассивИзменений,"Вырезаем в буфер");
	
	ТекущиеДанные = Элементы.ДеревоСценария.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// очищаем буффер
	БуферОбмена.ПолучитьЭлементы().Очистить();
	// копируем данные
	мСценРедактор_СкопироватьСтрокуДерева(БуферОбмена,Неопределено,ТекущиеДанные,Ложь);
	// устанавливаем доступность
	Элементы.ДеревоСценариямСценСкрипт_ВставитьИзБуфера.Доступность = Истина;
	// генерим новый UID
	мСценРедактор_ПерегенерироватьUIDСтрокДерева(БуферОбмена);
	// удалим элемент
	Если ТекущиеДанные.ПолучитьРодителя()=Неопределено Тогда
		ДеревоСценария.ПолучитьЭлементы().Удалить(ДеревоСценария.ПолучитьЭлементы().Индекс(ТекущиеДанные));
	Иначе
		ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Индекс(ТекущиеДанные));
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура мСценСкрипт_ВставитьИзБуфера(Команда)
	
	СохранитьИзменениеВТаблицуИзменений(МассивИзменений,"Вставляем из буфера");
	
	ТекущиеДанные = Элементы.ДеревоСценария.ТекущиеДанные;
	
	Если БуферОбмена.ПолучитьЭлементы().Количество()>0 Тогда
		
		// нужно не забыть генерить новый идентификаторы при вставке !!!!
		// вставляем последний элемент
		Если БуферОбмена.ПолучитьЭлементы().Количество()=1 Тогда
			Источник = БуферОбмена.ПолучитьЭлементы()[БуферОбмена.ПолучитьЭлементы().Количество()-1];
			НоваяСтрока = мСценРедактор_СкопироватьСтрокуДерева(ДеревоСценария,ТекущиеДанные,Источник,Ложь);
		Иначе
			Для каждого Узел из БуферОбмена.ПолучитьЭлементы() Цикл
				НоваяСтрока = мСценРедактор_СкопироватьСтрокуДерева(ДеревоСценария,ТекущиеДанные,Узел,Ложь);
			КонецЦикла;
		КонецЕсли;
		
		Если НоваяСтрока<>Неопределено Тогда
			Элементы.ДеревоСценария.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура мСценСкрипт_ОчиститьСценарий(Команда)
	СохранитьИзменениеВТаблицуИзменений(МассивИзменений,"Очистить сценарий");
	ДеревоСценария.ПолучитьЭлементы().Очистить();
	ПараметрыСценария.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура мСценСкрипт_ПоднятьУзелВверх(Команда)
	
	СохранитьИзменениеВТаблицуИзменений(МассивИзменений,"Поднимаем узел вверх");
	
	ТекущиеДанные = Элементы.ДеревоСценария.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущийУзел = ТекущиеДанные.ПолучитьРодителя();
	
	Если ПредыдущийУзел=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Действие<>"ГотовыйБлокШагов" И ТекущиеДанные.ЭтоБлок=Истина Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ТекущиеДанные.ПолучитьРодителя().ПолучитьРодителя();
	
	НоваяСтрока = мСценРедактор_СкопироватьСтрокуДерева(ДеревоСценария,ТекущиеДанные.ПолучитьРодителя().ПолучитьРодителя(),ТекущиеДанные, Истина);
	
	Если НоваяСтрока<>Неопределено Тогда
		Элементы.ДеревоСценария.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	// установим этот элемент следом за родителем
	Если Родитель=Неопределено Тогда
		МассивДетей = ДеревоСценария.ПолучитьЭлементы();
		Индекс = ДеревоСценария.ПолучитьЭлементы().Индекс(НоваяСтрока);
		ИндексП = ДеревоСценария.ПолучитьЭлементы().Индекс(ПредыдущийУзел);
		Если Индекс>0 И ИндексП>=0 тогда
			ДеревоСценария.ПолучитьЭлементы().Сдвинуть(Индекс,-Индекс+ИндексП+1);
		КонецЕсли; 		
	Иначе
		МассивДетей = НоваяСтрока.ПолучитьРодителя().ПолучитьЭлементы();
		Индекс = НоваяСтрока.ПолучитьРодителя().ПолучитьЭлементы().Индекс(НоваяСтрока);
		ИндексП = НоваяСтрока.ПолучитьРодителя().ПолучитьЭлементы().Индекс(ПредыдущийУзел);
		Если Индекс>0 И ИндексП>=0 тогда
			НоваяСтрока.ПолучитьРодителя().ПолучитьЭлементы().Сдвинуть(Индекс,-Индекс+ИндексП+1);
		КонецЕсли;  		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура мСценСкрипт_РазвернутьУзелДерева(Команда)
	ТекущиеДанные = Элементы.ДеревоСценария.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.ДеревоСценария.Развернуть(ТекущиеДанные.ПолучитьИдентификатор(),Истина);
КонецПроцедуры

&НаКлиенте
Функция мСценРедактор_СкопироватьСтрокуДерева(РеквизитДерево, Приемник, Источник, УдалятьИзИсточника=Истина)

    Перем НоваяСтрока, ОбратныйИндекс, КолПодчиненныхСтрок;

    // Источник может быть уже перенесен
    // Это происходит если выделены несколько элементов
    // одной и той же ветви дерева на разных уровнях иерархии
    Если Источник = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    Если Приемник = Неопределено Тогда
        // Добавляем в корень
        НоваяСтрока = РеквизитДерево.ПолучитьЭлементы().Добавить();
    Иначе
        НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
    КонецЕсли;

    ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник,,"UID");
	НоваяСтрока.UID = Строка(новый UUID());

    КолПодчиненныхСтрок = Источник.ПолучитьЭлементы().Количество();
	// копирование строки
	Если УдалятьИзИсточника=Ложь Тогда
		//Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
		Для ОбратныйИндекс = 0 По КолПодчиненныхСтрок-1 Цикл
			//ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()[КолПодчиненныхСтрок - ОбратныйИндекс];
			ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()[ОбратныйИндекс];
			мСценРедактор_СкопироватьСтрокуДерева(РеквизитДерево, НоваяСтрока, ПодчиненнаяСтрока, УдалятьИзИсточника);
		КонецЦикла;
	Иначе // вырезаем строку )
		//Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
		Для ОбратныйИндекс = 0 По КолПодчиненныхСтрок-1 Цикл
			//ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()[КолПодчиненныхСтрок - ОбратныйИндекс];
			ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()[0];
			мСценРедактор_СкопироватьСтрокуДерева(РеквизитДерево, НоваяСтрока, ПодчиненнаяСтрока, УдалятьИзИсточника);
		КонецЦикла;
	КонецЕсли;

	Если УдалятьИзИсточника=Истина Тогда
		Если Источник.ПолучитьРодителя() = Неопределено Тогда
			РеквизитДерево.ПолучитьЭлементы().Удалить(Источник);
		Иначе
			Источник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Источник);
		КонецЕсли;
	КонецЕсли;

    Возврат НоваяСтрока;

КонецФункции

&НаСервере
Функция мСценРедактор_СкопироватьСтрокуДереваСервер(РеквизитДерево, Приемник, Источник, УдалятьИзИсточника=Истина)

    Перем НоваяСтрока, ОбратныйИндекс, КолПодчиненныхСтрок;

    // Источник может быть уже перенесен
    // Это происходит если выделены несколько элементов
    // одной и той же ветви дерева на разных уровнях иерархии
    Если Источник = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;

    Если Приемник = Неопределено Тогда
        // Добавляем в корень
        НоваяСтрока = РеквизитДерево.ПолучитьЭлементы().Добавить();
    Иначе
        НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
    КонецЕсли;

    ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);

    КолПодчиненныхСтрок = Источник.ПолучитьЭлементы().Количество();
    //Для ОбратныйИндекс = 1 По КолПодчиненныхСтрок Цикл
	Для ОбратныйИндекс = 0 По КолПодчиненныхСтрок-1 Цикл
        //ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()[КолПодчиненныхСтрок - ОбратныйИндекс];
		ПодчиненнаяСтрока = Источник.ПолучитьЭлементы()[0];
        мСценРедактор_СкопироватьСтрокуДереваСервер(РеквизитДерево, НоваяСтрока, ПодчиненнаяСтрока, УдалятьИзИсточника);
    КонецЦикла;

	Если УдалятьИзИсточника=Истина Тогда
		Если Источник.ПолучитьРодителя() = Неопределено Тогда
			РеквизитДерево.ПолучитьЭлементы().Удалить(Источник);
		Иначе
			Источник.ПолучитьРодителя().ПолучитьЭлементы().Удалить(Источник);
		КонецЕсли;
	КонецЕсли;

    Возврат НоваяСтрока;

КонецФункции

&НаКлиенте
Функция мСценРедактор_ПерегенерироватьUIDСтрокДерева(УзелРодитель)
	
	// Идем далее по узлу
	Узлы = УзелРодитель.ПолучитьЭлементы();
	
	Для каждого Узел из Узлы Цикл
		Узел.UID = строка(новый UUID());
		мСценРедактор_ПерегенерироватьUIDСтрокДерева(Узел);
	КонецЦикла;
	
	
КонецФункции

#КонецОбласти

#Область РаботаПакетСценариев

&НаКлиенте
Процедура мСценПакет_ЗагрузитьИзКаталога(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПутьККаталогуНаборовСценариев) Тогда
		// Диалог указания каталога
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
		Диалог.Заголовок = "Выберите кталог со сценариями"; 
		Диалог.МножественныйВыбор = Ложь; 
		мПараметры = новый Структура("ИмяРеквизита","ПутьККаталогуНаборовСценариев");
		ВыборКаталогаСценариевТестирования = новый ОписаниеОповещения("мСценПакет_ВыборКаталогаСценариевТестирования",ЭтотОбъект,мПараметры);
		Диалог.Показать(ВыборКаталогаСценариевТестирования);
	Иначе
		мПараметры = новый Структура("ИмяРеквизита,ИмяДерева,ИдентификаторУзла","ПутьККаталогуНаборовСценариев","ДеревоНаборСценариев");
		НачатьПоискФайлов(Новый ОписаниеОповещения("мСценПакет_ВыборКаталогаСценариевТестированияЗавершение", ЭтаФорма, мПараметры), Объект.ПутьККаталогуНаборовСценариев,"*.xml",Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура мСценПакет_ВыборКаталогаСценариевТестирования(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() > 0 Тогда
		
		ИмяРеквизита= "";
		Если ДополнительныеПараметры.Свойство("ИмяРеквизита",ИмяРеквизита) Тогда
			
			Объект[ИмяРеквизита] = ВыбранныеФайлы[0];	
			мПараметры = новый Структура("ИмяРеквизита,ИмяДерева,ИдентификаторУзла","ПутьККаталогуНаборовСценариев","ДеревоНаборСценариев");
			ЗаполнитьЗначенияСвойств(мПараметры,ДополнительныеПараметры);
			НачатьПоискФайлов(Новый ОписаниеОповещения("мСценПакет_ВыборКаталогаСценариевТестированияЗавершение", ЭтаФорма, мПараметры), Объект[ИмяРеквизита],"*.xml",Истина);
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура мСценПакет_ВыборКаталогаСценариевТестированияЗавершение(НайденныеФайлы, ДополнительныеПараметры1) Экспорт
	
	//мПараметры = новый Структура("ИмяРеквизита,ИмяДерева,ИдентификаторУзла","ПутьККаталогуНаборовСценариев","ДеревоНаборСценариев");
	ИмяРеквизита = "";
	ИмяДерева = "";
	ИдентификаторУзла = Неопределено;
	Если ДополнительныеПараметры1.Свойство("ИмяРеквизита",ИмяРеквизита)=Ложь ИЛИ ДополнительныеПараметры1.Свойство("ИмяДерева",ИмяДерева)=Ложь Тогда
		Сообщить("Не переданы важные параметры при вызове процедуры поиска файлов. Отказ!");
		Возврат;
	КонецЕсли;   
	
	ДополнительныеПараметры1.Свойство("ИдентификаторУзла",ИдентификаторУзла);
	
	МассивСоотвествийУзловДерева = новый Соответствие;
	
	МассивДанных = новый Массив;
	
	Для каждого стр из НайденныеФайлы Цикл
		
		ОтносительныйПутьОтКорня = СтрЗаменить(стр.Путь,Объект[ИмяРеквизита],"");
		ОтносительныйПутьОтКорня = СтрЗаменить("\"+ОтносительныйПутьОтКорня,"\\","\");
		Если НЕ ЗначениеЗаполнено(ОтносительныйПутьОтКорня) Тогда
			ОтносительныйПутьОтКорня = "\";
		КонецЕсли;
		
		// добавляем файл
		мСтруктура = новый Структура("Путь,Наименование,ПутьКФайлу,ДанныеКартинки,ЭтоГруппа,Родитель");
		мСтруктура.Наименование 	= стр.ИмяБезРасширения;
		мСтруктура.Путь 			= стр.Путь;
		мСтруктура.ПутьКФайлу 		= стр.ПолноеИмя;
		мСтруктура.ДанныеКартинки 	= 1;		
		мСтруктура.ЭтоГруппа 		= Ложь;
		мСтруктура.Родитель			= ОтносительныйПутьОтКорня;
		МассивДанных.Добавить(мСтруктура);
		// добавляем каталог
		МассивПапок = СтрРазделить(ОтносительныйПутьОтКорня,"\",Ложь);
		Родитель = "\";
		Для каждого папка из МассивПапок Цикл
			мСтруктура = новый Структура("Путь,Наименование,ПутьКФайлу,ДанныеКартинки,ЭтоГруппа,Родитель");
			мСтруктура.Наименование 	= папка;
			мСтруктура.Путь 			= Родитель + папка + "\";
			мСтруктура.ПутьКФайлу 		= стр.Путь;//стр.Путь+Прав(мСтруктура.Путь,стрДлина(мСтруктура.Путь)-1);
			мСтруктура.ДанныеКартинки 	= 2;		
			мСтруктура.ЭтоГруппа 		= Истина;
			мСтруктура.Родитель			= Родитель;
			Для каждого стр_пербор из МассивДанных Цикл
				Если стр_пербор.Путь=мСтруктура.Путь Тогда
					мСтруктура = Неопределено;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если мСтруктура<>Неопределено Тогда
				МассивДанных.Добавить(мСтруктура);
			КонецЕсли;
			Родитель = Родитель + папка + "\";
		КонецЦикла;
	КонецЦикла;
	
	//
	ПутьКорня = "\";
	СоответствиеМассивовДетей = новый Соответствие;
	МассивКорневыхЭлементов = новый Массив;
	
	Для каждого стр из МассивДанных Цикл
		
		Если стр.Родитель=ПутьКорня Тогда
			МассивКорневыхЭлементов.Добавить(стр);
		КонецЕсли;
		
		МассивДетей = СоответствиеМассивовДетей.Получить(стр.Родитель);
		
		Если МассивДетей=Неопределено Тогда
			МассивДетей = новый Массив;
			МассивДетей.Добавить(стр);
			СоответствиеМассивовДетей.Вставить(стр.Родитель,МассивДетей);
		Иначе
			МассивДетей.Добавить(стр);
		КонецЕсли;
		
	КонецЦикла;

	Если ИдентификаторУзла=Неопределено Тогда
		Корень = ЭтаФорма[ИмяДерева].ПолучитьЭлементы();
	Иначе
		Корень = ЭтаФорма[ИмяДерева].НайтиПоИдентификатору(ИдентификаторУзла).ПолучитьЭлементы();
		Если НЕ ЗначениеЗаполнено(ЭтаФорма[ИмяДерева].НайтиПоИдентификатору(ИдентификаторУзла).ПутьКФайлу) Тогда
			ЭтаФорма[ИмяДерева].НайтиПоИдентификатору(ИдентификаторУзла).ПутьКФайлу = Объект[ИмяРеквизита];
		КонецЕсли;		
	КонецЕсли;
	
	Корень.Очистить();
	
	Для каждого стр из МассивКорневыхЭлементов Цикл
		Узел = Корень.Добавить();
		Узел.Активность = Истина;
		ЗаполнитьЗначенияСвойств(Узел,стр);
		Если стр.ЭтоГруппа=Истина Тогда
			мСценПакет_ДобавитьУзелВДеревоПакета(Узел,СоответствиеМассивовДетей);
		КонецЕсли;
	КонецЦикла;
	             	
	// запустим набор автотетов
	Если Объект.РежимАвтотест=Истина Тогда
		мСценПакет_ЗапускНаборовАвтотестов();
	КонецЕсли;
	
	// найдем элемент текущего проекта и установим флаг
	Узел = НайтиПервыйЭлементПоВнизПоСовпадению(ДеревоПроектов,"ПутьКФайлу",Объект.ПутьКФайлуСценария);
	Если Узел<>Неопределено Тогда
		Узел.Текущий = Истина;
		Узел.ДанныеКартинки = 5;	 
		Элементы.ДеревоПроектов.ТекущаяСтрока = Узел.ПолучитьИдентификатор();
	КонецЕсли;
	
	// развернем блоки
	Для каждого стр из ДеревоПроектов.ПолучитьЭлементы() Цикл
		Если НЕ Элементы.ДеревоПроектов.Развернут(стр.ПолучитьИдентификатор()) Тогда
			Элементы.ДеревоПроектов.Развернуть(стр.ПолучитьИдентификатор(),Ложь);
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура мСценПакет_ДобавитьУзелВДеревоПакета(УзелРодитель,СоответствиеМассивовДетей) 	
	
	МассивДетей = СоответствиеМассивовДетей.Получить(УзелРодитель.Путь);
	
	Если МассивДетей=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого стр из МассивДетей Цикл
		
		Узел = УзелРодитель.ПолучитьЭлементы().Добавить();
		Попытка
			Узел.Активность = Истина;
		Исключение
		Конецпопытки;
		ЗаполнитьЗначенияСвойств(Узел,стр);
		Если стр.ЭтоГруппа=Истина Тогда
			мСценПакет_ДобавитьУзелВДеревоПакета(Узел,СоответствиеМассивовДетей);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ДеревоПакетСценариевПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПутьККаталогуНаборовСценариевНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Диалог указания каталога
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	Диалог.Заголовок = "Выберите кталог со сценариями"; 
	Диалог.МножественныйВыбор = Ложь; 
	Если ЗначениеЗаполнено(Объект.ПутьККаталогуНаборовСценариев) Тогда
		Диалог.Каталог = ПолучитьКаталогПоПутиФайла(Объект.ПутьККаталогуНаборовСценариев);
	КонецЕсли;	
	мПараметры = новый Структура("ИмяРеквизита","ПутьККаталогуНаборовСценариев");
	ВыборКаталогаСценариевТестирования = новый ОписаниеОповещения("мСценПакет_ВыборКаталогаСценариевТестирования",ЭтотОбъект,мПараметры);
	Диалог.Показать(ВыборКаталогаСценариевТестирования);

КонецПроцедуры

&НаКлиенте
Процедура КаталогДляОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Диалог указания каталога
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	Диалог.Заголовок = "Выберите кталог для обмена"; 
	Диалог.МножественныйВыбор = Ложь; 
	Если ЗначениеЗаполнено(Объект.КаталогДляОбмена) Тогда
		Диалог.Каталог = Объект.КаталогДляОбмена;
	КонецЕсли;	
	Если Диалог.Выбрать() Тогда 
		Объект.КаталогДляОбмена = Диалог.Каталог; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПутьККаталогуНаборовСценариевПриИзменении(Элемент)
	Если Объект.ПутьККаталогуБиблиотекиСценариев=Объект.ПутьККаталогуНаборовСценариев Тогда
		Сообщить("Вы указали такой же каталог, что и для библиотеки сценариев 'Путь каталога блок готовых шагов'.
		|Работа редактора может быть не корректной, выберите другой или правильный каталог!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПутьККаталогуБиблиотекиСценариевПриИзменении(Элемент)
	Если Объект.ПутьККаталогуБиблиотекиСценариев=Объект.ПутьККаталогуНаборовСценариев Тогда
		Сообщить("Вы указали такой же каталог, что и для каталога готовых сценариев 'готовые тесты'.
		|Работа редактора может быть не корректной, выберите другой или правильный каталог!");
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура РедактироватьНаборСценариевПриИзменении(Элемент)
	Элементы.СтраницаПакетСценариев.Видимость = Объект.РедактироватьНаборСценариев;
КонецПроцедуры

&НаКлиенте
Процедура мСценРедактор_ВключитьРедактирование(Команда)
	Объект.РежимРедактированияСценария = Истина;
	Элементы.мСценРедактор_ВключитьРедактирование.Видимость = НЕ Объект.РежимРедактированияСценария;
	Элементы.мСценРедактор_ВыключитьРедактирование.Видимость = Объект.РежимРедактированияСценария; 
КонецПроцедуры

&НаКлиенте
Процедура мСценРедактор_ВыключитьРедактирование(Команда)
	Объект.РежимРедактированияСценария = Ложь;
	Элементы.мСценРедактор_ВключитьРедактирование.Видимость = НЕ Объект.РежимРедактированияСценария;
	Элементы.мСценРедактор_ВыключитьРедактирование.Видимость = Объект.РежимРедактированияСценария;
КонецПроцедуры

&НаКлиенте
Процедура мСценПакет_ВыполнитьПакет(Команда)
	
	мСценПакет_ЗапускНаборовАвтотестов();

КонецПроцедуры

	
&НаКлиенте
Процедура мСценПакет_ПодготовкаКЗапускуЗапускНаборовАвтотестов(ПутьКаталог)
	
	мПараметры = новый Структура("ИмяРеквизита,ИмяДерева,ИдентификаторУзла","ПутьККаталогуНаборовСценариев","ДеревоНаборСценариев");
	НачатьПоискФайлов(Новый ОписаниеОповещения("мСценПакет_ВыборКаталогаСценариевТестированияЗавершение", ЭтаФорма, мПараметры), ПутьКаталог,"*.xml",Истина);

КонецПроцедуры

&НаКлиенте
Процедура мСценПакет_ЗапускНаборовАвтотестов()
	
	НаборТестовЗапущен = Истина;
	
	// пакет выполняется этапно
	ИндексТекущегоТеста = 0;
	
	// генерим свернутую таблицу
	ТаблицаНаборСценариев.Очистить();	
	мСценСкрипт_ПройтисьПоУзлуДобавитьВТаблицу(ДеревоНаборСценариев,ТаблицаНаборСценариев,"Активность",Ложь,Истина);
	
	// путем перезагрузки сценариев
	мСценСкрипт_СделатьШагПоТаблицеНаборовСценариевНачало();
	
КонецПроцедуры


&НаКлиенте
Процедура мСценСкрипт_СделатьШагПоТаблицеНаборовСценариевНачало()
	
	ТекстОшибки = "";
	Если НаборТестовЗапущен=Ложь Тогда
		Возврат;
	КонецЕсли;
	
	// установим время выполнения начало
	Если ИндексТекущегоТеста=0 Тогда
		ВремяНачалаТестаUTC = ТекущаяУниверсальнаяДатаВМиллисекундах();
	КонецЕсли;
	
	// опредляем время на каждом шаге
	
	// возврат завершению шагов
	Если ИндексТекущегоТеста>=ТаблицаНаборСценариев.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	// фокус на набор сценариев
	Элементы.ЖурналПреобразование.ТекущаяСтраница = Элементы.СтраницаПакетСценариев;
	
	// получим индекс дерева 
	ИдентификаторУзелаДерева = ТаблицаНаборСценариев[ИндексТекущегоТеста].ИдентификаторУзелаДерева;
	Узел = ДеревоНаборСценариев.НайтиПоИдентификатору(ИдентификаторУзелаДерева);
	
	Элементы.ДеревоНаборСценариев.Развернуть(ИдентификаторУзелаДерева,Ложь);
	Элементы.ДеревоНаборСценариев.ТекущаяСтрока = ИдентификаторУзелаДерева;
	
	// запуск теста
	Попытка
		
		Если Узел.ЭтоГруппа=Ложь Тогда
			мСценПакет_ПодготовкаЗапускАвтоТеста(Узел.ПутьКФайлу,Объект.ПутьККаталогуОтчетовВыполненияТестов,5);
		Иначе
			мСценСкрипт_СделатьШагПоТаблицеНаборовСценариевЗавершение();
		КонецЕсли;
		
	Исключение
		Сообщить(ОписаниеОшибки());
		Узел.РезультатВыполнения = "Ошибка";
		мСценСкрипт_СделатьШагПоТаблицеНаборовСценариевЗавершение();
	Конецпопытки;
	
КонецПроцедуры
	
&НаКлиенте
Процедура мСценСкрипт_СделатьШагПоТаблицеНаборовСценариевЗавершение()
	
	// возврат завершению шагов
	Если ИндексТекущегоТеста>=ТаблицаНаборСценариев.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	// фокус на набор сценариев
	Элементы.ЖурналПреобразование.ТекущаяСтраница = Элементы.СтраницаПакетСценариев;
	
	// получим индекс дерева 
	ИдентификаторУзелаДерева = ТаблицаНаборСценариев[ИндексТекущегоТеста].ИдентификаторУзелаДерева;
	Узел = ДеревоНаборСценариев.НайтиПоИдентификатору(ИдентификаторУзелаДерева);
	
	// проверяем результат теста
	ТестПройден = мСценСкрипт_ПолучитьРезультатВыполненияСценария();
	Если ТестПройден=Истина Тогда
		Узел.РезультатВыполнения = "Успешно";
	Иначе
		Узел.РезультатВыполнения = "Ошибка";
	КонецЕсли;
	
	// следующий тест или папка
	ИндексТекущегоТеста = ИндексТекущегоТеста+1;
	
	// закроем приложения
	ЗавершитьТестовыеПриложенияПринудительно();
	
	// таймер на запуск следующего шага
	Если ИндексТекущегоТеста<ТаблицаНаборСценариев.Количество() Тогда
		ПодключитьОбработчикОжидания("мСценСкрипт_СделатьШагПоТаблицеНаборовСценариевНачало", 0.1, Истина);
	Иначе
		// закроем приложение для автотеста
		Если Объект.РежимАвтотест=Истина Тогда
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	// определяем время выполнения
	ВремяОкончанияаТеста = ТекущаяДата();
	ВремяОкончанияаТестаUTC = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Объект.ВремяВыполненияUTC = ВремяОкончанияаТестаUTC-ВремяНачалаТестаUTC;
	
КонецПроцедуры


&НаКлиенте
Процедура мСценПакет_ПодготовкаЗапускАвтоТеста(ПутьКФайлу, ПутьКаталогаОтчета, ПаузаПослеЗаускаКлиентов=0)
	
	ЗагрузитьСценарийФорматXML(ПутьКФайлу);
	// если произошли ошибки при загрузке надо их сохранить в лог????
	
	// каталог выгрузки отчетов
	Если НЕ ЗначениеЗаполнено(Объект.ПутьККаталогуОтчетовВыполненияТестов) Тогда
		Объект.ПутьККаталогуОтчетовВыполненияТестов=ПутьКаталогаОтчета;
	КонецЕсли;
	
	// переключим вкладку
	Элементы.ЖурналПреобразование.ТекущаяСтраница = Элементы.СтраницаДеревоСценария;
	мСценСкрипт_РазвернутьТаблицуВДерево(true);
	мСценСкрипт_ЗапуститьКлиентовТестированияДляТеста();
	
	// пауза
	Если ПаузаПослеЗаускаКлиентов>0 Тогда
		ВремяОкончанияОжидания = ТекущаяДата() + ПаузаПослеЗаускаКлиентов;
		Пока Не ТекущаяДата() >= ВремяОкончанияОжидания Цикл
	    	// ожидаем запуска
		КонецЦикла;
	КонецЕсли;
	
	ТестЗапущен = Ложь; // Виссаров ES- [22.11.2016]  Снимаем флаг, чтобы перенициализировать параметры для запуска нового сценария пакета
	ПройтиПоУзлуГенерацияНомерШагаВниз(ДеревоСценария); // проставим номера после загрузки
	мСценСкрипт_ВыполнитьСценарийПоШагам(Неопределено);

КонецПроцедуры



&НаКлиенте
Процедура мСценСкрипт_ЗакрытьВсехКлиентовТестирования(Команда)
	ЗавершитьТестовыеПриложенияПринудительно(Истина);
КонецПроцедуры

#КонецОбласти

#Область   РазныеПлагины

&НаКлиенте
Процедура ЗавершитьТестовыеПриложенияПринудительно(ЗакрытьВсе=Ложь) Экспорт
	
	Сообщение = "";
	
	Если ИспользоватьКомандуЗапуститьСистему = Истина Тогда
		Для каждого стр из ПуллТестируемыхПриложений Цикл
			ПараметрыПриложения = стр.Значение; 			
			Если ПараметрыПриложения.API = "" ИЛИ ПараметрыПриложения.API = "1cClientApp" Тогда
				плагин_ЗавершитьВсеТестовыеПриложенияПринудительно();
			ИначеЕсли ПараметрыПриложения.API = "Selenium" Тогда
				Модуль_ЗаписьЖурналаДействий.ЗакрытьБраузер_Selenium_API(Объект.АдресИнтернетExternAutomationUI,Объект.НомерПортаExternAutomationUI, ПараметрыПриложения.НомерПорта);
			КонецЕсли;
		КонецЦикла;
	Иначе
		
		// Если не было запусков и мы в интерактивном режиме, то закроем всех клиентов 1С
		Если ЗакрытьВсе=Истина И ПуллТестируемыхПриложений.Количество()=0 И Объект.ИспользуемыйAPI="1cClientApp" Тогда
			Попытка
				плагин_ЗавершитьВсеТестовыеПриложенияПринудительно();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
			
		Для каждого стр из ПуллТестируемыхПриложений Цикл
			ПараметрыПриложения = стр.Значение;
			Если ЗакрытьВсе=Истина И (ПараметрыПриложения.API = "" ИЛИ ПараметрыПриложения.API = "1cClientApp") Тогда
				Попытка
					плагин_ЗавершитьВсеТестовыеПриложенияПринудительно();	//TODO: запилить закрытие 1С приложений однократно позже
				Исключение
					плагин_ЗавершитьПроцессЛокально(ПараметрыПриложения.ПИД, Сообщение); // попробуем закрыть в режиме 2
				КонецПопытки;
			ИначеЕсли ПараметрыПриложения.API = "" ИЛИ ПараметрыПриложения.API = "1cClientApp"
				ИЛИ ПараметрыПриложения.API = "AutomationUI" Тогда
				плагин_ЗавершитьПроцессЛокально(ПараметрыПриложения.ПИД, Сообщение);
			ИначеЕсли ПараметрыПриложения.API = "Selenium" Тогда
				Модуль_ЗаписьЖурналаДействий.ЗакрытьБраузер_Selenium_API(Объект.АдресИнтернетExternAutomationUI,Объект.НомерПортаExternAutomationUI, ПараметрыПриложения.НомерПорта);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// чистим пулл
	ПуллТестируемыхПриложений = новый Соответствие;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьТестовыеПриложения(Знач СтрокаЗапуска,Знач НомерПорта=0,Знач API="1cClientApp",Знач Браузер="Chrome") Экспорт
	
	Сообщение = "";
	ПараметрыПриложения = новый Структура("API,ПИД,Браузер,НомерПорта",API,0,Браузер,НомерПорта);

	Если API="Selenium" Тогда // Запускаем браузеры
		Модуль_ЗаписьЖурналаДействий.ЗапуститьБраузер_Selenium_API(Браузер,Объект.АдресИнтернетExternAutomationUI,Объект.НомерПортаExternAutomationUI,НомерПорта);
		ПуллТестируемыхПриложений.Вставить(НомерПорта, ПараметрыПриложения);
	Иначе // API="" ИЛИ API = "1cClientApp" ИЛИ API="AutomationUI"
		Если ИспользоватьКомандуЗапуститьСистему = Истина Тогда
			ЗапуститьСистему(СтрокаЗапуска);
		Иначе
			ПараметрыПриложения.ПИД = плагин_ЗапуситьПриложениеЛокально(СтрокаЗапуска);
			ПуллТестируемыхПриложений.Вставить(НомерПорта, ПараметрыПриложения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// за основу взята функция из xUnit тест
&НаКлиенте
Процедура плагин_ЗавершитьВсеТестовыеПриложенияПринудительно()
	Scr = Новый COMОбъект("MSScriptControl.ScriptControl");
	Scr.Language = "vbscript";
	Scr.AddCode("
		|Option Explicit
		|
		|Dim objWMIService, objProcess, colProcess
		|
		|Set objWMIService = GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2"")
		|
		|Set colProcess = objWMIService.ExecQuery(""Select * from Win32_Process Where (CommandLine Like '%/TESTCLIENT%' And ExecutablePath Like '%1cv8c%')"")
		|
		|For Each objProcess in colProcess
		| objProcess.Terminate()
		|Next
		|");
КонецПроцедуры

// Функция - Запускает локально приложение по командной строке и получает PID процесса
//
// Параметры:
//  СтрокаЗапуска	 - строка	 -  командная строка запуска приложения, может содержать параметры
// 
// Возвращаемое значение:
//  Число - в случае успеха возвращает идентификатор процесса pid, если ошибка, то -1. 
//
&НаКлиенте
Функция плагин_ЗапуситьПриложениеЛокально(Знач СтрокаЗапуска,Сообщение="")  Экспорт
	Попытка
		Шелл=Новый COMОбъект("WScript.Shell"); 
		Процесс=Шелл.Exec(СтрокаЗапуска); 
		PID=Процесс.ProcessID;
		Возврат PID;
	Исключение
		Сообщение = ОписаниеОшибки();
		Возврат -1;
	КонецПопытки;
КонецФункции


// Функция - Убить процесс локально
//
// Параметры:
//  PID	 - число - Идентификатор процесса
// 
// Возвращаемое значение:
//  Истина, если успешно, Ложь - если ошибка, Неопределено - если исключание
//
&НаКлиенте
Функция плагин_ЗавершитьПроцессЛокально(Знач PID,Сообщение="") Экспорт
	
	//TODO: добавить закрытие браузеров, если открывались
	Попытка
		//Шелл=Новый COMОбъект("WScript.Shell"); 
		//СтрокаЗапуска = "PSKill "+СтрЗаменить(Строка(PID),Символы.НПП,"");
		//Процесс=Шелл.Exec(СтрокаЗапуска); 
		//PID=Процесс.ProcessID;
		//Возврат Истина;
		Если плагин_Computer_KillProccessByPID(".",PID)<>0 Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Исключение
		Сообщение = ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// Функция, позволяющая завершить некий процесс на локальном/удаленном компьютере.
// Параметры:
//    Computer - Имя компьютера.
//    ProccessName - Имя процесса, который необходимо завершить.
// Возвращаемое значение:
//    Количество завершенных процессов.
//
// Рекомендация:
// Перед применением проверить на компьютерах
// Windows Management Instrumentation (WMI):
// 1. Состояние служб.
// 2. Разрешение в брандмауэре.
//
&НаКлиенте
Функция плагин_Computer_KillProccessByPID(Computer = ".", PID = "") Экспорт
    
    Попытка
        
        WinMGMT = ПолучитьCOMОбъект("winmgmts:\\" + Computer + "\root\cimv2");
        Win32_Process = WinMGMT.ExecQuery("SELECT * FROM Win32_Process Where ProcessID = '" + СтрЗаменить(Строка(PID),Символы.НПП,"") + "'");
        
        Для Каждого Process ИЗ Win32_Process Цикл
            Process.Terminate();
        КонецЦикла;
        
    Исключение
    КонецПопытки;

    Возврат Win32_Process.Count;

КонецФункции


#КонецОбласти

#Область   БлокГотовыхШагов

&НаКлиенте
Процедура мСценСкрипт_ОбновитьДеревоВидШагов(Команда)
	НачатьПоискФайлов(Новый ОписаниеОповещения("мСценПакет_ВыборКаталогаБлокаГотовыхШаговЗавершение", ЭтаФорма), Объект.ПутьККаталогуБиблиотекиСценариев,"*.xml",Истина);		
КонецПроцедуры

&НаКлиенте
Процедура мСценПакет_ВыборКаталогаБлокаГотовыхШаговЗавершение(НайденныеФайлы, ДополнительныеПараметры1) Экспорт
	

	ДеревоДоступныеГотовыеШаги.ПолучитьЭлементы().Очистить();
	МассивСоотвествийУзловДерева = новый Соответствие;
	
	МассивДанных = новый Массив;
	
	Для каждого стр из НайденныеФайлы Цикл
		
		ОтносительныйПутьОтКорня = СтрЗаменить(стр.Путь,Объект.ПутьККаталогуБиблиотекиСценариев,"");
		ОтносительныйПутьОтКорня = СтрЗаменить("\"+ОтносительныйПутьОтКорня,"\\","\");
		Если НЕ ЗначениеЗаполнено(ОтносительныйПутьОтКорня) Тогда
			ОтносительныйПутьОтКорня = "\";
		КонецЕсли;
		
		// добавляем файл
		мСтруктура = новый Структура("Путь,Наименование,ПутьКФайлу,ДанныеКартинки,ЭтоГруппа,Родитель,Library");
		мСтруктура.Наименование 	= стр.ИмяБезРасширения;
		мСтруктура.Путь 			= стр.Путь;
		мСтруктура.ПутьКФайлу 		= стр.ПолноеИмя;
		мСтруктура.ДанныеКартинки 	= 1;		
		мСтруктура.ЭтоГруппа 		= Ложь;
		мСтруктура.Родитель			= ОтносительныйПутьОтКорня;
		мСтруктура.Library			= "ПутьККаталогуБиблиотекиСценариев";
		МассивДанных.Добавить(мСтруктура);
		// добавляем каталог
		МассивПапок = СтрРазделить(ОтносительныйПутьОтКорня,"\",Ложь);
		Родитель = "\";
		Для каждого папка из МассивПапок Цикл
			мСтруктура = новый Структура("Путь,Наименование,ПутьКФайлу,ДанныеКартинки,ЭтоГруппа,Родитель,Library");
			мСтруктура.Наименование 	= папка;
			мСтруктура.Путь 			= Родитель + папка + "\";
			мСтруктура.ДанныеКартинки 	= 2;		
			мСтруктура.ЭтоГруппа 		= Истина;
			мСтруктура.Родитель			= Родитель;
			мСтруктура.Library			= "ПутьККаталогуБиблиотекиСценариев";
			Для каждого стр из МассивДанных Цикл
				Если стр.Путь=мСтруктура.Путь Тогда
					мСтруктура = Неопределено;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если мСтруктура<>Неопределено Тогда
				МассивДанных.Добавить(мСтруктура);
			КонецЕсли;
			Родитель = Родитель + папка + "\";
		КонецЦикла;
	КонецЦикла;
	
	//
	ПутьКорня = "\";
	СоответствиеМассивовДетей = новый Соответствие;
	МассивКорневыхЭлементов = новый Массив;
	
	Для каждого стр из МассивДанных Цикл
		
		Если стр.Родитель=ПутьКорня Тогда
			МассивКорневыхЭлементов.Добавить(стр);
		КонецЕсли;
		
		МассивДетей = СоответствиеМассивовДетей.Получить(стр.Родитель);
		
		Если МассивДетей=Неопределено Тогда
			МассивДетей = новый Массив;
			МассивДетей.Добавить(стр);
			СоответствиеМассивовДетей.Вставить(стр.Родитель,МассивДетей);
		Иначе
			МассивДетей.Добавить(стр);
		КонецЕсли;
		
	КонецЦикла;

	Корень = ДеревоДоступныеГотовыеШаги.ПолучитьЭлементы();
	Корень.Очистить();
	
	Для каждого стр из МассивКорневыхЭлементов Цикл
		Узел = Корень.Добавить();
		ЗаполнитьЗначенияСвойств(Узел,стр);
		Если стр.ЭтоГруппа=Истина Тогда
			мСценПакет_ДобавитьУзелВДеревоПакета(Узел,СоответствиеМассивовДетей);
		КонецЕсли;
	КонецЦикла;

	
КонецПроцедуры



#КонецОбласти

#Область   ПараметрыСценария

&НаКлиенте
Процедура ПараметрыСценарияИмяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыСценария.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// приведем в норму переменную
	ТекущиеДанные.Имя = СокрЛП(ТекущиеДанные.Имя);
	ТекущиеДанные.Имя = СтрЗаменить(ТекущиеДанные.Имя,Символы.НПП,"");
	ТекущиеДанные.Имя = СтрЗаменить(ТекущиеДанные.Имя," ","");
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценарияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока=Истина Тогда
		Элементы.ПараметрыСценария.ТекущиеДанные.ТипДанных = "Строка";
		Элементы.ПараметрыСценария.ТекущиеДанные.Значение = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценарияТипДанныхПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ПараметрыСценария.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипДанных = "Строка" Тогда
		ТекущиеДанные.Значение = "";	
	ИначеЕсли ТекущиеДанные.ТипДанных = "Число" Тогда
		ТекущиеДанные.Значение = 0;	
	ИначеЕсли ТекущиеДанные.ТипДанных = "Булево" Тогда
		ТекущиеДанные.Значение = Ложь;	
	ИначеЕсли ТекущиеДанные.ТипДанных = "Дата" Тогда
		ТекущиеДанные.Значение = ТекущаяДата();	
	ИначеЕсли ТекущиеДанные.ТипДанных = "СтруктураПодключения" Тогда
		ТекущиеДанные.Значение = "";	                          		
		Элементы.ПараметрыСценарияЗначение.КнопкаВыбора = Истина;
	Иначе
		ТекущиеДанные.Значение = "";	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценарияЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ПараметрыСценария.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипДанных = "СтруктураПодключения" Тогда
		СтандартнаяОбработка = Ложь;
			
		мПараметры = новый Структура("Действие,Команда,ИмяТаблицы",
		"ПодключитьТестируемоеПриложение","","ПараметрыСценария");
		мПараметры.Вставить("СвойстваПодключенияКлиентаТестирования",ТекущиеДанные.Значение);
		Форма = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Форма_ВнешнееРедактированиеСвойств",мПараметры);
		Форма.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыСценарияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ПараметрыСценария.ТекущиеДанные;
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	Если ТекущиеДанные.ТипДанных = "СтруктураПодключения" Тогда
		Если НЕ Элементы.ПараметрыСценарияЗначение.КнопкаВыбора = Истина Тогда
			Элементы.ПараметрыСценарияЗначение.КнопкаВыбора = Истина;
		КонецЕсли;
	Иначе
		Если НЕ Элементы.ПараметрыСценарияЗначение.КнопкаВыбора = Ложь Тогда
			Элементы.ПараметрыСценарияЗначение.КнопкаВыбора = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры


#КонецОбласти

#Область   ЗаписьЖурналаДействий

&НаКлиенте
Процедура мСценЖурнал_НачатьЗапись(Команда)	
	Если Объект.ИспользуемыйAPI="1cClientApp" Тогда
		мСценЖурнал_НачатьЗапись_1cClientApp_API();
	ИначеЕсли Объект.ИспользуемыйAPI="AutomationUI" Тогда
		PID = 0;
		Для каждого стр из ТаблицаДоступныхПриложений Цикл
			Если стр.Выбрана=Истина Тогда
				PID = стр.PID;
				Прервать;
			КонецЕсли;				
		КонецЦикла;
		Модуль_ЗаписьЖурналаДействий.НачатьЗапись_AutomationUI_API(PID,Объект.АдресИнтернетExternAutomationUI,Объект.НомерПортаExternAutomationUI);
		Элементы.мСценЖурнал_ЗавершитьЗапись.Доступность = Истина;
		Элементы.мСценЖурнал_ПрерватьЗапись.Доступность = Истина;
		Элементы.мСценЖурнал_НачатьЗапись.Видимость = Ложь;
		Элементы.мСценЖурнал_ПаузаЗапись.Видимость = Истина;
	ИначеЕсли Объект.ИспользуемыйAPI="Selenium" Тогда
		Модуль_ЗаписьЖурналаДействий.НачатьЗапись_Selenium_API(Объект.АдресИнтернетExternAutomationUI,Объект.НомерПортаExternAutomationUI,Объект.НомерПорта);
		Элементы.мСценЖурнал_ЗавершитьЗапись.Доступность = Истина;
		Элементы.мСценЖурнал_ПрерватьЗапись.Доступность = Истина;
		Элементы.мСценЖурнал_НачатьЗапись.Видимость = Ложь;
		Элементы.мСценЖурнал_ПаузаЗапись.Видимость = Истина;
	Иначе
		Сообщить("Неподдерживаемый API");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура мСценЖурнал_НачатьЗапись_1cClientApp_API() Экспорт

	Попытка
	ОписаниеОшибки = "";		
	Если ТестовоеПриложениеЖурнал=Неопределено Тогда
			мПараметры = новый Структура;
			мПараметры.Вставить("СвойстваПодключенияКлиентаТестирования",новый Структура);
			мПараметры.Вставить("ПараметрыСценария",ПараметрыСценария);
			мПараметры.Вставить("НомерПорта",Объект.НомерПорта);
			мПараметры.Вставить("Интервал",0);
			мПараметры.Вставить("ТекущийНомерПорта",ТекущийНомерПорта);
			

			Модуль_ОбработкаДействий.мСценСкрипт_GenerateClientConnection(ТестовоеПриложениеЖурнал,ОписаниеОшибки, мПараметры);
			
			Если ТестовоеПриложениеЖурнал<>Неопределено Тогда
				ТестовоеПриложениеЖурнал.НачатьЗаписьЖурналаДействийПользователя();
				Элементы.мСценЖурнал_ЗавершитьЗапись.Доступность = Истина;
				Элементы.мСценЖурнал_ПрерватьЗапись.Доступность = Истина;
			КонецЕсли;   
		Иначе
			ТестовоеПриложениеЖурнал.ПродолжитьЗаписьЖурналаДействийПользователя();
		КонецЕсли;
		
		Если ТестовоеПриложениеЖурнал<>Неопределено Тогда
			Элементы.мСценЖурнал_НачатьЗапись.Видимость = Ложь;
			Элементы.мСценЖурнал_ПаузаЗапись.Видимость = Истина;
		КонецЕсли;
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры
 

&НаКлиенте
Процедура мСценЖурнал_ПаузаЗапись(Команда)
	
	Если Объект.ИспользуемыйAPI="1cClientApp" Тогда
		Попытка
			ТестовоеПриложениеЖурнал.ПриостановитьЗаписьЖурналаДействийПользователя();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
	ИначеЕсли Объект.ИспользуемыйAPI="AutomationUI" Тогда
		Модуль_ЗаписьЖурналаДействий.ПаузаЗапись_AutomationUI_API(Объект.АдресИнтернетExternAutomationUI,Объект.НомерПортаExternAutomationUI);
	КонецЕсли;	
	
	// обработка отображения
	Элементы.мСценЖурнал_НачатьЗапись.Видимость = Истина;
	Элементы.мСценЖурнал_ПаузаЗапись.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура мСценЖурнал_ЗавершитьЗапись(Команда)
	Если Объект.ИспользуемыйAPI="1cClientApp" Тогда
		Попытка
			ИсточникТекст = ТестовоеПриложениеЖурнал.ЗавершитьЗаписьЖурналаДействийПользователя();
			ТестовоеПриложениеЖурнал.РазорватьСоединение();
			ТестовоеПриложениеЖурнал = Неопределено;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
	ИначеЕсли Объект.ИспользуемыйAPI="AutomationUI" Тогда
		ИсточникТекст = Модуль_ЗаписьЖурналаДействий.ЗавершитьЗапись_AutomationUI_API(Объект.АдресИнтернетExternAutomationUI,Объект.НомерПортаExternAutomationUI);
	ИначеЕсли Объект.ИспользуемыйAPI="Selenium" Тогда
		ИсточникТекст = Модуль_ЗаписьЖурналаДействий.ЗавершитьЗапись_Selenium_API(Объект.АдресИнтернетExternAutomationUI,Объект.НомерПортаExternAutomationUI,Объект.НомерПорта);
	КонецЕсли;	
	
	// обработка отображения
	Элементы.мСценЖурнал_НачатьЗапись.Видимость = Истина;
	Элементы.мСценЖурнал_ПаузаЗапись.Видимость = Ложь;
	Элементы.мСценЖурнал_ЗавершитьЗапись.Доступность = Ложь;
	Элементы.мСценЖурнал_ПрерватьЗапись.Доступность = Ложь;
	
КонецПроцедуры




&НаКлиенте
Процедура мСценЖурнал_ПрерватьЗапись(Команда)
	
	Если Объект.ИспользуемыйAPI="1cClientApp" Тогда	
		Элементы.мСценЖурнал_НачатьЗапись.Видимость = Истина;
		Элементы.мСценЖурнал_ПаузаЗапись.Видимость = Ложь;
		Попытка
			ТестовоеПриложениеЖурнал.ПрерватьЗаписьЖурналаДействийПользователя();
			ТестовоеПриложениеЖурнал.РазорватьСоединение();
			ТестовоеПриложениеЖурнал = Неопределено;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
		
		Элементы.мСценЖурнал_ЗавершитьЗапись.Доступность = Ложь;
		Элементы.мСценЖурнал_ПрерватьЗапись.Доступность = Ложь;
	Иначе
		Сообщить("Недоступно");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура мСценЖурнал_ЗапуститьКлиентаТестированияПоУмолчанию(Команда)
	Если Объект.ЭтоНеПредприятие1С=Истина И (Объект.ИспользуемыйAPI="1cClientApp" ИЛИ НЕ ЗначениеЗаполнено(Объект.ИспользуемыйAPI)) Тогда
		Сообщить("Нельзя запускать API 1С и использовать в настройках включенный режим 'это не 1С предприятие'!");
		Возврат;
	КонецЕсли;
	мСценСкрипт_ЗапуститьКлиентовТестированияДляТеста(Истина);
КонецПроцедуры

&НаКлиенте
Процедура мСценЖУрнал_ЗавершитьКлиентаТестированияПоУмолчанию(Команда)
	ЗавершитьТестовыеПриложенияПринудительно(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	//TODO: Вставить содержимое обработчика
	Модуль_ЗагрузкаДанных = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Модуль_ЗагрузкаФайлаДанных");
	Данные = Модуль_ЗагрузкаДанных.ЗагрузитьДанные(Объект.ПутьКФайлуДанных);
КонецПроцедуры


&НаКлиенте
Процедура мСценСкрипт_ОбновитьСписокДоступныхПриложений(Команда)
	
	СтруктураОтвета = Модуль_ЗаписьЖурналаДействий.СписокПриложенийДляОтладки_AutomationUI_API(Объект.АдресИнтернетExternAutomationUI,Объект.НомерПортаExternAutomationUI);
	
	ТаблицаДоступныхПриложений.Очистить();
	
	// любое приложение
	стр_н = ТаблицаДоступныхПриложений.Добавить();
	стр_н.PID = 0;
	стр_н.Представление = "Любое";
	стр_н.Выбрана = Истина;
	
	Если ТипЗнч(СтруктураОтвета)=Тип("Массив") Тогда
		Для каждого стр из СтруктураОтвета Цикл
			Если НЕ ЗначениеЗаполнено(стр.Description) Тогда
				Продолжить;
			КонецЕсли;			
			стр_н = ТаблицаДоступныхПриложений.Добавить();
			стр_н.PID = Формат(стр.Id,"ЧГ=;");
			стр_н.Представление = стр.Description;
		КонецЦикла;
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоступныхПриложенийВыбранаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаДоступныхПриложений.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого стр из ТаблицаДоступныхПриложений Цикл
		стр.Выбрана = Ложь;
	КонецЦикла;
		
	ТекущиеДанные.Выбрана = Истина;
	
КонецПроцедуры


#КонецОбласти

#Область RegExp

&НаКлиенте
Процедура RegExp_Инициализировать(Шаблон, ИскатьДоПервогоСовпадения = Истина, МногоСтрок = Истина, ИгнорироватьРегистр = Истина) Экспорт

    Если RegExp = Неопределено Тогда //Нужна инициализация
        RegExp = Новый COMОбъект("VBScript.RegExp");    // создаем объект для работы с регулярными выражениями
    КонецЕсли;

    //Заполняем данные
    RegExp.MultiLine = МногоСтрок;                  // истина — текст многострочный, ложь — одна строка
    RegExp.Global = Не ИскатьДоПервогоСовпадения;   // истина — поиск по всей строке, ложь — до первого совпадения
    RegExp.IgnoreCase = ИгнорироватьРегистр;        // истина — игнорировать регистр строки при поиске
    RegExp.Pattern = Шаблон;                        // шаблон (регулярное выражение)

КонецПроцедуры

&НаКлиенте
Функция RegExp_ПроверитьTest(ПроверяемыйТекст, Шаблон, ИскатьДоПервогоСовпадения = Истина, МногоСтрок = Истина, ИгнорироватьРегистр = Истина)
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
	Иначе
		ВызватьИсключение "Функция RegExp доступна на операционных системах Windows.";
	КонецЕсли;
	
	Попытка
		
		Если RegExp=Неопределено Тогда
			RegExp_Инициализировать(Шаблон,ИскатьДоПервогоСовпадения,МногоСтрок,ИгнорироватьРегистр);
		КонецЕсли;
		
		RegExp.Pattern = Шаблон;
		
		Если RegExp.Test(ПроверяемыйТекст) Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ВызватьИсключение "Произошла ошибка при работе RegExp:"+ТекстОшибки;
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область Tips

&НаКлиенте
Процедура мСценРедактор_ИзменитьПодсказкуTips(ТекущиеДанные)
	
	ТекстПодсказки = "";
	
	Если ТекущиеДанные.Действие="ПодключитьТестируемоеПриложение" Тогда
		ТекстПодсказки = "&nbsp;Даный шаг выполняет подключение к тестируемому клиенту 1С. В свойствах шага вы можете переопределить настройки подключения. По умолчанию используются параметры подключения из указанных в настройках редкатора.<br />
		| <ul>
		| <li><i>интервал</i> - время, которе требуется для поиска и подключения к тестируемому клиенту</li>
		| </ul>";
	ИначеЕсли ТекущиеДанные.Действие="ЗакрытьТестируемоеПриложение" Тогда
		ТекстПодсказки = "&nbsp;Данный шаг выполняет отключение от тестируемого клиента 1С."; 		
	ИначеЕсли ТекущиеДанные.Действие="Комментарий" Тогда
		ТекстПодсказки = "&nbsp;Шаг с типом 'Комментарий' является вспомогательным блоком (не выполняет действия) и используется для логического отделения разных групп шагов.";
	ИначеЕсли ТекущиеДанные.Действие="НайтиОсновноеОкно" Тогда
		ТекстПодсказки = "&nbsp;В тестируемом клиенте происходит поиск основного окна приложения 1С.";
	ИначеЕсли ТекущиеДанные.Действие="НайтиОкно" Тогда
		ТекстПодсказки = "&nbsp;В тестируемом клиенте происходит поиск одного из открытых окон подходящих под требования, указанные в свойствах 'Заголовок'";
	ИначеЕсли ТекущиеДанные.Действие="НайтиФорму" Тогда
		ТекстПодсказки = "&nbsp;Ищем форму по свойствам 'Заголовок' и/или 'Имя объекта'";
	ИначеЕсли ТекущиеДанные.Действие="НайтиОбъект" Тогда
		ТекстПодсказки = "&nbsp;Ищем объект по свойствам 'Заголовок' и/или 'Имя объекта'";
	ИначеЕсли ТекущиеДанные.Действие="ВыполнитьПроизвольныйКодСервер" Тогда
		ТекстПодсказки = "&nbsp;Выполняем произвольный код на языке 1С на сервере.";
	ИначеЕсли ТекущиеДанные.Действие="ВыполнитьПроизвольныйКодКлиент" Тогда
		ТекстПодсказки = "&nbsp;Выполняем произвольный код на языке 1С на клиенте.";
	ИначеЕсли ТекущиеДанные.Действие="ГотовыйБлокШагов" Тогда
		ТекстПодсказки = "&nbsp;Возможность подключить сценарий созданный ранее и расположенной в каталоге 'библиотека'. Данный шаг будет всегда загружаться при загрузке текущего сценария.";
	ИначеЕсли ТекущиеДанные.Действие="СравнитьСПредставлениемДанных" Тогда
		ТекстПодсказки = "&nbsp;Позволяет провести сравнение текущего значения элемента с указанным в свойствах по критериям (равно, не равно, заполнено, не заполнено) или сравнивает по шаблону регулярных выражений RegExp.";
	ИначеЕсли ТекущиеДанные.Действие="ПолучитьПредставлениеДанных" Тогда
		ТекстПодсказки = "&nbsp;ПолучитьПредставлениеДанных позволяет получить текущее значение элемента и/или сохранить текущее значение в параметр/переменную сеанса, которая указана во вкладке 'Параметры/переменные сценария'.";
	ИначеЕсли ТекущиеДанные.Действие="Условие" Тогда
		ТекстПодсказки = "&nbsp;Сравнивает значение параметра с именем 'ИмяПараметра' сначала со значением параметра с 'ИмяПараметра2' (если задано) или следующим шагом с указанным значением 'ЗначениеПараметра' . В случае успешного результата будут выполняться подчиненные шаги, иначе подчиненные шаги будут пропущены.";
	ИначеЕсли ТекущиеДанные.Действие="Таймер" Тогда
		ТекстПодсказки = "&nbsp;Выполняет задержку на время в секундах указанное в свойстве 'Интервал'.";
	ИначеЕсли ТекущиеДанные.Действие="ИзПараметра1ВПараметр2" Тогда
		ТекстПодсказки = "&nbsp;Копирует значение переменной с именем 'ИмяПараметра' в значение переменной 2 с именем 'ИмяПараметра2'.";
	ИначеЕсли ТекущиеДанные.Действие="ПроверкаНаличияЭлемента" Тогда
		ТекстПодсказки = "&nbsp;Ищет в тестируемом клиенте элемент/окно/форму и результат поиска передает в указанную переменную, указанную в свойстве поля - 'ИмяПараметра'.";
	ИначеЕсли ТекущиеДанные.Действие="" Тогда
		ТекстПодсказки = "&nbsp;"; 		
	ИначеЕсли ТекущиеДанные.Действие="Команда" Тогда
		
		ТекстПодсказки = "&nbsp;Выполняем команду Нажать, закрыть и др. Перечень команд зависит от элемента интерфейса, который был найден и должен распологаться выше.";
		Если Объект.ИспользуемыйAPI="Selenium" Тогда
			Если НРЕГ(ТекущиеДанные.Команда)="navigate" Тогда
				ТекстПодсказки = ТекстПодсказки+"<br /> <b>navigate</b> - осуществляет навигацию по адресу введенному в поле 'Вводимый текст'";
			ИначеЕсли НРЕГ(ТекущиеДанные.Команда)="implicit wait" Тогда
				ТекстПодсказки = ТекстПодсказки+"<br /> <b>implicit wait</b> - осуществляет ожидания поиска элемента (для всех глобально) на период в секундах в поле 'Интервал'";
			ИначеЕсли НРЕГ(ТекущиеДанные.Команда)="click" ИЛИ НРЕГ(ТекущиеДанные.Команда)="dblclick" Тогда
				ТекстПодсказки = ТекстПодсказки+"<br /> <b>click</b> или <b>dblclick</b> - одинарный или двойной клик";
			ИначеЕсли НРЕГ(ТекущиеДанные.Команда)="rclick" Тогда
				ТекстПодсказки = ТекстПодсказки+"<br /> <b>rclick</b> - одинарный клик правой кнопки мышки на выбранном элементе";
				
			ИначеЕсли НРЕГ(ТекущиеДанные.Команда)="focus" Тогда
				ТекстПодсказки = ТекстПодсказки+"<br /> <b>focus</b> - устанавливает фокус на элемент";
			ИначеЕсли НРЕГ(ТекущиеДанные.Команда)="text" Тогда
				ТекстПодсказки = ТекстПодсказки+"<br /> <b>text</b> - вводит текст на выбранном элементе. ";
			КонецЕсли;
		ИначеЕсли Объект.ИспользуемыйAPI="AutomationUI" Тогда
			Если НРЕГ(ТекущиеДанные.Команда)="click" ИЛИ НРЕГ(ТекущиеДанные.Команда)="dblclick" 
			ИЛИ НРЕГ(ТекущиеДанные.Команда)="simulate click" ИЛИ НРЕГ(ТекущиеДанные.Команда)="simulate dblclick" 
			ИЛИ НРЕГ(ТекущиеДанные.Команда)="simulate rclick" Тогда
				ТекстПодсказки = ТекстПодсказки+"<br /> 
				|<b>simulate click</b> или <b>simulate dblclick</b> - одинарный или двойной клик;
				|<b>simulate rclick</b> - одинарный клик правой кнопкой;
				|<b>click</b> или <b>dblclick</b> - одинарный или двойной клик";
			ИначеЕсли НРЕГ(ТекущиеДанные.Команда)="click%"  ИЛИ НРЕГ(ТекущиеДанные.Команда)="simulate click%" Тогда
				ТекстПодсказки = ТекстПодсказки+"<br />
				|<b>click%</b> - устанавливает мышь в позицию с координатами (Pos X, Pos Y) и нажимает. Если у элемента стоят % то позиция
				| курсора устанавливается в процентах от размера элемента, т.е. 50%, 50% - установит курсор по центру элемента.
				| Если указаны абсолютные цифры, то на количество пикселей от правого верхнего угла. Если абсолютные отрицательные цифры, то
				| вправо относительно левого нижнего угла.
				| Для <b>simulate click%</b> выполняется тоже самое, но симулируется перемещение курсора для текущего окна.";				
			ИначеЕсли НРЕГ(ТекущиеДанные.Команда)="focus" Тогда
				ТекстПодсказки = ТекстПодсказки+"<br /> <b>focus</b> - устанавливает фокус на элемент";
			ИначеЕсли НРЕГ(ТекущиеДанные.Команда)="toggle" Тогда
				ТекстПодсказки = ТекстПодсказки+"<br /> <b>toggle</b> - устанавливает/снимает флажок с чекбокса";
			ИначеЕсли НРЕГ(ТекущиеДанные.Команда)="text" Тогда
				ТекстПодсказки = ТекстПодсказки+"<br /> <b>text</b> - вводит текст на выбранном элементе.";
			ИначеЕсли НРЕГ(ТекущиеДанные.Команда)="send key" ИЛИ НРЕГ(ТекущиеДанные.Команда)="simuate send key"Тогда
				ТекстПодсказки = ТекстПодсказки+"<br /> 
				|<b>simulate send key</b> - отправляет сочетания только в текущее окно. Используйте сочетания 'Cntrl+Key', 'Alt+Key', 'Ctrl+Shift+Key', 'F1'-'F12' в любой комбинации.<br />
				|<b>send key</b> - отправляет команду-текст на выбранном элементе. Чтобы отправить горячую клавишу F4 - введите '{F4}', Shift - '+', Alt - '%', Ctrl - '^'. Используйте перед этой операцией команду focus или click. Пример: Ctrl+F1 - '^+{F1}'";		
				
			КонецЕсли;
				
		КонецЕсли;		
		
	Иначе
	КонецЕсли;
	
	// Tips
	TipsHTML = "<html><head></head><body style=' margin:0'>"+ТекстПодсказки+"</body></html>";
	
КонецПроцедуры

&НаКлиенте
Процедура мСценРедактор_ВыключитьПодсказки(Команда)
	ПодсказкиВыключены = Истина;
	мСценРедактор_ВыключитьПодсказкиОформление();
КонецПроцедуры

&НаКлиенте
Процедура мСценРедактор_ВключитьПодсказки(Команда)
	ПодсказкиВыключены = Ложь;
	мСценРедактор_ВыключитьПодсказкиОформление();
КонецПроцедуры

&НаКлиенте
Процедура мСценРедактор_ВыключитьПодсказкиОформление()
	
	Элементы.мСценРедактор_ВключитьПодсказки.Видимость = ПодсказкиВыключены;
	Элементы.мСценРедактор_ВыключитьПодсказки.Видимость = НЕ ПодсказкиВыключены;
	Элементы.TipsHTML.Видимость = НЕ ПодсказкиВыключены;

КонецПроцедуры

#КонецОбласти


#Область РежимАгента

&НаКлиенте
Процедура мАгент_ВыполнитьСинхронизацию()
	
	// сбросим буфер
	Если СтрЧислоСтрок(Консоль)>1000 Тогда
		Консоль = "Очистка"+ТекущаяДата();
	КонецЕсли;
	
	Консоль = "синхронизация "+ТекущаяДата()+Символы.ПС+Консоль;
	
	Попытка

	// читаем данные из каталога
		мАгент_ВыполнитьЧтениеИзКаталогаОбмена();

		// обработка
		мАгент_ВыполнитьОбработкуЗапроса();

		// формируем ответ
		мАгент_ВыполнитьЗаписьВКаталогОбмена();

	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		Сообщить(ТекстОшибки);

		Попытка
			мАгент_СформироватьСообщениеОшибки(ТекстОшибки);
			// формируем ответ
			мАгент_ВыполнитьЗаписьВКаталогОбмена();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
	КонецПопытки;
	
	// подключаем обработчик ожидания
	Если Объект.РежимРаботаАгента=Истина Тогда
		ПодключитьОбработчикОжидания("мАгент_ВыполнитьСинхронизацию", 5.0, Истина);
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура мАгент_Пауза(Команда)
	Если Объект.РежимРаботаАгента=Истина Тогда
		Объект.РежимРаботаАгента = Ложь;
	Иначе
		Объект.РежимРаботаАгента = Истина;
		мАгент_ВыполнитьСинхронизацию();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура мАгент_ВыполнитьОбмен(Команда)
	
	// читаем данные из каталога
	мАгент_ВыполнитьЧтениеИзКаталогаОбмена();
	
	// обработка
	мАгент_ВыполнитьОбработкуЗапроса();
	
	// отвечаем
	мАгент_ВыполнитьЗаписьВКаталогОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура мАгент_ВыполнитьЗаписьВКаталогОбмена()	
	
	Если НомерОтправленногоСообщения=ТекущийНомерСообщения  Тогда
		Возврат;
	КонецЕсли;
	
	мПараметры = новый Структура();
	Модуль_ОбработкаКомандИзКаталогаОбмена = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Модуль_ОбработкаКомандИзКаталогаОбмена",мПараметры,ЭтаФорма);
	ТекстоваяСтрокаФайла = Модуль_ОбработкаКомандИзКаталогаОбмена.СоздатьИсходящееСообщениеXML(Агент_СтруктураОтвета);
	
	Если ЗначениеЗаполнено(ТекстоваяСтрокаФайла) Тогда
		
		ПутьКФайлу = Объект.КаталогДляОбмена+"\answer-"+Объект.ИдентификаторЭкземпляраАгента+".xml"; 
		
		Документ = новый ТекстовыйДокумент;
		Документ.УстановитьТекст(ТекстоваяСтрокаФайла);
		СохранениеФайлаСценария = новый ОписаниеОповещения("СохранениеФайлаКоманды",ЭтотОбъект);
		ПутьКФайлуОбмена = ПутьКФайлу;
		Попытка
			Документ.НачатьЗапись(СохранениеФайлаСценария,ПутьКФайлуОбмена,"UTF-8");
		Исключение
			Документ.Записать(ПутьКФайлуОбмена,"UTF-8");
		КонецПопытки;
		
	КонецЕсли;	
	
	НомерОтправленногоСообщения = ТекущийНомерСообщения;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранениеФайлаКоманды(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат=Истина Тогда
		Сообщить("Файл записан успешно!");
	Иначе
		Сообщить("При сохранении файла конфигурации произошла ошибка!");	
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура мАгент_ВыполнитьЧтениеИзКаталогаОбмена()
	
	Если НЕ ЗначениеЗаполнено(Объект.КаталогДляОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = Объект.КаталогДляОбмена+"\request-"+Объект.ИдентификаторЭкземпляраАгента+".xml";
	
	// проверим есть ли запрос
	Файл = новый Файл(ПутьКФайлу);
	
	Если НЕ Файл.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	мПараметры = новый Структура();
	XMLСтрока = "";
	ТекстовыДокумент = новый ТекстовыйДокумент;
	ТекстовыДокумент.Прочитать(ПутьКФайлу);
	XMLСтрока = ТекстовыДокумент.ПолучитьТекст();
	Модуль_ОбработкаКомандИзКаталогаОбмена = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Модуль_ОбработкаКомандИзКаталогаОбмена",мПараметры,ЭтаФорма);
	Агент_СтруктураЗапроса = Модуль_ОбработкаКомандИзКаталогаОбмена.РазобратьВходящееСообщениеXML(XMLСтрока);
	Если Агент_СтруктураЗапроса.Свойство("НомерСообщения") Тогда	
		ТекущийНомерСообщения = Агент_СтруктураЗапроса.НомерСообщения;
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ПутьКФайлу);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;	
	
КонецПроцедуры

&НаКлиенте
Процедура мАгент_СформироватьСообщениеВыполненияСценария(Знач ТекстОшибки)

	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		мАгент_СформироватьСообщениеОшибки(ТекстОшибки);
		Агент_СтруктураОтвета.Вставить("ИмяКоманды","СценарийЗавершен");
	Иначе
		Агент_СтруктураОтвета = новый Структура("ИмяКоманды,НомерСообщения,Результат","Неопределено",ТекущийНомерСообщения,"Ошибка");
		Агент_СтруктураОтвета.Вставить("ИмяКоманды","СценарийЗавершен");
	КонецЕсли;
	
	ТекущийНомерСообщения = ТекущийНомерСообщения+1;
	// отвечаем
	мАгент_ВыполнитьЗаписьВКаталогОбмена();	

КонецПроцедуры

&НаКлиенте
Процедура мАгент_ВыполнитьОбработкуЗапроса()
	
	Если Агент_СтруктураЗапроса=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Агент_СтруктураОтвета = новый Структура("ИмяКоманды,НомерСообщения,Результат","Неопределено",0,"Успешно");
	
	Если Агент_СтруктураЗапроса.ТипСообщения="command" Тогда
		
		// сообщение уже обработали и номер последнего сообщения больше, тогда возврат
		Если ТекущийНомерСообщения >= Агент_СтруктураЗапроса.НомерСообщения Тогда
			Возврат;
		КонецЕсли;
		
		ТекущийНомерСообщения = Агент_СтруктураЗапроса.НомерСообщения;
		Агент_СтруктураОтвета.НомерСообщения = Агент_СтруктураЗапроса.НомерСообщения;
		Агент_СтруктураЗапроса.Вставить("Наименование",Агент_СтруктураЗапроса.Наименование);
		
		Если Агент_СтруктураЗапроса.Наименование="ЗакрытьЭкземплярАгентаТестирования" Тогда
			// завершаем экземпляры ТК
			ЗавершитьТестовыеПриложенияПринудительно();
			// завершаем работу системы
			ЗавершитьРаботуСистемы(Ложь);
		ИначеЕсли Агент_СтруктураЗапроса.Наименование="ЗапуститьКлиентаТестирования" Тогда
			
			// к нам в параметрах должен прийти порт
			Если Агент_СтруктураЗапроса.items.Свойство("ПортТестирования") 
				И ЗначениеЗаполнено(Агент_СтруктураЗапроса.items.ПортТестирования) Тогда
				Объект.НомерПорта = Число(СтрЗаменить(Агент_СтруктураЗапроса.items.ПортТестирования,Символы.НПП,""));
			КонецЕсли;
			Если Агент_СтруктураЗапроса.items.Свойство("ФайловаяБаза") 
				И ЗначениеЗаполнено(Агент_СтруктураЗапроса.items.ФайловаяБаза) Тогда
				Если Врег(Агент_СтруктураЗапроса.items.ФайловаяБаза)="ДА" ИЛИ
					Врег(Агент_СтруктураЗапроса.items.ФайловаяБаза)="ИСТИНА" ИЛИ
					Врег(Агент_СтруктураЗапроса.items.ФайловаяБаза)="TRUE" Тогда
					Объект.ФайловаяБаза = Истина;
				Иначе
					Объект.ФайловаяБаза = Ложь;
				КонецЕсли;
			КонецЕсли;			
			Если Агент_СтруктураЗапроса.items.Свойство("Пользователь1С") 
				И ЗначениеЗаполнено(Агент_СтруктураЗапроса.items.Пользователь1С) Тогда
				Объект.Пользователь1С = Агент_СтруктураЗапроса.items.Пользователь1С;
			КонецЕсли;			
			Если Агент_СтруктураЗапроса.items.Свойство("Пароль1С") Тогда
				Объект.Пароль1С = Агент_СтруктураЗапроса.items.Пароль1С;
			КонецЕсли;
			Если Агент_СтруктураЗапроса.items.Свойство("ПутьПодключенияКлиентаТестирования") 
				И ЗначениеЗаполнено(Агент_СтруктураЗапроса.items.ПутьПодключенияКлиентаТестирования) Тогда
				Объект.ПутьПодключенияКлиентаТестирования = Агент_СтруктураЗапроса.items.ПутьПодключенияКлиентаТестирования;
			КонецЕсли;
			
			
			мСценСкрипт_ЗапуститьКлиентовТестированияДляТеста(Истина);
			Агент_СтруктураОтвета.Вставить("Результат","Успех");
			
		ИначеЕсли Агент_СтруктураЗапроса.Наименование="ЗакрытьКлиентаТестирования" Тогда
		ИначеЕсли Агент_СтруктураЗапроса.Наименование="ЗакрытьВсехКлиентовТестирования" Тогда
			ЗавершитьТестовыеПриложенияПринудительно(Истина);
			Агент_СтруктураОтвета.Вставить("Результат","Успех");
			
		ИначеЕсли Агент_СтруктураЗапроса.Наименование="ПолучитьСтатусАгента" Тогда
			Агент_СтруктураОтвета.Вставить("Результат","Успех");
			
		ИначеЕсли Агент_СтруктураЗапроса.Наименование="ВыполнитьСценарий" Тогда
			// к нам в параметрах должены прийти условия
			Если Агент_СтруктураЗапроса.items.Свойство("ПутьКФайлуСценария") 
				И ЗначениеЗаполнено(Агент_СтруктураЗапроса.items.ПутьКФайлуСценария) Тогда
				Объект.ПутьКФайлуСценария = Агент_СтруктураЗапроса.items.ПутьКФайлуСценария;
			КонецЕсли;
			Если Агент_СтруктураЗапроса.items.Свойство("ПутьККаталогуБиблиотекиСценариев") 
				И ЗначениеЗаполнено(Агент_СтруктураЗапроса.items.ПутьККаталогуБиблиотекиСценариев) Тогда
				Объект.ПутьККаталогуБиблиотекиСценариев = Агент_СтруктураЗапроса.items.ПутьККаталогуБиблиотекиСценариев;
			КонецЕсли;
			Если Агент_СтруктураЗапроса.items.Свойство("ПутьККаталогуНаборовСценариев") 
				И ЗначениеЗаполнено(Агент_СтруктураЗапроса.items.ПутьККаталогуНаборовСценариев) Тогда
				Объект.ПутьККаталогуНаборовСценариев = Агент_СтруктураЗапроса.items.ПутьККаталогуНаборовСценариев;
			КонецЕсли;			
			
			
			мАгент_ПодготовкаЗапускАвтоТеста(Объект.ПутьКФайлуСценария,"");
			Агент_СтруктураОтвета.Вставить("Результат","Успех");
			
		ИначеЕсли Агент_СтруктураЗапроса.Наименование="УстановитьПараметрыСценария" Тогда
		ИначеЕсли Агент_СтруктураЗапроса.Наименование="ПолучитьПараметрыСценария" Тогда
		ИначеЕсли Агент_СтруктураЗапроса.Наименование="УстановитьПараметрыМенеджера" Тогда
		ИначеЕсли Агент_СтруктураЗапроса.Наименование="ПолучитьПараметрыМенеджера" Тогда
		ИначеЕсли Агент_СтруктураЗапроса.Наименование="ЗагрузитьСценарий" Тогда
			// к нам в параметрах должены прийти условия
			Если Агент_СтруктураЗапроса.items.Свойство("ПутьКФайлуСценария") 
				И ЗначениеЗаполнено(Агент_СтруктураЗапроса.items.ПутьКФайлуСценария) Тогда
				Объект.ПутьКФайлуСценария = Агент_СтруктураЗапроса.items.ПутьКФайлуСценария;
			КонецЕсли;
			Если Агент_СтруктураЗапроса.items.Свойство("ПутьККаталогуБиблиотекиСценариев") 
				И ЗначениеЗаполнено(Агент_СтруктураЗапроса.items.ПутьККаталогуБиблиотекиСценариев) Тогда
				Объект.ПутьККаталогуБиблиотекиСценариев = Агент_СтруктураЗапроса.items.ПутьККаталогуБиблиотекиСценариев;
			КонецЕсли;
			Если Агент_СтруктураЗапроса.items.Свойство("ПутьККаталогуНаборовСценариев") 
				И ЗначениеЗаполнено(Агент_СтруктураЗапроса.items.ПутьККаталогуНаборовСценариев) Тогда
				Объект.ПутьККаталогуНаборовСценариев = Агент_СтруктураЗапроса.items.ПутьККаталогуНаборовСценариев;
			КонецЕсли;		
				
			мАгент_ЗагрузитьСценарийАвтоТеста(Объект.ПутьКФайлуСценария,"");	
			Агент_СтруктураОтвета.Вставить("Результат","Успех");
		ИначеЕсли Агент_СтруктураЗапроса.Наименование="ЗапуститьСценарий" Тогда
			мАгент_ЗапуститьСценарийАвтоТеста();
			Агент_СтруктураОтвета.Вставить("Результат","Успех");
		ИначеЕсли Агент_СтруктураЗапроса.Наименование="" Тогда
			Агент_СтруктураОтвета.Вставить("Результат","Ошибка");
			Агент_СтруктураОтвета.Вставить("ТекстОшибки","Неподдерживаемая команда");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура мАгент_СформироватьСообщениеОшибки(Знач ТекстОшибки)

	Агент_СтруктураОтвета = новый Структура("ИмяКоманды,НомерСообщения,Результат","Неопределено",0,"Ошибка");
	Агент_СтруктураОтвета.Вставить("ИмяКоманды","error");
	Агент_СтруктураОтвета.Вставить("ТекстОшибки",ТекстОшибки);

КонецПроцедуры

&НаКлиенте
Процедура мАгент_ПодготовкаЗапускАвтоТеста(ПутьКФайлу, ПутьКаталогаОтчета, ПаузаПослеЗаускаКлиентов=0)
	
	ЗагрузитьСценарийФорматXML(ПутьКФайлу);
	// если произошли ошибки при загрузке надо их сохранить в лог????
	
	// каталог выгрузки отчетов
	Если НЕ ЗначениеЗаполнено(Объект.ПутьККаталогуОтчетовВыполненияТестов) Тогда
		Объект.ПутьККаталогуОтчетовВыполненияТестов=ПутьКаталогаОтчета;
	КонецЕсли;
	
	// переключим вкладку
	Элементы.ЖурналПреобразование.ТекущаяСтраница = Элементы.СтраницаДеревоСценария;
	мСценСкрипт_РазвернутьТаблицуВДерево(true);
	//мСценСкрипт_ЗапуститьКлиентовТестированияДляТеста();
	
	// пауза
	Если ПаузаПослеЗаускаКлиентов>0 Тогда
		ВремяОкончанияОжидания = ТекущаяДата() + ПаузаПослеЗаускаКлиентов;
		Пока Не ТекущаяДата() >= ВремяОкончанияОжидания Цикл
	    	// ожидаем запуска
		КонецЦикла;
	КонецЕсли;
	
	ТестЗапущен = Ложь; // Виссаров ES- [22.11.2016]  Снимаем флаг, чтобы перенициализировать параметры для запуска нового сценария пакета
	ПройтиПоУзлуГенерацияНомерШагаВниз(ДеревоСценария); // проставим номера после загрузки
	мСценСкрипт_ВыполнитьСценарийПоШагам(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура мАгент_ЗагрузитьСценарийАвтоТеста(ПутьКФайлу, ПутьКаталогаОтчета, ПаузаПослеЗаускаКлиентов=0)
	
	ЗагрузитьСценарийФорматXML(ПутьКФайлу);
	// если произошли ошибки при загрузке надо их сохранить в лог????
	
	// каталог выгрузки отчетов
	Если НЕ ЗначениеЗаполнено(Объект.ПутьККаталогуОтчетовВыполненияТестов) Тогда
		Объект.ПутьККаталогуОтчетовВыполненияТестов=ПутьКаталогаОтчета;
	КонецЕсли;
	
	// переключим вкладку
	Элементы.ЖурналПреобразование.ТекущаяСтраница = Элементы.СтраницаДеревоСценария;
	мСценСкрипт_РазвернутьТаблицуВДерево(true);
	//мСценСкрипт_ЗапуститьКлиентовТестированияДляТеста();
	
	// пауза
	Если ПаузаПослеЗаускаКлиентов>0 Тогда
		ВремяОкончанияОжидания = ТекущаяДата() + ПаузаПослеЗаускаКлиентов;
		Пока Не ТекущаяДата() >= ВремяОкончанияОжидания Цикл
	    	// ожидаем запуска
		КонецЦикла;
	КонецЕсли;
	
	ТестЗапущен = Ложь; // Виссаров ES- [22.11.2016]  Снимаем флаг, чтобы перенициализировать параметры для запуска нового сценария пакета
	ПройтиПоУзлуГенерацияНомерШагаВниз(ДеревоСценария); // проставим номера после загрузки

КонецПроцедуры

&НаКлиенте
Процедура мАгент_ЗапуститьСценарийАвтоТеста()
	
	ТестЗапущен = Ложь; // Виссаров ES- [22.11.2016]  Снимаем флаг, чтобы перенициализировать параметры для запуска нового сценария пакета
	ПройтиПоУзлуГенерацияНомерШагаВниз(ДеревоСценария); // проставим номера после загрузки
	мСценСкрипт_ВыполнитьСценарийПоШагам(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура РежимРаботаКомандыЧерезКаталогПриИзменении(Элемент)

	Если Объект.РежимРаботаАгента = Истина Тогда
		мАгент_ВыполнитьСинхронизацию();
		Элементы.СтраницаРежимАгента.Видимость = Истина;
		Элементы.СтраницаЖурнал.Видимость = Ложь;
		Элементы.СтраницаСохранение.Видимость = Ложь;
		Элементы.СтраницаОПрограмме.Видимость = Ложь;
		Элементы.ЖурналПреобразование.ТекущаяСтраница = Элементы.СтраницаРежимАгента;
	Иначе
		ОтключитьОбработчикОжидания("мАгент_ВыполнитьСинхронизацию");
		Элементы.СтраницаРежимАгента.Видимость = Ложь;
		Элементы.СтраницаЖурнал.Видимость = Истина;
		Элементы.СтраницаСохранение.Видимость = Истина;
		Элементы.СтраницаОПрограмме.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДляДальнейшейСортировки

&НаКлиенте
Процедура мРедакторРазвернутьВсеУзлы(Команда)
	ЭлементыДерева = ДеревоСценария.ПолучитьЭлементы();
	Для каждого стр из ЭлементыДерева Цикл
		Элементы.ДеревоСценария.Развернуть(стр.ПолучитьИдентификатор(),Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура мРедакторСвернутьВсеУзлы(Команда)
	мРедакторСвернутьВсеУзлыРекурсия(ДеревоСценария,Истина);
КонецПроцедуры

&НаКлиенте
Процедура мРедакторСвернутьВсеУзлыРекурсия(Элемент,ДляВсех=Ложь)
	ЭлементыДерева = Элемент.ПолучитьЭлементы();
	Для каждого стр из ЭлементыДерева Цикл
		Если ДляВсех=Истина Тогда
			мРедакторСвернутьВсеУзлыРекурсия(стр,ДляВсех);
		КонецЕсли;
		Если Элементы.ДеревоСценария.Развернут(стр.ПолучитьИдентификатор())=Истина Тогда
			Элементы.ДеревоСценария.Свернуть(стр.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоПроектов.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоГруппа=Истина Тогда
		Возврат;
	КонецЕсли;
	
	// проверим на модифицированность сценария
	Если ТекущийСценарийИзменен=Ложь Тогда
		Объект.ПутьКФайлуСценария = ТекущиеДанные.ПутьКФайлу;
		мСценСкрипт_ЗагрузитьСценарийПоПути(ТекущиеДанные.ПутьКФайлу);	
	Иначе
		мСценСкрипт_ПоказатьВопросПриНаличииИзмененийСценария(ТекущиеДанные.ПутьКФайлу);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура мСценПакет_ЗагрузитьИзКаталогаВПроекты(Команда)
	
	Корень = ДеревоПроектов.ПолучитьЭлементы();
	
	// Загрузим рабочий каталог
	Узел = Неопределено;
	
	Для каждого стр из Корень Цикл
		Если стр.Наименование = "Рабочий каталог" Тогда
			Узел = стр;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Загрузим набор тестов
	Узел = Неопределено;
	
	Для каждого стр из Корень Цикл
		Если стр.Наименование = "Набор сценариев" Тогда
			Узел = стр;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел=Неопределено Тогда
		Узел = Корень.Добавить();
		Узел.Наименование = "Набор сценариев";
		Узел.ЭтоГруппа = Истина;
		Узел.ДанныеКартинки = 3;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПутьККаталогуНаборовСценариев) Тогда
		// Диалог указания каталога
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
		Диалог.Заголовок = "Выберите кталог набор сценариев"; 
		Диалог.МножественныйВыбор = Ложь; 
		мПараметры = новый Структура("ИмяРеквизита,ИмяДерева,ИдентификаторУзла","ПутьККаталогуНаборовСценариев","ДеревоПроектов",Узел.ПолучитьИдентификатор());
		ВыборКаталогаСценариевТестирования = новый ОписаниеОповещения("мСценПакет_ВыборКаталогаСценариевТестирования",ЭтотОбъект,мПараметры);
		Диалог.Показать(ВыборКаталогаСценариевТестирования);
	Иначе
		мПараметры = новый Структура("ИмяРеквизита,ИмяДерева,ИдентификаторУзла","ПутьККаталогуНаборовСценариев","ДеревоПроектов",Узел.ПолучитьИдентификатор());
		НачатьПоискФайлов(Новый ОписаниеОповещения("мСценПакет_ВыборКаталогаСценариевТестированияЗавершение", ЭтаФорма, мПараметры), Объект.ПутьККаталогуНаборовСценариев,"*.xml",Истина);
	КонецЕсли;	
	
	// Загрузим библиотеку готовых шагов
	Узел = Неопределено;
	
	Для каждого стр из Корень Цикл
		Если стр.Наименование = "Библиотека" Тогда
			Узел = стр;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел=Неопределено Тогда
		Узел = Корень.Добавить();
		Узел.Наименование = "Библиотека";
		Узел.ЭтоГруппа = Истина;
		Узел.ДанныеКартинки = 4;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПутьККаталогуБиблиотекиСценариев) Тогда
		// Диалог указания каталога
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
		Диалог.Заголовок = "Выберите кталог с библиотекой готовых шагов"; 
		Диалог.МножественныйВыбор = Ложь; 
		мПараметры = новый Структура("ИмяРеквизита,ИмяДерева,ИдентификаторУзла","ПутьККаталогуБиблиотекиСценариев","ДеревоПроектов",Узел.ПолучитьИдентификатор());
		ВыборКаталогаСценариевТестирования = новый ОписаниеОповещения("мСценПакет_ВыборКаталогаСценариевТестирования",ЭтотОбъект,мПараметры);
		Диалог.Показать(ВыборКаталогаСценариевТестирования);
	Иначе
		мПараметры = новый Структура("ИмяРеквизита,ИмяДерева,ИдентификаторУзла","ПутьККаталогуБиблиотекиСценариев","ДеревоПроектов",Узел.ПолучитьИдентификатор());
		НачатьПоискФайлов(Новый ОписаниеОповещения("мСценПакет_ВыборКаталогаСценариевТестированияЗавершение", ЭтаФорма, мПараметры), Объект.ПутьККаталогуБиблиотекиСценариев,"*.xml",Истина);
	КонецЕсли;
	

	
	
КонецПроцедуры


&НаКлиенте
Процедура мСценСкрипт_ПоказатьВопросПриНаличииИзмененийСценария(ПутьКФайлу="")
	
	Перем Оповещение;
	
	мПараметры = новый Структура("ПутьКФайлу",ПутьКФайлу);
	// зададим вопрос/ об отмене изменений
	Оповещение = Новый ОписаниеОповещения("мСценСкрипт_ПослеОтветаНаВопросЗагрузкиВыбранногоСценария", ЭтотОбъект, мПараметры); // Прописываем название процедуры-обработчика.
	
	ПоказатьВопрос(Оповещение, "В текущем сценарии обнаружены изменения. Игнорировать и загрузить выбранный сценарий?",  // вместо привычного "Вопрос", теперь "ПоказатьВопрос"
	РежимДиалогаВопрос.ДаНетОтмена,
	0,  // задержка (секунды). необязательно
	КодВозвратаДиалога.Да, // задает кнопку по умолчанию. необязательно
	"Обнаружены изменения ..." // устанавливаем заголовок. необязательно
	);

КонецПроцедуры


&НаКлиенте 
Процедура мСценСкрипт_ПослеОтветаНаВопросЗагрузкиВыбранногоСценария(Результат, Параметры) Экспорт // здесь, думаю, комментировать нечего
	    	
	Если Результат = КодВозвратаДиалога.Да Тогда  
		Если Параметры.Свойство("ПутьКФайлу") Тогда
			Объект.ПутьКФайлуСценария = Параметры.ПутьКФайлу;
		КонецЕсли;
		мСценСкрипт_ЗагрузитьСценарийПоПути(Объект.ПутьКФайлуСценария);		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьККаталогуБиблиотекиСценариевНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	Диалог.Заголовок = "Выберите каталог"; 
	Диалог.ПолноеИмяФайла = ""; 
	Диалог.МножественныйВыбор = Ложь; 
	Если ЗначениеЗаполнено(Объект.ПутьККаталогуБиблиотекиСценариев) Тогда
		Диалог.Каталог = ПолучитьКаталогПоПутиФайла(Объект.ПутьККаталогуБиблиотекиСценариев);
	КонецЕсли;	
	Если Диалог.Выбрать() Тогда 
		Объект.ПутьККаталогуБиблиотекиСценариев = Диалог.Каталог; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура мРедакторПроекта_СоздатьПроект(Команда)
	
	ТекущиеДанные = Элементы.ДеревоПроектов.ТекущиеДанные;
	ТекущийПуть = "";
	
	Если НЕ ТекущиеДанные=Неопределено Тогда
		ТекущийПуть = ТекущиеДанные.ПутьКФайлу;
	КонецЕсли;
	
	мПараметры = новый Структура("Действие,ТекущийПуть,Severity,ЭтоНовый,ПутьККаталогуНаборовСценариев,ПутьККаталогуБиблиотекиСценариев","Новый сценарий",ТекущийПуть,"Значительная",Истина,Объект.ПутьККаталогуНаборовСценариев,Объект.ПутьККаталогуБиблиотекиСценариев);
	Форма = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Форма_РедактированиеПроекта",мПараметры);
	Форма.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура мРедакторПроекта_ИзменитьПроект(Команда)
	
	ТекущиеДанные = Элементы.ДеревоПроектов.ТекущиеДанные;
	ТекущийПуть = "";
	
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные=Неопределено Тогда
		ТекущийПуть = ТекущиеДанные.ПутьКФайлу;
	КонецЕсли;
	
	Если ТекущиеДанные.Текущий=Ложь Тогда
		Сообщить("Изменить свойства можно только для текущего проекта!");
		Возврат;
	КонецЕсли;
	
	мПараметры = новый Структура("Наименование,Автор,ПутьКФайлуСценария,ТипФайлаСценария,Комментарий,ИдентификаторТеста,Severity");
	ЗаполнитьЗначенияСвойств(мПараметры,Объект); 
	мПараметры.Вставить("Действие","Изменить сценарий");
	мПараметры.Вставить("ТекущийПуть",ТекущийПуть);
	
	Форма = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Форма_РедактированиеПроекта",мПараметры);
	Форма.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура мРедакторПроекта_ЗагрузитьПроект(Команда)
	
	ТекущиеДанные = Элементы.ДеревоПроектов.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоГруппа=Истина Тогда
		Возврат;
	КонецЕсли;
	
	// проверим на модифицированность сценария
	Если ТекущийСценарийИзменен=Ложь Тогда
		Объект.ПутьКФайлуСценария = ТекущиеДанные.ПутьКФайлу;
		мСценСкрипт_ЗагрузитьСценарийПоПути(ТекущиеДанные.ПутьКФайлу);	
	Иначе
		мСценСкрипт_ПоказатьВопросПриНаличииИзмененийСценария(ТекущиеДанные.ПутьКФайлу);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура мРедакторПроекта_ПереместитьПроект(Команда)
	
	// открываем форму дерева для выбора куда	
	мПараметры = новый Структура("Действие,Команда,ИмяТаблицы","ВыборПроектаПоДереву",Неопределено,"ДеревоПроектов");
	мПараметры.Вставить("АдресХранилища",мРедакторПроекта_ПереместитьДеревоПроектаВХранилище());
	Форма = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Форма_ВнешнееРедактированиеСвойств",мПараметры);
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура мРедакторПроекта_ПереместитьПроектМеждуКаталогами(мПараметры)
	
	ТекущиеДанные = Элементы.ДеревоПроектов.ТекущиеДанные;
	
	Если ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(мПараметры.Ключ) Тогда
		Сообщить("Поле ключ/путь к файлу не заполнено отказ!");
		Возврат;
	КонецЕсли;
	
	ИмяФайлаИсточника = ТекущиеДанные.ПутьКФайлу;
	Файл = новый Файл(ИмяФайлаИсточника);
	ИмяФайлаПриемника = мПараметры.Ключ+"\"+Файл.Имя;
	
	ПеремещениеФайлаПроектаМеждуКаталогами = новый ОписаниеОповещения("ПереместитьФайлАсинхронноЗавершение",ЭтотОбъект);
	НачатьПеремещениеФайла(ПеремещениеФайлаПроектаМеждуКаталогами,ИмяФайлаИсточника,ИмяФайлаПриемника);
	
КонецПроцедуры


&НаКлиенте
Процедура мРедакторПроекта_СоздатьПапку(Команда)
	
	ТекущиеДанные = Элементы.ДеревоПроектов.ТекущиеДанные;
	ТекущийПуть = "";
	
	Если НЕ ТекущиеДанные=Неопределено Тогда
		ТекущийПуть = ТекущиеДанные.ПутьКФайлу;
	КонецЕсли;
	
	мПараметры = новый Структура("Действие,ТекущийПуть,ЭтоНовый,ПутьККаталогуНаборовСценариев,ПутьККаталогуБиблиотекиСценариев","Новый каталог",ТекущийПуть,Истина,Объект.ПутьККаталогуНаборовСценариев,Объект.ПутьККаталогуБиблиотекиСценариев);
	Форма = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Форма_РедактированиеПроекта",мПараметры);
	Форма.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ПереместитьФайлАсинхронноЗавершение(ПеремещенныйФайл, ДополнительныеПараметры) Экспорт
	//Сообщить("Успешно");	
	мСценПакет_ЗагрузитьИзКаталогаВПроекты(Неопределено);
КонецПроцедуры

&НаСервере
Функция мРедакторПроекта_ПереместитьДеревоПроектаВХранилище()
	АдресХранилища = "";
	Дерево = РеквизитФормыВЗначение("ДеревоПроектов");
	АдресХранилища = ПоместитьВоВременноеХранилище(Дерево);
	Возврат АдресХранилища;
КонецФункции

&НаКлиенте
Процедура мРедакторПроекта_НавигаторОбъектов(Команда)
	мПараметры = новый Структура;
	мПараметры.Вставить("НомерПорта",Объект.НомерПорта);
	мПараметры.Вставить("СтрокаПодключения",Объект.ПутьПодключенияКлиентаТестирования);
	Форма = ПолучитьФорму("ВнешняяОбработка.МенеджерСценарногоТеста.Форма.Форма_НавигаторОбъектов",мПараметры);
	Форма.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ЖурналПреобразованиеПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// откроем и сохраним помощь
	Если Элементы.ЖурналПреобразование.ТекущаяСтраница=Элементы.СтраницаОПрограмме Тогда
		
		//мРедакСценар_ПроверитьИнициализироватьБиблиотеки("Help-UI-TestManager","Help");	
		AboutHTML = "https://github.com/ivanov660/TestingTool-3/wiki/Менеджер-сценарного-теста";
		
	КонецЕсли;	
	
КонецПроцедуры


// Процедура - Проверить инициализировать библиотеки 
// Выполняет необходимые процедуры подготовки для работы с визульаным html js редактором в тонком клиенте
//
// Параметры:
//  ИмяБиблиотеки	 - строка	 - наименование библиотеки визуального html редактора
//  КаталогВыгрузки	 - строка	 - путь к каталогу, для принудительной выгрузки
//
&НаКлиенте
Процедура мРедакСценар_ПроверитьИнициализироватьБиблиотеки(Знач ИмяБиблиотеки, Знач ИмяМакета, Знач КаталогВыгрузки="")
	
	КорневойПутьПроекта = "Help-UI-TestManager";
	
	НеобходимоИнициализироватьБиблиотеку = Истина;
	ПутьККорнюПроекта = "";
	ПутьКФайлуБиблиотеки = "";
	МакетБиблиотеки = Неопределено;
	
	// определим каталоги
	Если НЕ ЗначениеЗаполнено(КаталогВыгрузки) Тогда
		ПутьККорнюПроекта = КаталогВременныхФайлов()+КорневойПутьПроекта+"\";
	Иначе
		ПутьККорнюПроекта = КаталогВыгрузки+КорневойПутьПроекта+"\";
	КонецЕсли;
	
	// определим пути
	ПутьКФайлуБиблиотеки = ПутьККорнюПроекта+ИмяБиблиотеки+".html";
	
	Если ЗначениеЗаполнено(ПутьКФайлуБиблиотеки) Тогда
		Файл = новый Файл(ПутьКФайлуБиблиотеки);
		НеобходимоИнициализироватьБиблиотеку = НЕ Файл.Существует();
	КонецЕсли;
	
	Если НеобходимоИнициализироватьБиблиотеку Тогда 		
		
		СоздатьКаталог (ПутьККорнюПроекта);
		                                  		
		// скопируем в каталог файлы из архива
		МакетБиблиотеки = ПолучитьМакетНаСервере(ИмяМакета);
		
		Если МакетБиблиотеки<>Неопределено Тогда
			// сохраняем и распаковываем редактор
			ИмяФайлаZip = ИмяБиблиотеки+".zip";
			МакетБиблиотеки.Записать(ПутьККорнюПроекта+ИмяФайлаZip);
			ФайлАрхива = новый ЧтениеZipФайла(ПутьККорнюПроекта+ИмяФайлаZip);
			ФайлАрхива.ИзвлечьВсе(ПутьККорнюПроекта, РежимВосстановленияПутейФайловZIP.Восстанавливать); 
			ФайлАрхива.Закрыть();		
		Иначе
			ПутьКБиблиотеке = "";
			Сообщить("Неизвестаная ошибка сохранения макета...");
		КонецЕсли;
		
	КонецЕсли;
	
	// Загрузим файл редактора
	AboutHTML = ПутьКФайлуБиблиотеки;
	
КонецПроцедуры

// Функция - Получить макет на сервере
//
// Параметры:
//  ИмяМакета	 - строка	 - имя макета
// 
// Возвращаемое значение:
// макет  - макет
//
&НаСервере
Функция ПолучитьМакетНаСервере(ИмяМакета)
	Макет = Неопределено;
	Попытка
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		Макет = ОбработкаОбъект.ПолучитьМакет(ИмяМакета);
	Исключение
		Сообщить(ОписаниеОшибки());		
	КонецПопытки;
	Возврат Макет;
КонецФункции




#КонецОбласти

#Область GIT


&НаКлиенте
Процедура ПутьКИсполняемомуФайлуGITНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие); 
	Диалог.Заголовок = "Выберите исполняемый файл GIT (bash)"; 
	Диалог.ПолноеИмяФайла = ""; 
	Фильтр = "Exe-файл (*.exe)|*.exe"; 
	Диалог.Фильтр = Фильтр; 
	Диалог.МножественныйВыбор = Ложь; 
	Если ЗначениеЗаполнено(Объект.ПутьКИсполняемомуФайлуGIT) Тогда
		Диалог.Каталог = ПолучитьКаталогПоПутиФайла(Объект.ПутьКИсполняемомуФайлуGIT);
	КонецЕсли;	
	Если Диалог.Выбрать() Тогда 
		Объект.ПутьКИсполняемомуФайлуGIT = Диалог.ПолноеИмяФайла; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПутьКаталогGITНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	// Диалог указания каталога
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	Диалог.Заголовок = "Выберите корневой кталог GIT"; 
	Диалог.МножественныйВыбор = Ложь; 
	Если ЗначениеЗаполнено(Объект.ПутьККаталогуGIT) Тогда
		Диалог.Каталог = Объект.ПутьККаталогуGIT;
	КонецЕсли;	
	Если Диалог.Выбрать() Тогда 
		Объект.ПутьККаталогуGIT = Диалог.Каталог; 
	КонецЕсли;
КонецПроцедуры



#КонецОбласти

#Область МассивИзменений


&Наклиенте
Процедура ПодпискаОбновленияКнопкиОтмены() Экспорт
	
	Если МассивИзменений=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивИзменений.Количество()=0 Тогда
		Если Элементы.ДеревоСценариямРедактор_Отмена.Доступность=Истина Тогда
			Элементы.ДеревоСценариямРедактор_Отмена.Доступность=Ложь;
		КонецЕсли;
	Иначе
		Если Элементы.ДеревоСценариямРедактор_Отмена.Доступность=Ложь Тогда
			Элементы.ДеревоСценариямРедактор_Отмена.Доступность=Истина;
		КонецЕсли;
	КонецЕсли;
		
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменениеВТаблицуИзменений(МассивИзменений,Наименование="")
	
	Если Объект.ИспользоватьСохранениеДерева=Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивИзменений=Неопределено Тогда
		ИнициализироватьТаблицуИзменений();
	КонецЕсли;
	
	UID = "";
	ТекущиеДанные = Элементы.ДеревоСценария.ТекущиеДанные;
	Если ТекущиеДанные<>Неопределено Тогда
		UID = ТекущиеДанные.UID;
	КонецЕсли;
	
	СохранитьИзменениеВТаблицуИзмененийСервер(МассивИзменений,UID,Наименование);
	
	ПодключитьОбработчикОжидания("ПодпискаОбновленияКнопкиОтмены",0.5,Истина);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьИзменениеВТаблицуИзмененийСервер(МассивИзменений,UID="",Наименование="")
	
	Если МассивИзменений=Неопределено Тогда
		ИнициализироватьТаблицуИзмененийСервер(МассивИзменений);
	КонецЕсли;
	
	Источник = РеквизитФормыВЗначение("ДеревоСценария");
	
	Если Источник=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Значение = новый Структура("ЗначениеСтр,UID,Наименование,ДатаВремя",ЗначениеВСтрокуВнутр(Источник),UID,Наименование,ТекущаяДата());
	
	МассивИзменений.Добавить(Значение);
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяПоТаблицеИзмененийНазад(МассивИзменений)
	
	Если МассивИзменений.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	UID = "";
	ВернутьсяПоТаблицеИзмененийНазадСервер(МассивИзменений,	UID);
	Если НЕ ЗначениеЗаполнено(UID) И НЕ Элементы.ДеревоСценария.ТекущиеДанные=Неопределено Тогда
		UID = Элементы.ДеревоСценария.ТекущиеДанные.UID;
	КонецЕсли;
	Узел = НайтиСтрокуПоUID(ДеревоСценария,UID);
	Если Узел<>Неопределено Тогда
		РазвернутьДерево(Элементы.ДеревоСценария,ДеревоСценария,Узел.ПолучитьИдентификатор(),Истина);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПодпискаОбновленияКнопкиОтмены",1,Истина);
	
КонецПроцедуры

&НаКлиенте
Функция НайтиСтрокуПоUID(Знач РодительУзел, Знач UID)
	
	Узел = Неопределено;
	
	Для каждого стр из РодительУзел.ПолучитьЭлементы() Цикл
		
		Если стр.UID=UID Тогда
			Возврат стр;
		КонецЕсли;
		
		Узел = НайтиСтрокуПоUID(стр,UID);
		Если Узел<>Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Узел;
	
КонецФункции

// <Разворачивает строки дерева и позиционирует фокус в таблице на строку>
// <Внимание! Не делает активным таблицу формы!>
// <Если у вас что-то неправильно работает - проверьте сначала, что у вас есть строка в программе:>
// <СтандартнаяОбработка = ЛОЖЬ>
//
// Параметры
//  <ЭлементФормы>  - <ЭлементФормы.ТаблицаФормы> - <Элемент формы>
//                 <Т.е. если название таблицы "Материалы", то вызов процедуры таков:>
//                 <РазвернутьДерево(Элементы.Материалы, Дер, Идент, Истина)>
//  <Дерево>  - <ДанныеФормыДерево> - <Ссылка на реквизит формы типа ДеревоЗначений>
//                 <Имя реквизита формы>
//  <ИдентификаторСтроки>  - <Число> - <Это ИДЕНТИФИКАТОР! строки ДанныеФормыДерево>
//                 <Получается функцией "ПолучитьИдентификатор()">
//  <Позиционирование>  - <Булево> - <Определяем надо ли спозиционироваться на выбранной строке>
//  <ТекСтрока>  - <Число> - <Служебный реквизит, нужен для определения текущей строки в таблице>
//
&НаКлиенте
Процедура РазвернутьДерево(ЭлементФормы, Дерево, ИдентификаторСтроки, Позиционирование = Истина, ТекСтрока = Неопределено) Экспорт
	//Сохраним текущую строку в таблицеформы
	Если ТекСтрока = Неопределено Тогда
		ТекСтрока = ЭлементФормы.ТекущаяСтрока;
	КонецЕсли;
	
	//Получим родителя и вызовем рекурсию
	Узел = Дерево.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если Узел<>Неопределено Тогда
		Родитель = Узел.ПолучитьРодителя();
	КонецЕсли;
	
	Если Родитель <> Неопределено Тогда
		
		ИдентификаторРодителя = Родитель.ПолучитьИдентификатор();
		Если НЕ ЭлементФормы.Развернут(ИдентификаторРодителя) Тогда
			ЭлементФормы.Развернуть(ИдентификаторРодителя);
		КонецЕсли;
		РазвернутьДерево(ЭлементФормы, Дерево, ИдентификаторРодителя, ЛОЖЬ, "НЕ ЗАДАНО");
	КонецЕсли;
	
	Если Позиционирование Тогда
		ЭлементФормы.ТекущаяСтрока = ИдентификаторСтроки;
	ИначеЕсли ТекСтрока <> "НЕ ЗАДАНО" Тогда
		ЭлементФормы.ТекущаяСтрока = ТекСтрока;
	КонецЕсли;
	
КонецПроцедуры // РазвернутьДерево()

&НаСервере
Процедура ВернутьсяПоТаблицеИзмененийНазадСервер(МассивИзменений,UID)
	
	Если МассивИзменений.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	стр = МассивИзменений.Получить(МассивИзменений.ВГраница());
	Значение = ЗначениеИзСтрокиВнутр(стр.ЗначениеСтр);
	UID = стр.UID;
	ЗначениеВРеквизитФормы(Значение,"ДеревоСценария");
	МассивИзменений.Удалить(МассивИзменений.ВГраница());
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуИзменений()
	
	МассивИзменений.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьТаблицуИзменений()
	
	МассивИзменений = новый Массив();
	ПодключитьОбработчикОжидания("ПодпискаОбновленияКнопкиОтмены",0.5,Истина);
	
КонецПроцедуры


&НаСервере
Процедура ИнициализироватьТаблицуИзмененийСервер(МассивИзменений)
	
	МассивИзменений = новый Массив();
	
КонецПроцедуры
#КонецОбласти


#Область СохранениеЗагрузкаНастроекПодключения1С

&НаКлиенте
Процедура мНастройки_Сохранить(Команда)
	
	мСтруктура = новый Структура("ФайловаяБаза,ПутьПодключенияКлиентаТестирования,Пользователь1С,Пароль1С,НомерПорта,ДополнительныеОпцииЗапуска");
	ЗаполнитьЗначенияСвойств(мСтруктура,Объект);
	
	мПредставление = Объект.ПутьПодключенияКлиентаТестирования+"@"+Объект.Пользователь1С;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку( Новый ПараметрыЗаписиJSON(,,,ЭкранированиеСимволовJSON.СимволыВнеASCII,Истина,Истина) );
	Попытка
		ЗаписатьJSON( ЗаписьJSON, мСтруктура, Новый НастройкиСериализацииJSON() );
		мСтрокаНастроек = ЗаписьJSON.Закрыть();
		
		// найдем если уже есть такая запись
		мНайденаНастройка = Ложь;
		Для каждого стр из СохраненныеНастройкиПодключения Цикл
			Если стр.Представление=мПредставление Тогда
				стр.Значение = мСтрокаНастроек;
				мНайденаНастройка = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ мНайденаНастройка Тогда
			СохраненныеНастройкиПодключения.Добавить(мСтрокаНастроек,мПредставление);
		КонецЕсли;
		
	Исключение
		Сообщить(ОписаниеОшибки());
	Конецпопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СохраненныеНастройкиПодключенияОбработкаВыбора(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохраненныеНастройкиПодключенияОбработкаВыбораФрагмент(ВыбранноеЗначение.Значение);

КонецПроцедуры

&НаКлиенте
Процедура СохраненныеНастройкиПодключенияОбработкаВыбораФрагмент(Знач ВыбранноеЗначение)
	
	Перем мСтрокаНастроек, ЧтениеJSON;
	
	Попытка
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку( ВыбранноеЗначение );
		мСтрокаНастроек = ПрочитатьJSON( ЧтениеJSON ,,  );
		ЧтениеJSON.Закрыть();
		
		ЗаполнитьЗначенияСвойств(Объект,мСтрокаНастроек);
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура мНастройки_Выбрать(Команда)
	мОповещение = новый ОписаниеОповещения("СохраненныеНастройкиПодключенияОбработкаВыбора",ЭтотОбъект);
	СохраненныеНастройкиПодключения.ПоказатьВыборЭлемента(мОповещение,"выбрать настройку");
КонецПроцедуры

#КонецОбласти

#Область Новое

&НаСервереБезКонтекста
Процедура СообщитьОбОшибке(ИмяФункции,Сообщение) Экспорт
	
	ЗаписьЖурналаРегистрации("МенеджерСценарногоТеста",УровеньЖурналаРегистрации.Ошибка,Неопределено,Неопределено,ИмяФункции+Символы.ПС+Сообщение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоНеПредприятие1СПриИзменении(Элемент)
	Если Объект.ЭтоНеПредприятие1С=Истина Тогда 
		Элементы.ГруппаПараметрыПодключения1С.Видимость = Ложь;
	Иначе
		Элементы.ГруппаПараметрыПодключения1С.Видимость = Истина;
	КонецЕсли;	
КонецПроцедуры















#КонецОбласти