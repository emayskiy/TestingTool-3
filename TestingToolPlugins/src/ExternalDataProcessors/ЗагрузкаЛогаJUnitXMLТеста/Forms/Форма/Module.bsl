&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	АвтозагрузкаЛогов = Ложь;
	АвтоУдалениеФайловЛога = Ложь;
	АтоЗакрытие = Ложь;
	
	// Если запуск автозагрузки
	Если ЗначениеЗаполнено(ПараметрЗапуска) Тогда
		Сообщить("Обнаружены параметры автозапуска!");
		КоманднаяСтрока = СтрЗаменить(ПараметрЗапуска,"¶"," ");
		// удалим переносы строки, для корректного разбора 
		КоманднаяСтрока = СтрЗаменить(КоманднаяСтрока,Символы.ПС," "); 		
		КоманднаяСтрока = СтрЗаменить(КоманднаяСтрока,"TestLogUI",Символы.ПС+"TestLogUI");
		КоманднаяСтрока = СтрЗаменить(КоманднаяСтрока,"TestClientIdUI",Символы.ПС+"TestClientIdUI");
		КоманднаяСтрока = СтрЗаменить(КоманднаяСтрока,"TestNumberUI",Символы.ПС+"TestNumberUI");
		КоманднаяСтрока = СтрЗаменить(КоманднаяСтрока,"TestAssemblyUI",Символы.ПС+"TestAssemblyUI");
		КоманднаяСтрока = СтрЗаменить(КоманднаяСтрока,"TestConnectionStringUI",Символы.ПС+"TestConnectionStringUI");
		КоманднаяСтрока = СтрЗаменить(КоманднаяСтрока,"TestCloseUI",Символы.ПС+"TestCloseUI");
		КоманднаяСтрока = СтрЗаменить(КоманднаяСтрока,"TestDeleteLogUI",Символы.ПС+"TestDeleteLogUI");
		КоманднаяСтрока = СтрЗаменить(КоманднаяСтрока,"TestCatalogDeleteUI",Символы.ПС+"TestCatalogDeleteUI");
		
		Для Индекс = 1 По СтрЧислоСтрок(КоманднаяСтрока) Цикл
			Подстрока = СтрПолучитьСтроку(КоманднаяСтрока, Индекс);
			Если Найти(Подстрока,"TestLogUI") Тогда 				
				ПутьКЛогу = СокрЛП(СтрЗаменить(Подстрока,"TestLogUI",""));
				Если Найти(ПутьКЛогу,"*") Тогда
					МассивЧастей = новый Массив;
					Если Найти(ПутьКЛогу,"\") Тогда
						МассивЧастей = СтрРазделить(ПутьКЛогу+"","\",Истина);
					ИначеЕсли Найти(ПутьКЛогу,"/") Тогда
						МассивЧастей = СтрРазделить(ПутьКЛогу+"","/",Истина);
					КонецЕсли;
					Если МассивЧастей.Количество()=0 Тогда
						Возврат;
					КонецЕсли;
					ПутьКаталог = СтрЗаменить(ПутьКЛогу,МассивЧастей[МассивЧастей.Количество()-1],"");
					ШаблонПоиска = СтрЗаменить(ПутьКЛогу,ПутьКаталог,"");
					
					АвтозагрузкаЛогов = Истина;					
					
				Иначе
					//ЗагрузитьЛогПоПути(ПутьКЛогу);
					//ЗавершитьРаботуСистемы(Ложь);
				КонецЕсли;
			ИначеЕсли Найти(Подстрока,"TestNumberUI") Тогда
				
				Попытка
					НомерПроверкиПоУмоланию = Число(СокрЛП(СтрЗаменить(СтрЗаменить(Подстрока,"TestNumberUI",""),Символы.НПП,"")));
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
			ИначеЕсли Найти(Подстрока,"TestAssemblyUI") Тогда
				
				Попытка 
					НомерСборки = Число(СокрЛП(СтрЗаменить(СтрЗаменить(Подстрока,"TestAssemblyUI",""),Символы.НПП,""))); 
				Исключение
					Сообщить(ОписаниеОшибки());
				КонецПопытки;
				
			ИначеЕсли  Найти(Подстрока,"TestConnectionStringUI") Тогда
				
				СтрокаПодключенияПоУмолчанию = СокрЛП(СтрЗаменить(Подстрока,"TestConnectionStringUI",""));
				
			ИначеЕсли  Найти(Подстрока,"TestClientIdUI") Тогда
				
				СтрокаПодключенияПоУмолчанию = СокрЛП(СтрЗаменить(Подстрока,"TestClientIdUI",""));
				
			ИначеЕсли Найти(Подстрока,"TestCloseUI") Тогда
				
				АтоЗакрытие = Истина;
				
			ИначеЕсли Найти(Подстрока,"TestDeleteLogUI") Тогда
				
				АвтоУдалениеФайловЛога = Истина;
				
			ИначеЕсли Найти(Подстрока,"TestCatalogDeleteUI") Тогда
				
				ПутьККаталогУдаления = СокрЛП(СтрЗаменить(Подстрока,"TestCatalogDeleteUI",""));
				
				Если НЕ ЗначениеЗаполнено(ПутьККаталогУдаления) Тогда
					СообщитьОбОшибке("ПриОткрытии","Путь какталога удаления пустой ("+ПутьККаталогУдаления+")",НомерСборки);
				КонецЕсли;
				
				Если НЕ Найти(ПутьКЛогу,ПутьККаталогУдаления) Тогда
					ПутьККаталогУдаления = "";
					СообщитьОбОшибке("ПриОткрытии","Путь какталога удаления ("+ПутьККаталогУдаления+")не совпадает с путем файла лога ("+ПутьКЛогу+")",НомерСборки);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		
		Если АвтозагрузкаЛогов=Истина Тогда
			НачатьПоискФайлов(Новый ОписаниеОповещения("ВыборКаталогаЛоговТестированияЗавершение", ЭтаФорма), ПутьКаталог,ШаблонПоиска,Истина);
		Иначе
			ЗагрузитьЛогПоПути(ПутьКЛогу);
			
			Если АвтоУдалениеФайловЛога  = Истина Тогда
				Попытка
					Если ЗначениеЗаполнено(ПутьККаталогУдаления) Тогда
						УдалитьФайлы(ПутьККаталогУдаления);
					Иначе
						УдалитьФайлы(ПутьКЛогу);
					КонецЕсли;
				Исключение
					ТекстОшибки = ОписаниеОшибки();
					СообщитьОбОшибке("ПриОткрытии",ТекстОшибки,НомерСборки);
				КонецПопытки;
			КонецЕсли;		
			
			Если АтоЗакрытие=Истина Тогда
				ЗавершитьРаботуСистемы(Ложь);
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;
	
	
	РежимПоискаИдентификатораКлиентаПриИзмененииФрагмент();
	РежимПоискаПроверкиПриИзмененииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборКаталогаЛоговТестированияЗавершение(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	
	Для каждого стр из НайденныеФайлы Цикл
		ЗагрузитьЛогПоПути(стр.ПолноеИмя);
		Если АвтоУдалениеФайловЛога  = Истина Тогда
			Попытка
				УдалитьФайлы(стр.ПолноеИмя);
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				СообщитьОбОшибке("ВыборКаталогаЛоговТестированияЗавершение",ТекстОшибки,НомерСборки);
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	Если АвтоУдалениеФайловЛога  = Истина Тогда
		Попытка
			Если ЗначениеЗаполнено(ПутьККаталогУдаления) Тогда
				УдалитьФайлы(ПутьККаталогУдаления);
			КонецЕсли;				
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			СообщитьОбОшибке("ВыборКаталогаЛоговТестированияЗавершение",ТекстОшибки,НомерСборки);
		КонецПопытки;
	КонецЕсли;
	
	Если АтоЗакрытие=Истина Тогда
		ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьЛог(Команда)
	ЗагрузитьЛогПоПути(ПутьКЛогу);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЛогПоПути(ПутьКФайлу)
	Сообщение = "";
	Если ЗагрузитьОтчетВыполненияСценарногоТестированияФорматJUnitXML(ПутьКФайлу,Сообщение)=Ложь Тогда
		Возврат;
	КонецЕсли;
	НайтиПромежуточныеДанные();
	СформироватьТаблицуИерархии();
	НайтиСопоставленияСервер();
	ОбработатьДанныеСервер();
	ЗагрузитьДанныеНаСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПутьКЛогуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие); 
	Диалог.Заголовок = "Выберите файл"; 
	Диалог.ПолноеИмяФайла = ""; 
	Фильтр = "XML-файл (*.xml)|*.xml"; 
	Диалог.Фильтр = Фильтр; 
	Если ЗначениеЗаполнено(ПутьКЛогу) Тогда
		Диалог.Каталог = ПолучитьКаталогПоПутиФайла(ПутьКЛогу);
	КонецЕсли;
	Диалог.МножественныйВыбор = Ложь; 
	ВыборФайлаОткрытияСтруктурыКонфигурации = новый ОписаниеОповещения("ВыборФайлаОткрытияСтруктурыКонфигурации",ЭтотОбъект);
	Диалог.Показать(ВыборФайлаОткрытияСтруктурыКонфигурации);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаОткрытияСтруктурыКонфигурации(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено И ВыбранныеФайлы.Количество() > 0 Тогда
		ПутьКЛогу = ВыбранныеФайлы[0]; 
	КонецЕсли; 
	
КонецПроцедуры

#Область ЗагрузкаФорматаОтчетаJUnit 

//&НаКлиенте

&НаКлиенте
Функция ЗагрузитьОтчетВыполненияСценарногоТестированияФорматJUnitXML(ПутьКФайлуОтчета,Сообщение="") Экспорт
	
	РезультатЗагрузки = Ложь;
	НомерПоПорядку = 0;
	НаименованиеТеста = "";
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ИгнорироватьПробелы = Ложь;
	
	ТаблицаТестов.Очистить();
	ТаблицаТестовыхСлучаев.Очистить();
	
	Если НЕ ЗначениеЗаполнено(ДатаВыполенения) Тогда
		Файл = новый Файл(ПутьКФайлуОтчета);
		Если Файл.Существует() Тогда
			ДатаВыполенения = Файл.ПолучитьУниверсальноеВремяИзменения();
		КонецЕсли;		
	КонецЕсли;
	
	
	Попытка
		ЧтениеXML.ОткрытьФайл(сокрЛП(ПутьКФайлуОтчета));
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		СообщитьОбОшибке("ЗагрузитьОтчетВыполненияСценарногоТестированияФорматJUnitXML",ТекстОшибки,НомерСборки);
		Возврат Ложь;
	КонецПопытки;
	
	ЧтениеXML.Прочитать();
	
	Если ЧтениеXML.ТипУзла = XMLNodeType.StartElement И
		ЧтениеXML.Имя = "testsuites" Тогда	
		ЗагрузитьБлок_TestSuites(ЧтениеXML,НомерПоПорядку);
		// у soap UI первым блоком может идти testsute
	ИначеЕсли ЧтениеXML.Имя = "testsuite" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
		НаименованиеТеста = ЧтениеXML.ПолучитьАтрибут("name");
		ЗагрузитьБлок_TestSuite(ЧтениеXML,НомерПоПорядку,НаименованиеТеста,НаименованиеТеста+"вход",Неопределено);
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	
	
	РезультатЗагрузки = Истина;	
	
	Возврат РезультатЗагрузки;
КонецФункции

// загрузим набор тестов
&НаКлиенте
Процедура ЗагрузитьБлок_TestSuites(ЧтениеXML,НомерПоПорядку)
	
	НаименованиеНабораТестов						= ЧтениеXML.ПолучитьАтрибут("name"); 
	
	ЧтениеXML.Прочитать();
	НаименованиеТеста = "";
	
	Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента И ЧтениеXML.ТипУзла<>ТипУзлаXML.Ничего 
		Цикл  		
		
		// описание теста
		Если ЧтениеXML.Имя = "testsuite" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЗагрузитьБлок_TestSuite(ЧтениеXML,НомерПоПорядку,НаименованиеТеста,НаименованиеНабораТестов,Неопределено);
		КонецЕсли;	
		
		ЧтениеXML.Прочитать();
	КонецЦикла;
	
КонецПроцедуры

// загрузим тест/папку
&НаКлиенте
Процедура ЗагрузитьБлок_TestSuite(ЧтениеXML,НомерПоПорядку,НаименованиеТеста,НаименованиеНабораТестов,Знач Тест)
	
	Если НаименованиеНабораТестов<>НаименованиеТеста И ЗначениеЗаполнено(НаименованиеТеста) И Тест=Неопределено Тогда
		Тест = ТаблицаТестов.Добавить();
		Тест.НомерСтроки = ТаблицаТестов.Количество();
		Тест.НомерПоПорядку = НомерПоПорядку;
		Тест.НаименованиеТеста = НаименованиеТеста;
		Тест.ДатаВыполенения = ДатаВыполенения;
		Тест.НомерПроверки = ?(ЗначениеЗаполнено(НомерПроверки),НомерПроверки,НомерПроверкиПоУмоланию);
		Тест.СтрокаПодключения = ?(ЗначениеЗаполнено(СтрокаПодключения),СтрокаПодключения,СтрокаПодключенияПоУмолчанию);
		Тест.Проверка = ПроверкаСФормы; // дефолтные значения с формы
		Тест.ТестируемыйКлиент = ТестируемыйКлиентСФормы; // дефолтные значения с формы
	КонецЕсли;	
	ЧтениеXML.Прочитать();
	
	Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента	И ЧтениеXML.ТипУзла<>ТипУзлаXML.Ничего
		Цикл	
		
		// описание теста
		Если ЧтениеXML.Имя = "testsuite" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			НаименованиеТеста	= ЧтениеXML.ПолучитьАтрибут("name");
			ЗагрузитьБлок_TestSuite(ЧтениеXML,НомерПоПорядку,НаименованиеТеста,НаименованиеНабораТестов,Тест);		
		ИначеЕсли ЧтениеXML.Имя = "properties" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЗагрузитьБлок_properties(ЧтениеXML);
		ИначеЕсли ЧтениеXML.Имя = "testcase" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ЗагрузитьБлок_TestCase(ЧтениеXML,НомерПоПорядку,НаименованиеТеста,Тест);
		КонецЕсли;	
		
		ЧтениеXML.Прочитать();
	КонецЦикла;
	
	
КонецПроцедуры

// загрузим properties
&НаКлиенте
Процедура ЗагрузитьБлок_properties(ЧтениеXML)
	
	ЧтениеXML.Прочитать();
	
	Пока НЕ (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеXML.Имя = "properties") И ЧтениеXML.ТипУзла<>ТипУзлаXML.Ничего
		Цикл	
		
		ЧтениеXML.Прочитать();
	КонецЦикла;	
	
КонецПроцедуры

// загрузим тестовый случай
&НаКлиенте
Процедура ЗагрузитьБлок_TestCase(ЧтениеXML,НомерПоПорядку,НаименованиеТеста,Знач Тест)
	
	НомерПоПорядку = НомерПоПорядку+1;
	
	случай = ТаблицаТестовыхСлучаев.Добавить();
	
	status = ЧтениеXML.ПолучитьАтрибут("status");
	
	случай.НомерСтроки = ТаблицаТестовыхСлучаев.Количество();
	случай.НомерПоПорядку 							= НомерПоПорядку;
	случай.ТестовыйСлучай 							= ЧтениеXML.ПолучитьАтрибут("name");
	случай.ВремяВыполнения 							= Число(ЧтениеXML.ПолучитьАтрибут("time"));
	случай.РезультатВыполнения						= ПолучитьРезультатВыполненияПоПредставлению(status);
	случай.ЭтоПапка									= Ложь;
	случай.ДатаВыполенения 							= ДатаВыполенения;
	случай.НомерСтрокиТестов						= Тест.НомерСтроки;
	Если случай.ВремяВыполнения>1000 Тогда
		случай.ВремяВыполнения = 1;
	КонецЕсли;
	
	
	ЧтениеXML.Прочитать();
	
	Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента И ЧтениеXML.ТипУзла<>ТипУзлаXML.Ничего
		Цикл	
		
		Если status=Неопределено И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента И 
			(ЧтениеXML.Имя = "failure" ИЛИ ЧтениеXML.Имя = "error" ИЛИ ЧтениеXML.Имя = "skipped" ) Тогда
			status = ЧтениеXML.Имя; 
		КонецЕсли;
		
		ДетальноеОписаниеОшибки = "";
		Если ЧтениеXML.Имя = "failure" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда			
			Тип = ЧтениеXML.ПолучитьАтрибут("type");
			случай.ОписаниеОшибки = случай.ОписаниеОшибки + ЧтениеXML.ПолучитьАтрибут("message");
			ЗагрузитьБлок_FailureErrorSkipedTestCase(ЧтениеXML,ДетальноеОписаниеОшибки);
			Если ЗначениеЗаполнено(ДетальноеОписаниеОшибки) Тогда
				случай.ОписаниеОшибки = случай.ОписаниеОшибки+Символы.ПС+ДетальноеОписаниеОшибки;
			КонецЕсли;
		ИначеЕсли ЧтениеXML.Имя = "error" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			Тип = ЧтениеXML.ПолучитьАтрибут("type");
			случай.ОписаниеОшибки = случай.ОписаниеОшибки + ЧтениеXML.ПолучитьАтрибут("message");
			ЗагрузитьБлок_FailureErrorSkipedTestCase(ЧтениеXML,ДетальноеОписаниеОшибки);
			Если ЗначениеЗаполнено(ДетальноеОписаниеОшибки) Тогда
				случай.ОписаниеОшибки = случай.ОписаниеОшибки+Символы.ПС+ДетальноеОписаниеОшибки;
			КонецЕсли;
		ИначеЕсли ЧтениеXML.Имя = "skipped" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			Тип = ЧтениеXML.ПолучитьАтрибут("type");
			случай.ОписаниеОшибки = случай.ОписаниеОшибки + ЧтениеXML.ПолучитьАтрибут("message");
			ЗагрузитьБлок_FailureErrorSkipedTestCase(ЧтениеXML,ДетальноеОписаниеОшибки);
			Если ЗначениеЗаполнено(ДетальноеОписаниеОшибки) Тогда
				случай.ОписаниеОшибки = случай.ОписаниеОшибки+Символы.ПС+ДетальноеОписаниеОшибки;
			КонецЕсли;
		КонецЕсли;
		
		
		ЧтениеXML.Прочитать();
	КонецЦикла;
	
	Если status=Неопределено Тогда
		случай.РезультатВыполнения						= ПолучитьРезультатВыполненияПоПредставлению("passed");
	Иначе
		случай.РезультатВыполнения						= ПолучитьРезультатВыполненияПоПредставлению(status);
	КонецЕсли;
	
КонецПроцедуры

// загрузим тестовый случай
&НаКлиенте
Процедура ЗагрузитьБлок_FailureErrorSkipedTestCase(ЧтениеXML,Значение)
	
	ЧтениеXML.Прочитать();
	
	Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента И ЧтениеXML.ТипУзла<>ТипУзлаXML.Ничего
		Цикл	
		
		Значение = ЧтениеXML.Значение;
		
		ЧтениеXML.Прочитать();
	КонецЦикла;	
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПреобразоватьСтрокуВДату(Знач ДатаСтрокой)
	Дата = Дата('00010101000000');
	Попытка
		ДатаСтрокой = СтрЗаменить(ДатаСтрокой,"-","");
		ДатаСтрокой = СтрЗаменить(ДатаСтрокой,"T","");
		ДатаСтрокой = СтрЗаменить(ДатаСтрокой,":","");
		Дата = Дата(ДатаСтрокой);
	Исключение
		Возврат Дата('00010101000000');
	КонецПопытки;
	Возврат Дата;
КонецФункции

&НаКлиенте
Функция ПолучитьРезультатВыполненияПоПредставлению(Знач severity)
	
	РезультатВыполнения = ПредопределенноеЗначение("Перечисление.ВариантыСерьезностиДефектов.ПустаяСсылка");
	
	
	Если severity="failure" Тогда
		РезультатВыполнения = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Провал");
	ИначеЕсли severity="error" Тогда
		РезультатВыполнения = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Ошибка");
	ИначеЕсли severity="passed" Тогда
		РезультатВыполнения = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Успешно");
	ИначеЕсли severity="skipped" Тогда
		РезультатВыполнения = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Пропуск");
	Иначе
		РезультатВыполнения = ПредопределенноеЗначение("Перечисление.РезультатыВыполненияШагов.Неопределено");
	КонецЕсли;   	
	
	Возврат РезультатВыполнения; 	
	
КонецФункции

#КонецОбласти

#область ОбработкаДанных

&НаКлиенте
Процедура СформироватьТаблицуИерархии()
	
	
КонецПроцедуры

&НаСервере
Процедура НайтиСопоставленияСервер()
	
	
	КешТестов = новый Соответствие;
	КешПроверок = новый Соответствие;
	КешТестируемыхКлиентов = новый Соответствие;
	
	Для каждого стр из ТаблицаТестов Цикл
		
		Если НЕ ЗначениеЗаполнено(стр.Проверка) Тогда
			Проверка = КешПроверок.Получить(стр.НомерПроверки);
			
			Если Проверка=Неопределено Тогда
				
				Запрос = новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	Т.Ссылка
				|ИЗ
				|	Справочник.Проверки КАК Т
				|ГДЕ
				|	Т.Код = &НомерПроверки";
				Запрос.УстановитьПараметр("НомерПроверки",стр.НомерПроверки);
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					Выборка = РезультатЗапроса.Выбрать();
					Если Выборка.Следующий() Тогда
						Проверка = Выборка.Ссылка;
					КонецЕсли;
				КонецЕсли;
				
				Если Проверка=Неопределено Тогда
					Проверка = Справочники.Проверки.ПустаяСсылка();				
				КонецЕсли;
				
				КешПроверок.Вставить(стр.НомерПроверки,Проверка);
				стр.Проверка = Проверка;
				
			Иначе
				стр.Проверка = Проверка;
			КонецЕсли;
		КонецЕсли;  
		
		Тест = КешТестов.Получить(стр.НаименованиеТеста);
		
		Если Тест = Неопределено Тогда
			
			Запрос = новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Т.Ссылка
			|ИЗ
			|	Справочник.Тесты КАК Т
			|ГДЕ
			|	Т.Наименование = &Наименование
			|	И НЕ Т.ПометкаУдаления";
			Запрос.УстановитьПараметр("Наименование",стр.НаименованиеТеста);
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();
				Если Выборка.Следующий() Тогда
					Тест = Выборка.Ссылка;
				КонецЕсли;
			КонецЕсли;
			
			Если Тест=Неопределено Тогда
				Тест = Справочники.Тесты.ПустаяСсылка();				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Тест) Тогда
				Тест = стр.НаименованиеТеста;
			КонецЕсли;
			КешТестов.Вставить(стр.НаименованиеТеста,Тест);
			стр.Тест = Тест;
			
		Иначе
			стр.Тест = Тест;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(стр.ТестируемыйКлиент) Тогда
			
			ТестируемыйКлиент = КешТестируемыхКлиентов.Получить(стр.СтрокаПодключения);
			
			Если ТестируемыйКлиент= Неопределено Тогда
				
				// сначала ищем по имени, а потом по строке подключения
				Запрос = новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	Т.Ссылка,
				|	0 КАК Порядок
				|ИЗ
				|	Справочник.ТестируемыеКлиенты КАК Т
				|ГДЕ
				|	НЕ Т.ПометкаУдаления
				|	И Т.ID=&СтрокаПодключения
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ ПЕРВЫЕ 1
				|	Т.Ссылка,
				|	1
				|ИЗ
				|	Справочник.ТестируемыеКлиенты КАК Т
				|ГДЕ
				|	НЕ Т.ПометкаУдаления
				|	И Т.База1С.ВариантыСтрокПодключения ПОДОБНО ""%"" + &СтрокаПодключения + ""%""
				|
				|УПОРЯДОЧИТЬ ПО
				|	Порядок";
				Запрос.УстановитьПараметр("СтрокаПодключения",стр.СтрокаПодключения);
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой() Тогда
					Выборка = РезультатЗапроса.Выбрать();
					Если Выборка.Следующий() Тогда
						ТестируемыйКлиент = Выборка.Ссылка;
					КонецЕсли;
				КонецЕсли;
				
				Если ТестируемыйКлиент=Неопределено Тогда
					ТестируемыйКлиент = Справочники.ТестируемыеКлиенты.ПустаяСсылка();				
				КонецЕсли;
				
				КешТестируемыхКлиентов.Вставить(стр.СтрокаПодключения,ТестируемыйКлиент);
				стр.ТестируемыйКлиент = ТестируемыйКлиент;			
				
			Иначе
				стр.ТестируемыйКлиент = ТестируемыйКлиент;
			КонецЕсли; 		
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДанныеСервер()
	
	ЦенаРезультата = новый Соответствие;
	ЦенаРезультата.Вставить(Перечисления.РезультатыВыполненияШагов.ПустаяСсылка(),-1);
	ЦенаРезультата.Вставить(Неопределено,-1);
	ЦенаРезультата.Вставить(Перечисления.РезультатыВыполненияШагов.Неопределено,-1);
	ЦенаРезультата.Вставить(Перечисления.РезультатыВыполненияШагов.Пропуск,0);
	ЦенаРезультата.Вставить(Перечисления.РезультатыВыполненияШагов.Успешно,1);
	ЦенаРезультата.Вставить(Перечисления.РезультатыВыполненияШагов.Ошибка,2);
	ЦенаРезультата.Вставить(Перечисления.РезультатыВыполненияШагов.Провал,3);
	
	// обратная цена
	ОбратнаяЦена = новый Соответствие;
	ОбратнаяЦена.Вставить(-1,Перечисления.РезультатыВыполненияШагов.Неопределено);
	ОбратнаяЦена.Вставить(0,Перечисления.РезультатыВыполненияШагов.Пропуск);
	ОбратнаяЦена.Вставить(1,Перечисления.РезультатыВыполненияШагов.Успешно);
	ОбратнаяЦена.Вставить(2,Перечисления.РезультатыВыполненияШагов.Ошибка);
	ОбратнаяЦена.Вставить(3,Перечисления.РезультатыВыполненияШагов.Провал);
	
	ЦенаСерьезности = новый Соответствие;
	ЦенаСерьезности.Вставить(Неопределено,-1);
	ЦенаСерьезности.Вставить(Перечисления.ВариантыСерьезностиДефектов.ПустаяСсылка(),-1);
	ЦенаСерьезности.Вставить(Перечисления.ВариантыСерьезностиДефектов.Тривиальная,0);
	ЦенаСерьезности.Вставить(Перечисления.ВариантыСерьезностиДефектов.Незначительная,1);
	ЦенаСерьезности.Вставить(Перечисления.ВариантыСерьезностиДефектов.Значительная,2);
	ЦенаСерьезности.Вставить(Перечисления.ВариантыСерьезностиДефектов.Критическая,3);
	ЦенаСерьезности.Вставить(Перечисления.ВариантыСерьезностиДефектов.Блокирующая,4);
	
	ОбратнаяЦенаСерьезности = новый Соответствие;
	ОбратнаяЦенаСерьезности.Вставить(-1,Перечисления.ВариантыСерьезностиДефектов.ПустаяСсылка());
	ОбратнаяЦенаСерьезности.Вставить(0,Перечисления.ВариантыСерьезностиДефектов.Тривиальная);
	ОбратнаяЦенаСерьезности.Вставить(1,Перечисления.ВариантыСерьезностиДефектов.Критическая);
	ОбратнаяЦенаСерьезности.Вставить(2,Перечисления.ВариантыСерьезностиДефектов.Значительная);
	ОбратнаяЦенаСерьезности.Вставить(3,Перечисления.ВариантыСерьезностиДефектов.Критическая);
	ОбратнаяЦенаСерьезности.Вставить(4,Перечисления.ВариантыСерьезностиДефектов.Блокирующая);
	
	КоличествоПровалов = 0;
	КоличествоОшибок = 0;
	КоличествоПропущенных = 0;
	КоличествоТестов = 0;
	
	// скопируем по таблицам
	Для каждого тест из ТаблицаТестов Цикл
		мОтбор = новый Структура("НомерСтрокиТестов",тест.НомерСтроки);
		
		тест.КоличествоТестовыхСлучаев = 0;
		тест.КоличествоПровалов = 0;
		тест.КоличествоОшибок = 0;
		тест.КоличествоПропущенных = 0;		
		тест.ОписаниеОшибки = "";
		
		н_строки = ТаблицаТестовыхСлучаев.НайтиСтроки(мОтбор);
		ЦенаТестаРезультатВыполнения = -1;
		ЦенаТестаСерьезность = -1;
		
		НомерПоПорядкуСлучая = 0;
		
		Для каждого случай из н_строки Цикл
			
			НомерПоПорядкуСлучая = НомерПоПорядкуСлучая + 1;
			случай.НомерПоПорядку = НомерПоПорядкуСлучая;
			
			Если НЕ ЗначениеЗаполнено(тест.ОписаниеОшибки) Тогда
				тест.ОписаниеОшибки = случай.ОписаниеОшибки;
			Иначе
				тест.ОписаниеОшибки = тест.ОписаниеОшибки+Символы.ПС+случай.ОписаниеОшибки;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(случай,тест,"Проверка,ТестируемыйКлиент,Тест,НаименованиеТеста");				
			Если ЦенаРезультата.Получить(случай.РезультатВыполнения)>ЦенаТестаРезультатВыполнения Тогда
				ЦенаТестаРезультатВыполнения = ЦенаРезультата.Получить(случай.РезультатВыполнения);
				Если ЦенаСерьезности.Получить(случай.СерьезностьДефекта)>ЦенаТестаСерьезность Тогда
					ЦенаТестаСерьезность = ЦенаСерьезности.Получить(случай.СерьезностьДефекта);
				КонецЕсли;				
			КонецЕсли;			
			
			// посчитаем проблемы для теста
			Если случай.РезультатВыполнения = Перечисления.РезультатыВыполненияШагов.Пропуск Тогда
				тест.КоличествоПропущенных = тест.КоличествоПропущенных + 1;
			КонецЕсли;
			Если случай.РезультатВыполнения = Перечисления.РезультатыВыполненияШагов.Провал Тогда
				тест.КоличествоПровалов = тест.КоличествоПровалов + 1;
			КонецЕсли;
			Если случай.РезультатВыполнения = Перечисления.РезультатыВыполненияШагов.Ошибка Тогда
				тест.КоличествоОшибок = тест.КоличествоОшибок + 1;
			КонецЕсли;
			
			тест.КоличествоТестовыхСлучаев = тест.КоличествоТестовыхСлучаев+1;
			тест.ВремяВыполнения =  тест.ВремяВыполнения+случай.ВремяВыполнения;
			
			
		КонецЦикла;		
		
		тест.РезультатВыполнения = ОбратнаяЦена.Получить(ЦенаТестаРезультатВыполнения);
		тест.СерьезностьДефекта = ОбратнаяЦенаСерьезности.Получить(ЦенаТестаСерьезность);
		
		Если тест.РезультатВыполнения=Перечисления.РезультатыВыполненияШагов.Провал Тогда
			тест.ИндексКартинки = 4;
		ИначеЕсли тест.РезультатВыполнения=Перечисления.РезультатыВыполненияШагов.Ошибка Тогда
			тест.ИндексКартинки = 3;
		ИначеЕсли тест.РезультатВыполнения=Перечисления.РезультатыВыполненияШагов.Успешно Тогда
			тест.ИндексКартинки = 1;
		Иначе
			тест.ИндексКартинки = 0;
		КонецЕсли;
		
		КоличествоПровалов = КоличествоПровалов+тест.КоличествоПровалов;
		КоличествоОшибок = КоличествоОшибок+тест.КоличествоОшибок;
		КоличествоПропущенных = КоличествоПропущенных+тест.КоличествоПропущенных;
		КоличествоТестов = КоличествоТестов+1;
		
		
	КонецЦикла;
	
	// удалим псевдотесты
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПромежуточныеДанные()
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанных


&НаСервере
Процедура ЗагрузитьДанныеНаСервер()
	
	Если ТаблицаТестов.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Период = ДатаВыполенения;
	
	Для каждого тест из ТаблицаТестов Цикл
		
		Попытка
			МенеджерЗаписи = РегистрыСведений.ПротоколыВыполненияТестов.СоздатьМенеджерЗаписи();
			
			МенеджерЗаписи.ТестируемыйКлиент 	= тест.ТестируемыйКлиент;
			МенеджерЗаписи.Проверка 			= тест.Проверка;
			МенеджерЗаписи.Тест 				= тест.Тест;
			
			МенеджерЗаписи.РезультатВыполнения 	= тест.РезультатВыполнения;
			МенеджерЗаписи.СерьезностьДефекта	= тест.СерьезностьДефекта;
			МенеджерЗаписи.ДатаВыполенения 		= тест.ДатаВыполенения;
			МенеджерЗаписи.ОписаниеОшибки 		= тест.ОписаниеОшибки;
			
			МенеджерЗаписи.ВремяВыполнения 		= тест.ВремяВыполнения;			
			МенеджерЗаписи.НомерПоПорядку 		= тест.НомерПоПорядку;
			МенеджерЗаписи.КоличествоТестовыхСлучаев = тест.КоличествоТестовыхСлучаев;
			МенеджерЗаписи.КоличествоПровалов 	= тест.КоличествоПровалов;
			МенеджерЗаписи.КоличествоОшибок 	= тест.КоличествоОшибок;
			МенеджерЗаписи.КоличествоПропущенных= тест.КоличествоПропущенных;			
			
			МенеджерЗаписи.Записать(Истина);		
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			СообщитьОбОшибке("ЗагрузитьДанныеНаСервер",ТекстОшибки,НомерСборки);
			Сообщить(ТекстОшибки);
		КонецПопытки;
		
	КонецЦикла;
	
	Для каждого случай из ТаблицаТестовыхСлучаев Цикл
		
		Попытка
			МенеджерЗаписи = РегистрыСведений.ПротоколыВыполненияТестовыхСлучаев.СоздатьМенеджерЗаписи();
			
			МенеджерЗаписи.ТестируемыйКлиент 	= случай.ТестируемыйКлиент;
			МенеджерЗаписи.Проверка 			= случай.Проверка;
			МенеджерЗаписи.Тест 				= случай.Тест;
			МенеджерЗаписи.ТестовыйСлучай 		= случай.ТестовыйСлучай;
			
			МенеджерЗаписи.РезультатВыполнения 	= случай.РезультатВыполнения;
			МенеджерЗаписи.СерьезностьДефекта	= случай.СерьезностьДефекта;
			МенеджерЗаписи.ДатаВыполенения 		= случай.ДатаВыполенения;
			МенеджерЗаписи.ОписаниеОшибки 		= случай.ОписаниеОшибки;
			
			МенеджерЗаписи.ВремяВыполнения 		= случай.ВремяВыполнения;			
			МенеджерЗаписи.НомерПоПорядку 		= случай.НомерПоПорядку;
			
			МенеджерЗаписи.Записать(Истина);		
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			СообщитьОбОшибке("ЗагрузитьДанныеНаСервер",ТекстОшибки,НомерСборки);
			Сообщить(ТекстОшибки);
		КонецПопытки;
		
	КонецЦикла;
	
	
	Сообщить("Успешно!");
	
КонецПроцедуры



#КонецОбласти

&НаКлиенте
Функция  ПолучитьКаталогПоПутиФайла(Знач ПутьКФайлу)
	Файл = новый Файл(ПутьКФайлу);
	Возврат Файл.Путь;	
КонецФункции


&НаКлиенте
Процедура ЗагрузитьПоШаблону(Команда)
	Если Найти(ПутьКЛогу,"*") Тогда
		
		МассивЧастей = новый Массив;
		Если Найти(ПутьКЛогу,"\") Тогда
			МассивЧастей = СтрРазделить(ПутьКЛогу+"","\",Истина);
		ИначеЕсли Найти(ПутьКЛогу,"/") Тогда
			МассивЧастей = СтрРазделить(ПутьКЛогу+"","/",Истина);
		КонецЕсли;
		Если МассивЧастей.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		ПутьКаталог = СтрЗаменить(ПутьКЛогу,МассивЧастей[МассивЧастей.Количество()-1],"");
		ШаблонПоиска = СтрЗаменить(ПутьКЛогу,ПутьКаталог,"");
		
		НачатьПоискФайлов(Новый ОписаниеОповещения("ВыборКаталогаЛоговТестированияЗавершение", ЭтаФорма), ПутьКаталог,ШаблонПоиска,Истина);
	Иначе
		ЗагрузитьЛогПоПути(ПутьКЛогу);
		//ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура НомерПроверкиПриИзменении(Элемент)
	НомерПроверкиПоУмоланию = НомерПроверки;
КонецПроцедуры


&НаКлиенте
Процедура РежимПоискаИдентификатораКлиентаПриИзменении(Элемент)
	
	РежимПоискаИдентификатораКлиентаПриИзмененииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПоискаИдентификатораКлиентаПриИзмененииФрагмент()
	
	Перем ВариантСправочник;
	
	ВариантСправочник = Истина;
	Если РежимПоискаТестируемогоКлиента=0 Тогда
		ВариантСправочник = Истина;
	Иначе
		ВариантСправочник = Ложь;
	КонецЕсли;
	
	Элементы.СтрокаПодключения.Видимость = НЕ ВариантСправочник;
	Элементы.ТестируемыйКлиент.Видимость = ВариантСправочник;
	
КонецПроцедуры


&НаКлиенте
Процедура РежимПоискаПроверкиПриИзменении(Элемент)
	РежимПоискаПроверкиПриИзмененииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура РежимПоискаПроверкиПриИзмененииФрагмент()
	
	Перем ВариантСправочник;
	
	ВариантСправочник = Истина;
	Если РежимПоискаПроверки=0 Тогда
		ВариантСправочник = Истина;
	Иначе
		ВариантСправочник = Ложь;
	КонецЕсли;
	
	Элементы.НомерПроверки.Видимость = НЕ ВариантСправочник;
	Элементы.Проверка.Видимость = ВариантСправочник;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СообщитьОбОшибке(ИмяФункции,Сообщение,НомерСборки=0) Экспорт
	
	ЗаписьЖурналаРегистрации("ЗагрузкаЛогаJUnitXMLТеста",УровеньЖурналаРегистрации.Ошибка,Неопределено,Неопределено,ИмяФункции+Символы.ПС+Сообщение);
	
	// Сделаем запись в доп регистр сведений
	Если НомерСборки<>0 Тогда
		
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Сборки.Ссылка КАК Сборка
		|ИЗ
		|	Справочник.Сборки КАК Сборки
		|ГДЕ
		|	Сборки.Код = &НомерСборки";
		Запрос.УстановитьПараметр("НомерСборки", НомерСборки);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
		
			МенеджерЗаписи = РегистрыСведений.ЛогВыполненныхЗаданийДопИнфо.СоздатьМенеджерЗаписи();
		
			МенеджерЗаписи.Дата = ТекущаяДата();
			МенеджерЗаписи.Сборка = Выборка.Сборка;
			МенеджерЗаписи.Сообщение = Сообщение;
			МенеджерЗаписи.ДополнительноеСообщение = "ИмяОбработки: ЗагрузкаЛогаAllureXML ИмяФункции: "+ ИмяФункции;
			МенеджерЗаписи.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаданий.Ошибка");
			
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
