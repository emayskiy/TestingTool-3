 
Процедура ОбработкаЗаданий() Экспорт
	
	// первый этап, завершение
	ЗавершитьВыполнениеЗаданияЕслиВсеЭтапыЗаданияВыполнены();
	// второй этап, добавление новых записей
	ДобавитьЗаданиеВПулл(Истина);
	
КонецПроцедуры

Процедура ОбработкаДействийЗаданий() Экспорт
	
	// третий этап, выполнение
	ВыполнениеЗаданийИзПулла(Истина); // по факту отдельное регламентное
	
КонецПроцедуры

Процедура ЗавершитьВыполнениеЗаданияЕслиВсеЭтапыЗаданияВыполнены() Экспорт 
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СоставЗаданийПулл.Задание КАК Задание,
	|	СоставЗаданийПулл.ТестируемыйКлиент КАК ТестируемыйКлиент,
	|	МАКСИМУМ(СоставЗаданийПулл.Сборка) КАК Сборка,
	|	МАКСИМУМ(СоставЗаданийПулл.Проверка) КАК Проверка,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СоставЗаданийПулл.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.ошибка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК БылаОшибка,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СоставЗаданийПулл.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Успешно)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК БылоУспешно,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СоставЗаданийПулл.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Пропуск)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК БылиПропуски,
	|	МАКСИМУМ(СоставЗаданийПулл.ДатаВыполнения) КАК ДатаВыполененияПоследнегоШага,
	|	МАКСИМУМ(СоставЗаданийПулл.ДатаВыполненияСек) КАК ДатаВыполененияПоследнегоШагаСек,
	|	МИНИМУМ(СоставЗаданийПулл.ДатаВыполнения) КАК ДатаВыполненияПервогоШага,
	|	МИНИМУМ(СоставЗаданийПулл.ДатаВыполненияСек) КАК ДатаВыполненияПервогоШагаСек,
	|	КОЛИЧЕСТВО(СоставЗаданийПулл.Задание) КАК ЧислоВыполненныхЭтапов,
	|	МАКСИМУМ(СоставЗаданийПулл.ЗаданиеВладелец) КАК ЗаданиеВладелец,
	|	МАКСИМУМ(СоставЗаданийПулл.ПорядокВыполненияВладелец) КАК ПорядокВыполненияВладелец
	|ПОМЕСТИТЬ ВтИнформацияПоЭтапам
	|ИЗ
	|	РегистрСведений.СоставЗаданийПулл КАК СоставЗаданийПулл
	|ГДЕ
	|	СоставЗаданийПулл.ЭтапВыполнен = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставЗаданийПулл.Задание,
	|	СоставЗаданийПулл.ТестируемыйКлиент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставЗаданийПулл.Задание КАК Задание,
	|	СоставЗаданийПулл.ТестируемыйКлиент КАК ТестируемыйКлиент,
	|	КОЛИЧЕСТВО(СоставЗаданийПулл.Задание) КАК ЧислоЭтаповВсего
	|ПОМЕСТИТЬ ВтИнформацияПоЭтапамВсего
	|ИЗ
	|	РегистрСведений.СоставЗаданийПулл КАК СоставЗаданийПулл
	|
	|СГРУППИРОВАТЬ ПО
	|	СоставЗаданийПулл.Задание,
	|	СоставЗаданийПулл.ТестируемыйКлиент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтИнформацияПоЭтапам.Задание КАК Задание,
	|	ВтИнформацияПоЭтапам.ТестируемыйКлиент КАК ТестируемыйКлиент,
	|	ВтИнформацияПоЭтапам.БылаОшибка КАК БылаОшибка,
	|	ВтИнформацияПоЭтапам.БылоУспешно КАК БылоУспешно,
	|	ВЫБОР
	|		КОГДА ВтИнформацияПоЭтапам.БылаОшибка = ЛОЖЬ
	|				И ВтИнформацияПоЭтапам.БылоУспешно = ЛОЖЬ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеВыполнялось,
	|	ВЫБОР
	|		КОГДА ВтИнформацияПоЭтапам.БылаОшибка = ЛОЖЬ
	|				И ВтИнформацияПоЭтапам.БылоУспешно = ЛОЖЬ
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Отменено)
	|		КОГДА ВтИнформацияПоЭтапам.БылаОшибка = ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Ошибка)
	|		КОГДА ВтИнформацияПоЭтапам.БылоУспешно = ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Успешно)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Прервано)
	|	КОНЕЦ КАК Статус,
	|	ВтИнформацияПоЭтапам.ДатаВыполненияПервогоШага КАК ДатаВыполненияПервогоШага,
	|	ВтИнформацияПоЭтапам.ДатаВыполененияПоследнегоШага КАК ДатаВыполененияПоследнегоШага,
	|	ВтИнформацияПоЭтапам.ЧислоВыполненныхЭтапов КАК ЧислоВыполненныхЭтапов,
	|	ВтИнформацияПоЭтапамВсего.ЧислоЭтаповВсего КАК ЧислоЭтаповВсего,
	|	ВтИнформацияПоЭтапам.ДатаВыполененияПоследнегоШагаСек - ВтИнформацияПоЭтапам.ДатаВыполненияПервогоШагаСек КАК ПоследняяПродолжительность,
	|	ЕСТЬNULL(СостоянияЗаданий.ДатаПоследнегоУспеха, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаПоследнегоУспеха,
	|	ЕСТЬNULL(СостоянияЗаданий.ДатаПоследнейНеудачи, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаПоследнейНеудачи,
	|	ЕСТЬNULL(СостоянияЗаданий.ДатаЗапуска, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаЗапуска,
	|	ЕСТЬNULL(СостоянияЗаданий.СтабильностьВыполненияЗаданий, ЗНАЧЕНИЕ(Перечисление.СтабильностьВыполненияЗаданий.СредиПоследнихЗаданийНетПровалившихся)) КАК СтабильностьВыполненияЗаданий,
	|	&ТекущаяДата КАК ДатаВыполнения,
	|	ВтИнформацияПоЭтапам.ЗаданиеВладелец КАК ЗаданиеВладелец,
	|	ВтИнформацияПоЭтапам.ПорядокВыполненияВладелец КАК ПорядокВыполненияВладелец,
	|	ВтИнформацияПоЭтапам.Проверка КАК Проверка,
	|	ВтИнформацияПоЭтапам.Сборка КАК Сборка
	|ИЗ
	|	ВтИнформацияПоЭтапам КАК ВтИнформацияПоЭтапам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтИнформацияПоЭтапамВсего КАК ВтИнформацияПоЭтапамВсего
	|		ПО ВтИнформацияПоЭтапам.Задание = ВтИнформацияПоЭтапамВсего.Задание
	|			И ВтИнформацияПоЭтапам.ТестируемыйКлиент = ВтИнформацияПоЭтапамВсего.ТестируемыйКлиент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаданий КАК СостоянияЗаданий
	|		ПО ВтИнформацияПоЭтапам.Задание = СостоянияЗаданий.Задание
	|			И ВтИнформацияПоЭтапам.ТестируемыйКлиент = СостоянияЗаданий.ТестируемыйКлиент
	|ГДЕ
	|	ВтИнформацияПоЭтапам.ЧислоВыполненныхЭтапов = ВтИнформацияПоЭтапамВсего.ЧислоЭтаповВсего";
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Попытка
			
			// 0. Обновляем статусы заданий при завершении
			ОбновлениеСостоянияЗаданийПриЗавершении(Выборка);
			
			
			// 1. Добавляем информацию в лог выполненных заданий
			МенеджерЗаписи 			= РегистрыСведений.ЛогВыполненныхЗаданий.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Дата 	= ТекущаяДата();
			МенеджерЗаписи.Задание 	= Выборка.Задание;
			МенеджерЗаписи.ЭтоЗавершениеЗадания = Истина;
			МенеджерЗаписи.Сборка 	= Выборка.Сборка;
			МенеджерЗаписи.Сообщение = "Завершение задания";
			
			Если Выборка.БылаОшибка=Истина Тогда
				МенеджерЗаписи.Ошибка	= Выборка.БылаОшибка;
			ИначеЕсли Выборка.БылоУспешно=Истина Тогда
				МенеджерЗаписи.Успешно	= Выборка.БылоУспешно;
			КонецЕсли;		
			МенеджерЗаписи.Статус = Выборка.Статус;
			
			МенеджерЗаписи.Записать(Истина);
			
			// 2. Выполняем подзадание
			Если ЗначениеЗаполнено(Выборка.ЗаданиеВладелец) Тогда
				МенеджерЗаписи = РегистрыСведений.СоставЗаданийПулл.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Задание 				= Выборка.ЗаданиеВладелец;
				МенеджерЗаписи.ТестируемыйКлиент 	= Выборка.ЗаданиеВладелец.ТестируемыйКлиент;
				МенеджерЗаписи.ПодчиненноеЗадание 	= Выборка.Задание;
				МенеджерЗаписи.ПорядокВыполнения 	= Выборка.ПорядокВыполненияВладелец;
				МенеджерЗаписи.Проверка 			= Выборка.Проверка;
				
				МенеджерЗаписи.Прочитать();
				
				МенеджерЗаписи.ЭтапВыполнен 		= Истина;
				Если Выборка.БылаОшибка=Истина Тогда
					МенеджерЗаписи.Статус = Перечисления.СтатусыЗаданий.Ошибка;
				ИначеЕсли Выборка.БылоУспешно=Истина Тогда
					МенеджерЗаписи.Статус = Перечисления.СтатусыЗаданий.Успешно;
				Иначе
					// на самом деле можно ставить неопределено
					МенеджерЗаписи.Статус = Перечисления.СтатусыЗаданий.ПустаяСсылка();
				КонецЕсли;
				Если Выборка.БылаОшибка=Истина Тогда
					МенеджерЗаписи.Сообщение = "В процессе выполнения задания произошла ошибка. Для идентификации смотри ошибку по заданию владельцу ("+Строка(Выборка.ЗаданиеВладелец)+") и порядку выполнения ("+Строка(Выборка.ПорядокВыполненияВладелец)+")";
				КонецЕсли;
				МенеджерЗаписи.Записать(Истина);
			КонецЕсли;

			
			// 3. Удаляем записи из пулла
			НаборЗаписей = РегистрыСведений.СоставЗаданийПулл.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Задание.Установить(Выборка.Задание);
			НаборЗаписей.Отбор.ТестируемыйКлиент.Установить(Выборка.ТестируемыйКлиент);
			НаборЗаписей.Записать(Истина);
			
			// 4. Удаляем переменные, если стоит удалять
			// 4.1 Если принудительно
			УдалятьПеременныеПоЗавершению = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Задание,"УдалятьПеременныеПоЗавершению");
			Если УдалятьПеременныеПоЗавершению=Истина Тогда
				НаборЗаписей = РегистрыСведений.ПеременныеЗаданий.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Задание.Установить(Выборка.Задание);
				НаборЗаписей.Отбор.Ключ.Установить(Выборка.Проверка);
				НаборЗаписей.Записать(Истина);
			КонецЕсли;
			// 4.2 Удаляем PID
			PID = ПолучитьЗначениеПеременной(Выборка.Задание,Справочники.ИменаПеременных.PID,Выборка.Проверка);
			Если НЕ PID=Неопределено Тогда
				НаборЗаписей = РегистрыСведений.ПеременныеЗаданий.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Задание.Установить(Выборка.Задание);
				НаборЗаписей.Отбор.ИмяПеременной.Установить(Справочники.ИменаПеременных.PID);
				НаборЗаписей.Отбор.Ключ.Установить(Выборка.Проверка);
				НаборЗаписей.Записать(Истина);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации("Планировщик.ЗавершитьВыполнениеЗаданияЕслиВсеЭтапыЗаданияВыполнены",УровеньЖурналаРегистрации.Ошибка,Неопределено,Неопределено,ОписаниеОшибки(),РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецПопытки; 		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗаданиеВПулл(Знач РегламентноеЗадание=Ложь) Экспорт
	
	// добавляем всегда нулевое задание для оценки времени начала	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Планировщик.Задание КАК Задание,
	|	Планировщик.Задание.ТестируемыйКлиент КАК ТестируемыйКлиент,
	|	Планировщик.Включено КАК Включено,
	|	Планировщик.ДатаЗапуска КАК ДатаЗапуска,
	|	Планировщик.ВремяНачала КАК ВремяНачала,
	|	Планировщик.ВремяОкончания КАК ВремяОкончания,
	|	Планировщик.Интервал КАК Интервал,
	|	Планировщик.Однократно КАК Однократно,
	|	ДОБАВИТЬКДАТЕ(Планировщик.ВремяНачала, СЕКУНДА, ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ((&ТекущееВремяСек - Планировщик.ВремяНачалаСек) / ВЫБОР
	|						КОГДА Планировщик.ИнтервалСек = 0
	|							ТОГДА 1
	|						ИНАЧЕ Планировщик.ИнтервалСек
	|					КОНЕЦ КАК ЧИСЛО(15, 0))) > (&ТекущееВремяСек - Планировщик.ВремяНачалаСек) / ВЫБОР
	|					КОГДА Планировщик.ИнтервалСек = 0
	|						ТОГДА 1
	|					ИНАЧЕ Планировщик.ИнтервалСек
	|				КОНЕЦ
	|				ТОГДА (ВЫРАЗИТЬ((&ТекущееВремяСек - Планировщик.ВремяНачалаСек) / ВЫБОР
	|							КОГДА Планировщик.ИнтервалСек = 0
	|								ТОГДА 1
	|							ИНАЧЕ Планировщик.ИнтервалСек
	|						КОНЕЦ КАК ЧИСЛО(15, 0))) - 1
	|			ИНАЧЕ ВЫРАЗИТЬ((&ТекущееВремяСек - Планировщик.ВремяНачалаСек) / ВЫБОР
	|						КОГДА Планировщик.ИнтервалСек = 0
	|							ТОГДА 1
	|						ИНАЧЕ Планировщик.ИнтервалСек
	|					КОНЕЦ КАК ЧИСЛО(15, 0))
	|		КОНЕЦ * Планировщик.ИнтервалСек) КАК РасчетноеНачалоИнтервала
	|ПОМЕСТИТЬ ВтЗаданияВИнтервале
	|ИЗ
	|	РегистрСведений.Планировщик КАК Планировщик
	|ГДЕ
	|	Планировщик.Включено = ИСТИНА
	|	И Планировщик.ДатаЗапуска <= &ТекущаяДата
	|	И Планировщик.ВремяНачалаСек <= &ТекущееВремяСек
	|	И ВЫБОР
	|			КОГДА Планировщик.ВремяОкончанияСек = 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Планировщик.ВремяОкончанияСек >= &ТекущееВремяСек
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ДеньНедели = 1
	|					И Планировщик.Понедельник
	|				ТОГДА ИСТИНА
	|			КОГДА &ДеньНедели = 2
	|					И Планировщик.Вторник
	|				ТОГДА ИСТИНА
	|			КОГДА &ДеньНедели = 3
	|					И Планировщик.Среда
	|				ТОГДА ИСТИНА
	|			КОГДА &ДеньНедели = 4
	|					И Планировщик.Четверг
	|				ТОГДА ИСТИНА
	|			КОГДА &ДеньНедели = 5
	|					И Планировщик.Пятница
	|				ТОГДА ИСТИНА
	|			КОГДА &ДеньНедели = 6
	|					И Планировщик.Суббота
	|				ТОГДА ИСТИНА
	|			КОГДА &ДеньНедели = 7
	|					И Планировщик.Воскресенье
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СостоянияЗаданий.Задание КАК Задание,
	|	СостоянияЗаданий.ТестируемыйКлиент КАК ТестируемыйКлиент
	|ПОМЕСТИТЬ ВтОднократныеЗаданияУжеВыполнялись
	|ИЗ
	|	РегистрСведений.СостоянияЗаданий КАК СостоянияЗаданий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтЗаданияВИнтервале КАК Планировщик
	|		ПО СостоянияЗаданий.Задание = Планировщик.Задание
	|ГДЕ
	|	Планировщик.Однократно = ИСТИНА
	|	И НАЧАЛОПЕРИОДА(СостоянияЗаданий.ДатаВыполнения, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоставЗаданийПулл.Задание КАК Задание,
	|	СоставЗаданийПулл.ТестируемыйКлиент КАК ТестируемыйКлиент
	|ПОМЕСТИТЬ ВтЗаданияВРаботе
	|ИЗ
	|	РегистрСведений.СоставЗаданийПулл КАК СоставЗаданийПулл
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОднократныеЗаданияУжеВыполнялись.Задание,
	|	ОднократныеЗаданияУжеВыполнялись.ТестируемыйКлиент
	|ИЗ
	|	ВтОднократныеЗаданияУжеВыполнялись КАК ОднократныеЗаданияУжеВыполнялись
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СостоянияЗаданий.Задание КАК Задание,
	|	СостоянияЗаданий.ТестируемыйКлиент КАК ТестируемыйКлиент,
	|	СостоянияЗаданий.ДатаВыполнения КАК ДатаВыполнения,
	|	СостоянияЗаданий.ДатаВыполненияСек КАК ДатаВыполненияСек,
	|	СостоянияЗаданий.Интервал КАК ПослИнтервал,
	|	СостоянияЗаданий.ИнтервалСек КАК ПослИнтервалСек,
	|	СостоянияЗаданий.ВремяНачала КАК ПослВремяНачала,
	|	СостоянияЗаданий.ВремяНачалаСек КАК ПослВремяНачалаСек,
	|	ДОБАВИТЬКДАТЕ(СостоянияЗаданий.ВремяНачала, СЕКУНДА, СостоянияЗаданий.ИнтервалСек) КАК ПослВремяОкончания,
	|	СостоянияЗаданий.ВремяНачалаСек + СостоянияЗаданий.ИнтервалСек КАК ПослВремяОкончанияСек
	|ПОМЕСТИТЬ ВтПоследниеСостоянияЗаданий
	|ИЗ
	|	РегистрСведений.СостоянияЗаданий КАК СостоянияЗаданий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтЗаданияВИнтервале.Задание,
	|	ВтЗаданияВИнтервале.ТестируемыйКлиент,
	|	ВтЗаданияВИнтервале.Включено,
	|	ВтЗаданияВИнтервале.ДатаЗапуска,
	|	ВтЗаданияВИнтервале.ВремяНачала,
	|	ВтЗаданияВИнтервале.ВремяОкончания,
	|	ВтЗаданияВИнтервале.Интервал,
	|	ВтЗаданияВИнтервале.РасчетноеНачалоИнтервала,
	|	ЕСТЬNULL(ВтПоследниеСостоянияЗаданий.ДатаВыполнения, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаВыполнения,
	|	ЕСТЬNULL(ВтПоследниеСостоянияЗаданий.ДатаВыполненияСек, 0) КАК ДатаВыполненияСек,
	|	ЕСТЬNULL(ВтПоследниеСостоянияЗаданий.ПослВремяНачала, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ПослВремяНачала,
	|	ЕСТЬNULL(ВтПоследниеСостоянияЗаданий.ПослВремяНачалаСек, 0) КАК ПослВремяНачалаСек,
	|	ЕСТЬNULL(ВтПоследниеСостоянияЗаданий.ПослВремяОкончания, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ПослВремяОкончания,
	|	ЕСТЬNULL(ВтПоследниеСостоянияЗаданий.ПослВремяОкончанияСек, 0) КАК ПослВремяОкончанияСек,
	|	ЕСТЬNULL(ВтПоследниеСостоянияЗаданий.ПослИнтервал, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ПослИнтервал,
	|	ЕСТЬNULL(ВтПоследниеСостоянияЗаданий.ПослИнтервалСек, 0) КАК ПослИнтервалСек
	|ПОМЕСТИТЬ ВтЗаданияКЗапуску
	|ИЗ
	|	ВтЗаданияВИнтервале КАК ВтЗаданияВИнтервале
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЗаданияВРаботе КАК ВтЗаданияВРаботе
	|		ПО ВтЗаданияВИнтервале.Задание = ВтЗаданияВРаботе.Задание
	|			И ВтЗаданияВИнтервале.ТестируемыйКлиент = ВтЗаданияВРаботе.ТестируемыйКлиент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПоследниеСостоянияЗаданий КАК ВтПоследниеСостоянияЗаданий
	|		ПО ВтЗаданияВИнтервале.Задание = ВтПоследниеСостоянияЗаданий.Задание
	|			И ВтЗаданияВИнтервале.ТестируемыйКлиент = ВтПоследниеСостоянияЗаданий.ТестируемыйКлиент
	|ГДЕ
	|	ВтЗаданияВРаботе.Задание ЕСТЬ NULL
	|	И ВЫБОР
	|			КОГДА ВтПоследниеСостоянияЗаданий.ПослВремяОкончания ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			КОГДА ВтПоследниеСостоянияЗаданий.ПослВремяНачалаСек <= &ТекущееВремяСек
	|					И ВтПоследниеСостоянияЗаданий.ПослВремяОкончанияСек >= &ТекущееВремяСек
	|					И НАЧАЛОПЕРИОДА(ВтПоследниеСостоянияЗаданий.ДатаВыполнения, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставЗаданий.Задание КАК Задание,
	|	ВтЗаданияКЗапуску.ТестируемыйКлиент КАК ТестируемыйКлиент,
	|	СоставЗаданий.ПорядокВыполнения КАК ПорядокВыполнения,
	|	СоставЗаданий.Действие КАК Действие,
	|	СоставЗаданий.ПодчиненноеЗадание КАК ПодчиненноеЗадание,
	|	СоставЗаданий.Задание.ЭтоПроверка КАК ЭтоПроверка,
	|	ВтЗаданияКЗапуску.Включено КАК Включено,
	|	ВтЗаданияКЗапуску.ДатаЗапуска КАК ДатаЗапуска,
	|	ВтЗаданияКЗапуску.ВремяНачала КАК ВремяНачала,
	|	ВтЗаданияКЗапуску.ВремяОкончания КАК ВремяОкончания,
	|	ВтЗаданияКЗапуску.Интервал КАК Интервал,
	|	ВтЗаданияКЗапуску.РасчетноеНачалоИнтервала,
	|	ВтЗаданияКЗапуску.ДатаВыполнения КАК ДатаВыполнения,
	|	ВтЗаданияКЗапуску.ПослВремяНачала КАК ПослВремяНачала,
	|	ВтЗаданияКЗапуску.ПослВремяОкончания КАК ПослВремяОкончания,
	|	ВтЗаданияКЗапуску.ПослИнтервал КАК ПослИнтервал
	|ИЗ
	|	ВтЗаданияКЗапуску КАК ВтЗаданияКЗапуску
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставЗаданий КАК СоставЗаданий
	|		ПО (СоставЗаданий.Задание = ВтЗаданияКЗапуску.Задание)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Задание,
	|	ПорядокВыполнения
	|ИТОГИ ПО
	|	Задание";
	
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	Запрос.УстановитьПараметр("ТекущаяДатаСек",ПланировщикЗаданийКлиентСервер.ПреобразоватьДатуВСек(ТекущаяДата()));
	Запрос.УстановитьПараметр("ТекущееВремяСек",ПланировщикЗаданийКлиентСервер.ПреобразоватьДатуВСек(ТекущаяДата())-ПланировщикЗаданийКлиентСервер.ПреобразоватьДатуВСек(НачалоДня(ТекущаяДата())));
	Запрос.УстановитьПараметр("ДеньНедели",ДеньНедели(ТекущаяДата()));
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Попытка
			
			ВремяНачала = Неопределено;
			Интервал = Неопределено;
			ЭтоПроверка = Ложь;
			Проверка = ПредопределенноеЗначение("Справочник.Проверки.ПустаяСсылка");
			Сборка = ПредопределенноеЗначение("Справочник.Сборки.ПустаяСсылка");
			
			ВыборкаДетальная = Выборка.Выбрать();
			
			// 0. Сборку создаем всегда
			СоздатьСборкуДляЗадания(Сборка);
			
			// 1. В рамках это проверка создаем новый блок
			Если ВыборкаДетальная.Следующий() Тогда
				Если ВыборкаДетальная.ЭтоПроверка=Истина Тогда
					СоздатьПроврекуДляЗадания(Проверка,РегламентноеЗадание);
					ЭтоПроверка = Истина;
				КонецЕсли;
			КонецЕсли;
			
			
			// 2. Добавляем задание в пулл
			Задание = Выборка.Задание;
			ТестируемыйКлиент = Неопределено;
			НаборЗаписей = РегистрыСведений.СоставЗаданийПулл.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Задание.Установить(Выборка.Задание);
			
			ВыборкаДетальная.Сбросить();
			Пока ВыборкаДетальная.Следующий() Цикл
				СтрокаНабора = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНабора,ВыборкаДетальная);
				СтрокаНабора.Проверка = Проверка;
				СтрокаНабора.Сборка = Сборка;
				ВремяНачала = ВыборкаДетальная.РасчетноеНачалоИнтервала;
				Интервал = ВыборкаДетальная.Интервал;
				ТестируемыйКлиент = ВыборкаДетальная.ТестируемыйКлиент;
			КонецЦикла;
			
	
			НаборЗаписей.Записать(Истина);
			
			// 3. Изменяем статусы заданий (в работе)
			ИзменениеСтатусовЗаданийВРаботе(Выборка, Задание, ТестируемыйКлиент, ВремяНачала, Интервал);
			
		
			СтруктураДанных = новый Структура("ПорядокВыполнения,ЭтоЗапускЗадания,Сообщение,Статус",0,Истина,"Запуск задания",Перечисления.СтатусыЗаданий.ГотовоКЗапуску);
			СоздатьЗаписьЛогВыполненныхЗаданий(Выборка.Задание, Сборка, ТекущаяДата(), СтруктураДанных); 
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации("Планировщик.ДобавитьЗаданиеВПулл",УровеньЖурналаРегистрации.Ошибка,Неопределено,Неопределено,ОписаниеОшибки(),РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецПопытки; 		
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьЗаданиеВПуллНемедленно(Знач Задание,ОписаниеОшибки,Знач ЗаданиеВладелец=Неопределено, Знач ПорядокВыполненияВладелец=0,Знач Проверка=Неопределено,Знач ТестируемыйКлиент=Неопределено,Знач Сборка=Неопределено,Знач РегламентноеЗадание=Ложь) Экспорт
	
	// добавляем всегда нулевое задание для оценки времени начала	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Планировщик.Задание КАК Задание,
	|	ВЫБОР
	|		КОГДА &ТестируемыйКлиент = ЗНАЧЕНИЕ(Справочник.ТестируемыеКлиенты.ПустаяСсылка)
	|				ИЛИ &ТестируемыйКлиент = НЕОПРЕДЕЛЕНО
	|			ТОГДА Планировщик.Задание.ТестируемыйКлиент
	|		ИНАЧЕ &ТестируемыйКлиент
	|	КОНЕЦ КАК ТестируемыйКлиент,
	|	Планировщик.Включено КАК Включено,
	|	Планировщик.ДатаЗапуска КАК ДатаЗапуска,
	|	Планировщик.ВремяНачала КАК ВремяНачала,
	|	Планировщик.ВремяОкончания КАК ВремяОкончания,
	|	Планировщик.Интервал КАК Интервал,
	|	ДОБАВИТЬКДАТЕ(Планировщик.ВремяНачала, СЕКУНДА, ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ((&ТекущееВремяСек - Планировщик.ВремяНачалаСек) / ВЫБОР
	|						КОГДА Планировщик.ИнтервалСек = 0
	|							ТОГДА 1
	|						ИНАЧЕ Планировщик.ИнтервалСек
	|					КОНЕЦ КАК ЧИСЛО(15, 0))) > (&ТекущееВремяСек - Планировщик.ВремяНачалаСек) / ВЫБОР
	|					КОГДА Планировщик.ИнтервалСек = 0
	|						ТОГДА 1
	|					ИНАЧЕ Планировщик.ИнтервалСек
	|				КОНЕЦ
	|				ТОГДА (ВЫРАЗИТЬ((&ТекущееВремяСек - Планировщик.ВремяНачалаСек) / ВЫБОР
	|							КОГДА Планировщик.ИнтервалСек = 0
	|								ТОГДА 1
	|							ИНАЧЕ Планировщик.ИнтервалСек
	|						КОНЕЦ КАК ЧИСЛО(15, 0))) - 1
	|			ИНАЧЕ ВЫРАЗИТЬ((&ТекущееВремяСек - Планировщик.ВремяНачалаСек) / ВЫБОР
	|						КОГДА Планировщик.ИнтервалСек = 0
	|							ТОГДА 1
	|						ИНАЧЕ Планировщик.ИнтервалСек
	|					КОНЕЦ КАК ЧИСЛО(15, 0))
	|		КОНЕЦ * Планировщик.ИнтервалСек) КАК РасчетноеНачалоИнтервала
	|ПОМЕСТИТЬ ВтЗаданияВИнтервале
	|ИЗ
	|	РегистрСведений.Планировщик КАК Планировщик
	|ГДЕ
	|	Планировщик.Задание = &Задание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Ссылка КАК Задание,
	|	ВЫБОР
	|		КОГДА &ТестируемыйКлиент = ЗНАЧЕНИЕ(Справочник.ТестируемыеКлиенты.ПустаяСсылка)
	|				ИЛИ &ТестируемыйКлиент = НЕОПРЕДЕЛЕНО
	|			ТОГДА Т.ТестируемыйКлиент
	|		ИНАЧЕ &ТестируемыйКлиент
	|	КОНЕЦ КАК ТестируемыйКлиент,
	|	ЕСТЬNULL(ВтЗаданияВИнтервале.Включено, ИСТИНА) КАК Включено,
	|	ЕСТЬNULL(ВтЗаданияВИнтервале.ДатаЗапуска, &ТекущаяДата) КАК ДатаЗапуска,
	|	ЕСТЬNULL(ВтЗаданияВИнтервале.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ВремяНачала,
	|	ЕСТЬNULL(ВтЗаданияВИнтервале.ВремяОкончания, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ВремяОкончания,
	|	ЕСТЬNULL(ВтЗаданияВИнтервале.Интервал, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК Интервал,
	|	ЕСТЬNULL(ВтЗаданияВИнтервале.РасчетноеНачалоИнтервала, &ТекущаяДата) КАК РасчетноеНачалоИнтервала
	|ПОМЕСТИТЬ ВтЗаданияВИнтервалеСучетомОтсутвияВПалнировщике
	|ИЗ
	|	Справочник.Задания КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЗаданияВИнтервале КАК ВтЗаданияВИнтервале
	|		ПО (ВтЗаданияВИнтервале.Задание = Т.Ссылка)
	|ГДЕ
	|	Т.Ссылка = &Задание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоставЗаданийПулл.Задание КАК Задание,
	|	СоставЗаданийПулл.ТестируемыйКлиент КАК ТестируемыйКлиент
	|ПОМЕСТИТЬ ВтЗаданияВРаботе
	|ИЗ
	|	РегистрСведений.СоставЗаданийПулл КАК СоставЗаданийПулл
	|ГДЕ
	|	СоставЗаданийПулл.Задание = &Задание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СостоянияЗаданий.Задание КАК Задание,
	|	СостоянияЗаданий.ТестируемыйКлиент КАК ТестируемыйКлиент,
	|	СостоянияЗаданий.ДатаВыполнения КАК ДатаВыполнения,
	|	СостоянияЗаданий.ДатаВыполненияСек КАК ДатаВыполненияСек,
	|	СостоянияЗаданий.Интервал КАК ПослИнтервал,
	|	СостоянияЗаданий.ИнтервалСек КАК ПослИнтервалСек,
	|	СостоянияЗаданий.ВремяНачала КАК ПослВремяНачала,
	|	СостоянияЗаданий.ВремяНачалаСек КАК ПослВремяНачалаСек,
	|	ДОБАВИТЬКДАТЕ(СостоянияЗаданий.ВремяНачала, СЕКУНДА, СостоянияЗаданий.ИнтервалСек) КАК ПослВремяОкончания,
	|	СостоянияЗаданий.ВремяНачалаСек + СостоянияЗаданий.ИнтервалСек КАК ПослВремяОкончанияСек
	|ПОМЕСТИТЬ ВтПоследниеСостоянияЗаданий
	|ИЗ
	|	РегистрСведений.СостоянияЗаданий КАК СостоянияЗаданий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтЗаданияВИнтервале.Задание,
	|	ВтЗаданияВИнтервале.ТестируемыйКлиент,
	|	ВтЗаданияВИнтервале.Включено,
	|	ВтЗаданияВИнтервале.ДатаЗапуска,
	|	ВтЗаданияВИнтервале.ВремяНачала,
	|	ВтЗаданияВИнтервале.ВремяОкончания,
	|	ВтЗаданияВИнтервале.Интервал,
	|	ВтЗаданияВИнтервале.РасчетноеНачалоИнтервала,
	|	ЕСТЬNULL(ВтПоследниеСостоянияЗаданий.ДатаВыполнения, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаВыполнения,
	|	ЕСТЬNULL(ВтПоследниеСостоянияЗаданий.ДатаВыполненияСек, 0) КАК ДатаВыполненияСек,
	|	ЕСТЬNULL(ВтПоследниеСостоянияЗаданий.ПослВремяНачала, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ПослВремяНачала,
	|	ЕСТЬNULL(ВтПоследниеСостоянияЗаданий.ПослВремяНачалаСек, 0) КАК ПослВремяНачалаСек,
	|	ЕСТЬNULL(ВтПоследниеСостоянияЗаданий.ПослВремяОкончания, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ПослВремяОкончания,
	|	ЕСТЬNULL(ВтПоследниеСостоянияЗаданий.ПослВремяОкончанияСек, 0) КАК ПослВремяОкончанияСек,
	|	ЕСТЬNULL(ВтПоследниеСостоянияЗаданий.ПослИнтервал, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ПослИнтервал,
	|	ЕСТЬNULL(ВтПоследниеСостоянияЗаданий.ПослИнтервалСек, 0) КАК ПослИнтервалСек
	|ПОМЕСТИТЬ ВтЗаданияКЗапуску
	|ИЗ
	|	ВтЗаданияВИнтервалеСучетомОтсутвияВПалнировщике КАК ВтЗаданияВИнтервале
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЗаданияВРаботе КАК ВтЗаданияВРаботе
	|		ПО ВтЗаданияВИнтервале.Задание = ВтЗаданияВРаботе.Задание
	|			И ВтЗаданияВИнтервале.ТестируемыйКлиент = ВтЗаданияВРаботе.ТестируемыйКлиент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПоследниеСостоянияЗаданий КАК ВтПоследниеСостоянияЗаданий
	|		ПО ВтЗаданияВИнтервале.Задание = ВтПоследниеСостоянияЗаданий.Задание
	|			И ВтЗаданияВИнтервале.ТестируемыйКлиент = ВтПоследниеСостоянияЗаданий.ТестируемыйКлиент
	|ГДЕ
	|	ВтЗаданияВРаботе.Задание ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставЗаданий.Задание КАК Задание,
	|	ВтЗаданияКЗапуску.ТестируемыйКлиент КАК ТестируемыйКлиент,
	|	СоставЗаданий.ПорядокВыполнения КАК ПорядокВыполнения,
	|	СоставЗаданий.Действие КАК Действие,
	|	СоставЗаданий.ПодчиненноеЗадание КАК ПодчиненноеЗадание,
	|	СоставЗаданий.Задание.ЭтоПроверка КАК ЭтоПроверка,
	|	ВтЗаданияКЗапуску.Включено КАК Включено,
	|	ВтЗаданияКЗапуску.ДатаЗапуска КАК ДатаЗапуска,
	|	ВтЗаданияКЗапуску.ВремяНачала КАК ВремяНачала,
	|	ВтЗаданияКЗапуску.ВремяОкончания КАК ВремяОкончания,
	|	ВтЗаданияКЗапуску.Интервал КАК Интервал,
	|	ВтЗаданияКЗапуску.РасчетноеНачалоИнтервала КАК РасчетноеНачалоИнтервала,
	|	ВтЗаданияКЗапуску.ДатаВыполнения КАК ДатаВыполнения,
	|	ВтЗаданияКЗапуску.ПослВремяНачала КАК ПослВремяНачала,
	|	ВтЗаданияКЗапуску.ПослВремяОкончания КАК ПослВремяОкончания,
	|	ВтЗаданияКЗапуску.ПослИнтервал КАК ПослИнтервал
	|ИЗ
	|	ВтЗаданияКЗапуску КАК ВтЗаданияКЗапуску
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставЗаданий КАК СоставЗаданий
	|		ПО (СоставЗаданий.Задание = ВтЗаданияКЗапуску.Задание)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Задание,
	|	ПорядокВыполнения
	|ИТОГИ ПО
	|	Задание";
	
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	Запрос.УстановитьПараметр("ДеньНедели",ДеньНедели(ТекущаяДата()));
	Запрос.УстановитьПараметр("Задание",Задание);
	Запрос.УстановитьПараметр("ТестируемыйКлиент",ТестируемыйКлиент);
	Запрос.УстановитьПараметр("ТекущаяДатаСек",ПланировщикЗаданийКлиентСервер.ПреобразоватьДатуВСек(ТекущаяДата()));
	Запрос.УстановитьПараметр("ТекущееВремяСек",ПланировщикЗаданийКлиентСервер.ПреобразоватьДатуВСек(ТекущаяДата())-ПланировщикЗаданийКлиентСервер.ПреобразоватьДатуВСек(НачалоДня(ТекущаяДата())));
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ОписаниеОшибки = "Задание выполняется, неактивно или отсутствует состав.";
		ЗаписьЖурналаРегистрации("Планировщик.ДобавитьЗаданиеВПуллНемедленно",УровеньЖурналаРегистрации.Предупреждение,Неопределено,Задание,ОписаниеОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Попытка
			
			ВремяНачала = Неопределено;
			Интервал = Неопределено;
			
			ВыборкаДетальная = Выборка.Выбрать();
			
			// 0. Сборку создаем всегда, кроме подчиненного
			Если НЕ ЗначениеЗаполнено(Сборка) Тогда
				СоздатьСборкуДляЗадания(Сборка);
			КонецЕсли;
			
			// 1. В рамках это проверка создаем новый блок
			Если НЕ ЗначениеЗаполнено(Проверка) Тогда
				Если ВыборкаДетальная.Следующий() Тогда
					Если ВыборкаДетальная.ЭтоПроверка=Истина Тогда
						СоздатьПроврекуДляЗадания(Проверка,РегламентноеЗадание);
						ЭтоПроверка = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// 2. Добавляем задание в пулл
			НаборЗаписей = РегистрыСведений.СоставЗаданийПулл.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Задание.Установить(Выборка.Задание);
			Если НЕ ЗначениеЗаполнено(ТестируемыйКлиент) Тогда				
				ВыборкаДетальная.Сбросить();
				Если ВыборкаДетальная.Следующий() Тогда
					ТестируемыйКлиент = ВыборкаДетальная.ТестируемыйКлиент;
				КонецЕсли;				
			КонецЕсли;
			НаборЗаписей.Отбор.ТестируемыйКлиент.Установить(ТестируемыйКлиент);
			
			ВыборкаДетальная.Сбросить();
			Пока ВыборкаДетальная.Следующий() Цикл
				СтрокаНабора = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНабора,ВыборкаДетальная);
				СтрокаНабора.Проверка = Проверка;
				СтрокаНабора.Сборка = Сборка;
				СтрокаНабора.Статус = Перечисления.СтатусыЗаданий.ГотовоКЗапуску;
				СтрокаНабора.ДатаВыполнения = 0;
				СтрокаНабора.ДатаВыполненияСек = 0;
				ВремяНачала = ВыборкаДетальная.РасчетноеНачалоИнтервала;
				Интервал = ВыборкаДетальная.Интервал;
				Если ЗначениеЗаполнено(ЗаданиеВладелец) Тогда
					СтрокаНабора.ЗаданиеВладелец = ЗаданиеВладелец;
					СтрокаНабора.ПорядокВыполненияВладелец = ПорядокВыполненияВладелец;
				КонецЕсли;
			КонецЦикла;
			
			НаборЗаписей.Записать(Истина);
			
                 
			
			СтруктураДанных = новый Структура("ПорядокВыполнения,ЭтоЗапускЗадания,Сообщение,Статус",0,Истина,"Запуск задания",Перечисления.СтатусыЗаданий.ГотовоКЗапуску);
			СоздатьЗаписьЛогВыполненныхЗаданий(Выборка.Задание, Сборка, ТекущаяДата(), СтруктураДанных); 
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации("Планировщик.ДобавитьЗаданиеВПуллНемедленно",УровеньЖурналаРегистрации.Ошибка,Неопределено,Неопределено,ОписаниеОшибки(),РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
			ОписаниеОшибки = ОписаниеОшибки();
			Возврат Ложь;
		КонецПопытки; 		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция УдалитьЗаданиеИзПуллаНемедленно(Знач Задание,ОписаниеОшибки) Экспорт
	
	Попытка	
		
		НачатьТранзакцию();
		
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоставЗаданийПулл.Задание КАК Задание,
		|	СоставЗаданийПулл.Проверка КАК Проверка,
		|	СоставЗаданийПулл.ТестируемыйКлиент КАК ТестируемыйКлиент,
		|	СоставЗаданийПулл.Сборка КАК Сборка,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Отменено) КАК Статус
		|ИЗ
		|	РегистрСведений.СоставЗаданийПулл КАК СоставЗаданийПулл
		|ГДЕ
		|	СоставЗаданийПулл.Задание = &Задание
		|	И СоставЗаданийПулл.ТестируемыйКлиент = &ТестируемыйКлиент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоставЗаданийПулл.Задание КАК Задание,
		|	СоставЗаданийПулл.ТестируемыйКлиент КАК ТестируемыйКлиент,
		|	СоставЗаданийПулл.Проверка КАК Проверка,
		|	СоставЗаданийПулл.Сборка КАК Сборка,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Отменено) КАК Статус
		|ИЗ
		|	РегистрСведений.СоставЗаданийПулл КАК СоставЗаданийПулл
		|ГДЕ
		|	СоставЗаданийПулл.ЗаданиеВладелец = &Задание
		|	И СоставЗаданийПулл.ТестируемыйКлиент = &ТестируемыйКлиент";
		Запрос.УстановитьПараметр("Задание",Задание);
		Запрос.УстановитьПараметр("ТестируемыйКлиент",Задание.ТестируемыйКлиент);
		
		РезультатПакет = Запрос.ВыполнитьПакет();
		
		Выборка = РезультатПакет[0].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// удаляем запись родителя
			НаборЗаписей = РегистрыСведений.СоставЗаданийПулл.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Задание.Установить(Выборка.Задание);
			НаборЗаписей.Отбор.ТестируемыйКлиент.Установить(Выборка.ТестируемыйКлиент);
			НаборЗаписей.Отбор.Проверка.Установить(Выборка.Проверка);
			НаборЗаписей.Записать(Истина);
			
			СоздатьЗаписьЛогВыполненныхЗаданий(Выборка.Задание, Выборка.Сборка, ТекущаяДата(), Выборка); 			
			
		КонецЦикла;
		
		
		ВыборкаПодчиенные = РезультатПакет[1].Выбрать();
		
		Пока ВыборкаПодчиенные.Следующий() Цикл
			
			// удаляем запись родителя
			НаборЗаписей = РегистрыСведений.СоставЗаданийПулл.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Задание.Установить(ВыборкаПодчиенные.Задание);
			НаборЗаписей.Отбор.ТестируемыйКлиент.Установить(ВыборкаПодчиенные.ТестируемыйКлиент);
			НаборЗаписей.Отбор.Проверка.Установить(ВыборкаПодчиенные.Проверка);
			НаборЗаписей.Записать(Истина);
			
			СоздатьЗаписьЛогВыполненныхЗаданий(ВыборкаПодчиенные.Задание, ВыборкаПодчиенные.Сборка, ТекущаяДата(), ВыборкаПодчиенные); 			
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Планировщик.УдалитьЗаданиеИзПуллаНемедленно",УровеньЖурналаРегистрации.Ошибка,Неопределено,Неопределено,ОписаниеОшибки,РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура ВыполнениеЗаданийИзПулла(Знач РегламентноеЗадание=Ложь) Экспорт
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СоставЗаданийПулл.Задание КАК Задание,
	|	СоставЗаданийПулл.ПорядокВыполнения КАК ПорядокВыполнения,
	|	СоставЗаданийПулл.ПодчиненноеЗадание,
	|	СоставЗаданийПулл.Действие,
	|	СоставЗаданийПулл.Проверка КАК Проверка,
	|	СоставЗаданийПулл.Статус,
	|	СоставЗаданийПулл.ТестируемыйКлиент КАК ТестируемыйКлиент,
	|	СоставЗаданийПулл.ДатаВыполнения,
	|	СоставЗаданийПулл.Сообщение,
	|	СоставЗаданийПулл.ЭтапВыполнен,
	|	СоставЗаданийПулл.Действие.ТипДействия КАК ТипДействия,
	|	СоставЗаданийПулл.ЗаданиеВладелец,
	|	СоставЗаданийПулл.ПорядокВыполненияВладелец,
	|	СоставЗаданийПулл.ДатаВыполненияСек,
	|	СоставЗаданийПулл.Сборка КАК Сборка
	|ИЗ
	|	РегистрСведений.СоставЗаданийПулл КАК СоставЗаданийПулл
	|ГДЕ
	|	СоставЗаданийПулл.ЭтапВыполнен = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	СоставЗаданийПулл.ПорядокВыполнения
	|ИТОГИ
	|	МИНИМУМ(ПорядокВыполнения)
	|ПО
	|	ТестируемыйКлиент,
	|	Задание";
	
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаТестируемыйКлиент = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТестируемыйКлиент.Следующий() Цикл
		
		ВыборкаЗадание = ВыборкаТестируемыйКлиент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаЗадание.Следующий() Цикл
			// транзакция стоит не верно, надо переносить на запись отсюда !!!!!!!!!!!!!!!
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);  
			Попытка
				
				ВремяНачала = Неопределено;
				Интервал = Неопределено;
				
				ТестируемыйКлиент = ВыборкаЗадание.ТестируемыйКлиент;
				ПорядокВыполнения = ВыборкаЗадание.ПорядокВыполнения;
				ВыборкаДетальная = ВыборкаЗадание.Выбрать();
				Пока ВыборкаДетальная.Следующий() Цикл
					
					// не обрабатываем задания, которые в работе
					Если ВыборкаДетальная.Статус=Перечисления.СтатусыЗаданий.ВРаботе Тогда
						Продолжить;
					КонецЕсли;
					
					// выполняем только первый по порядку
					Если ПорядокВыполнения<>ВыборкаДетальная.ПорядокВыполнения Тогда
						Прервать;
					КонецЕсли;
					
					// Обработка задания
					Если ЗначениеЗаполнено(ВыборкаДетальная.ПодчиненноеЗадание) Тогда
						
						СоздатьПуллПодчиненныхЗаданий(ВыборкаДетальная,РегламентноеЗадание);
						
					КонецЕсли;
					
					#Область ОбработкаДействий
					
					// Обработка действия
					Если НЕ ЗначениеЗаполнено(ВыборкаДетальная.Действие) Тогда
						
						// нет действия
						
					ИначеЕсли ВыборкаДетальная.ТипДействия = Перечисления.ТипыДействийЗаданий.Пустое Тогда
						
						ВыполнениеДействийЗаданийИзПуллаПоТипуПустое(ВыборкаДетальная); 				
						
					ИначеЕсли ВыборкаДетальная.ТипДействия = Перечисления.ТипыДействийЗаданий.ЗапуститьПриложение Тогда
						
						ВыполнениеДействийЗаданийИзПуллаПоТипуЗапуститьПриложение(ВыборкаДетальная);	
						
					ИначеЕсли ВыборкаДетальная.ТипДействия = Перечисления.ТипыДействийЗаданий.ЗакрытьПриложение Тогда
						
						ВыполнениеДействийЗаданийИзПуллаПоТипуЗакрытьПриложение(ВыборкаДетальная);	
						
					ИначеЕсли ВыборкаДетальная.ТипДействия = Перечисления.ТипыДействийЗаданий.ВыполнитьПроизвольныйКодСервер Тогда
						
						ВыполнениеДействийЗаданийИзПуллаПоТипуПроизвольныйКодСервер(ВыборкаДетальная);	
						
					ИначеЕсли ВыборкаДетальная.ТипДействия = Перечисления.ТипыДействийЗаданий.ОжидатьСобытие Тогда
						
						ВыполнениеДействийЗаданийИзПуллаПоТипуОжидатьСобытие(ВыборкаДетальная);	
						
					ИначеЕсли ВыборкаДетальная.ТипДействия = Перечисления.ТипыДействийЗаданий.ВыгрузитьДополнительнуюОбработкуОтчетВФайл Тогда
						
						ВыполнениеДействийЗаданийИзПуллаПоТипуВыгрузитьДополнительнуюОбработкуОтчетВФайл(ВыборкаДетальная);	
						
					ИначеЕсли ВыборкаДетальная.ТипДействия = Перечисления.ТипыДействийЗаданий.ВыполнитьОбработку  Тогда
						
						ВыполнениеДействийЗаданийИзПуллаПоТипуВыполнитьОбработку(ВыборкаДетальная);	
						
					Иначе
						
						ВыполнениеДействийЗаданийИзПуллаПоТипуНеПоддерживаемое(ВыборкаДетальная);
						
					КонецЕсли;
					
					#КонецОбласти
					
				КонецЦикла;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации("ПланировщикЗаданийСервер.ВыполнениеЗаданийИзПулла",УровеньЖурналаРегистрации.Ошибка,Неопределено,Неопределено,ОписаниеОшибки(),РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		КонецПопытки; 		
	КонецЦикла;	
	КонецЦикла;	
КонецПроцедуры

Процедура СоздатьЗаписьЛогВыполненныхЗаданий(Знач Задание, Знач Сборка, Знач Дата, Знач СтруктураДанных) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ЛогВыполненныхЗаданий.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Задание = Задание;
	МенеджерЗаписи.Дата = Дата;
	МенеджерЗаписи.Сборка = Сборка;
	
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтруктураДанных);
	
	Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.Статус) Тогда
		МенеджерЗаписи.Статус=Перечисления.СтатусыЗаданий.Неопределено;
	КонецЕсли;
	
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

#Область ВспомогательныеДанные

Процедура СоздатьСборкуДляЗадания(Сборка)Экспорт
	
	Перем СборкаОбъект;
	
	СборкаОбъект = Справочники.Сборки.СоздатьЭлемент();
	СборкаОбъект.Автор = Пользователи.ТекущийПользователь();
	СборкаОбъект.Записать();
	Сборка = СборкаОбъект.Ссылка;

КонецПроцедуры

Процедура СоздатьПроврекуДляЗадания(Проверка,АвтоЗапуск=Ложь)Экспорт
	
	Перем ПроверкаОбъект;
	
	ПроверкаОбъект = Справочники.Проверки.СоздатьЭлемент();
	ПроверкаОбъект.Автор = Пользователи.ТекущийПользователь();
	ПроверкаОбъект.АвтоЗапуск = АвтоЗапуск;
	ПроверкаОбъект.ВидСобытия = Перечисления.ВариантыХраненияСобытий.Стандартное;
	ПроверкаОбъект.Записать();
	Проверка = ПроверкаОбъект.Ссылка;

КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформацииСостоянияЗаданий

Процедура ОбновлениеСостоянияЗаданийПриЗавершении(Знач Выборка)
	
	Перем МенеджерЗаписи;
	
	Если НЕ ЗначениеЗаполнено(Выборка.Задание) Тогда
		Возврат;
	КонецЕсли;
	
	// 1. Изменяем статусы заданий
	МенеджерЗаписи = РегистрыСведений.СостоянияЗаданий.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Задание = Выборка.Задание;
	МенеджерЗаписи.ТестируемыйКлиент = Выборка.ТестируемыйКлиент;
	
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.Задание = Выборка.Задание;
	МенеджерЗаписи.ТестируемыйКлиент = Выборка.ТестируемыйКлиент;
	
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи,Выборка,"Статус,ПоследняяПродолжительность,ДатаВыполнения");
	
	// получим в секундах дату выполнения
	МенеджерЗаписи.ДатаВыполненияСек = ПланировщикЗаданийКлиентСервер.ПреобразоватьДатуВСек(МенеджерЗаписи.ДатаВыполнения);
	
	Если Выборка.БылаОшибка=Истина Тогда
		МенеджерЗаписи.ДатаПоследнейНеудачи = Выборка.ДатаВыполененияПоследнегоШага;
	ИначеЕсли Выборка.БылоУспешно=Истина Тогда
		МенеджерЗаписи.ДатаПоследнегоУспеха = Выборка.ДатаВыполененияПоследнегоШага;
	КонецЕсли;		
	
	// статусы
	Если Выборка.БылаОшибка=Истина Тогда
		Если Выборка.СтабильностьВыполненияЗаданий=Перечисления.СтабильностьВыполненияЗаданий.СредиПоследнихЗаданийНетПровалившихся Тогда
			МенеджерЗаписи.СтабильностьВыполненияЗаданий = Перечисления.СтабильностьВыполненияЗаданий.СредиПоследних5Провалилось1;
		ИначеЕсли Выборка.СтабильностьВыполненияЗаданий=Перечисления.СтабильностьВыполненияЗаданий.СредиПоследних5Провалилось1 Тогда
			МенеджерЗаписи.СтабильностьВыполненияЗаданий = Перечисления.СтабильностьВыполненияЗаданий.СредиПоследних5Провалилось2;
		ИначеЕсли Выборка.СтабильностьВыполненияЗаданий=Перечисления.СтабильностьВыполненияЗаданий.СредиПоследних5Провалилось2 Тогда
			МенеджерЗаписи.СтабильностьВыполненияЗаданий = Перечисления.СтабильностьВыполненияЗаданий.СредиПоследних5Провалилось3;
		ИначеЕсли Выборка.СтабильностьВыполненияЗаданий=Перечисления.СтабильностьВыполненияЗаданий.СредиПоследних5Провалилось3 Тогда
			МенеджерЗаписи.СтабильностьВыполненияЗаданий = Перечисления.СтабильностьВыполненияЗаданий.СредиПоследних5Провалилось4;
		ИначеЕсли Выборка.СтабильностьВыполненияЗаданий=Перечисления.СтабильностьВыполненияЗаданий.СредиПоследних5Провалилось4 Тогда
			МенеджерЗаписи.СтабильностьВыполненияЗаданий = Перечисления.СтабильностьВыполненияЗаданий.ВсеПослдениеЗаданияПровалились;
		Иначе
			МенеджерЗаписи.СтабильностьВыполненияЗаданий = Перечисления.СтабильностьВыполненияЗаданий.ВсеПослдениеЗаданияПровалились;
		КонецЕсли;
	ИначеЕсли Выборка.БылоУспешно=Истина Тогда
		Если Выборка.СтабильностьВыполненияЗаданий=Перечисления.СтабильностьВыполненияЗаданий.ВсеПослдениеЗаданияПровалились Тогда
			МенеджерЗаписи.СтабильностьВыполненияЗаданий = Перечисления.СтабильностьВыполненияЗаданий.СредиПоследних5Провалилось4;
		ИначеЕсли Выборка.СтабильностьВыполненияЗаданий=Перечисления.СтабильностьВыполненияЗаданий.СредиПоследних5Провалилось4 Тогда
			МенеджерЗаписи.СтабильностьВыполненияЗаданий = Перечисления.СтабильностьВыполненияЗаданий.СредиПоследних5Провалилось3;
		ИначеЕсли Выборка.СтабильностьВыполненияЗаданий=Перечисления.СтабильностьВыполненияЗаданий.СредиПоследних5Провалилось3 Тогда
			МенеджерЗаписи.СтабильностьВыполненияЗаданий = Перечисления.СтабильностьВыполненияЗаданий.СредиПоследних5Провалилось2;
		ИначеЕсли Выборка.СтабильностьВыполненияЗаданий=Перечисления.СтабильностьВыполненияЗаданий.СредиПоследних5Провалилось2 Тогда
			МенеджерЗаписи.СтабильностьВыполненияЗаданий = Перечисления.СтабильностьВыполненияЗаданий.СредиПоследних5Провалилось1;
		ИначеЕсли Выборка.СтабильностьВыполненияЗаданий=Перечисления.СтабильностьВыполненияЗаданий.СредиПоследних5Провалилось1 Тогда
			МенеджерЗаписи.СтабильностьВыполненияЗаданий = Перечисления.СтабильностьВыполненияЗаданий.СредиПоследнихЗаданийНетПровалившихся;
		Иначе
			МенеджерЗаписи.СтабильностьВыполненияЗаданий = Перечисления.СтабильностьВыполненияЗаданий.СредиПоследнихЗаданийНетПровалившихся;
		КонецЕсли;
	КонецЕсли;
	
	МенеджерЗаписи.Записать(Истина);

КонецПроцедуры

Процедура ИзменениеСтатусовЗаданийВРаботе(Знач Выборка,Знач Задание,Знач ТестируемыйКлиент,Знач ВремяНачала,Знач Интервал)
	
	Перем МенеджерЗаписи;
	
	// wtf не запомниает задание и тестируемый клиент, надо позже поглядеть
	МенеджерЗаписи = РегистрыСведений.СостоянияЗаданий.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Задание 			 = Задание;
	МенеджерЗаписи.ТестируемыйКлиент = ТестируемыйКлиент;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.Задание 			 = Задание;
	МенеджерЗаписи.ТестируемыйКлиент = ТестируемыйКлиент;
	МенеджерЗаписи.Статус 			= Перечисления.СтатусыЗаданий.ВРаботе;
	МенеджерЗаписи.ДатаЗапуска 		= ТекущаяДата();
	МенеджерЗаписи.ДатаЗапускаСек	= ПланировщикЗаданийКлиентСервер.ПреобразоватьДатуВСек(МенеджерЗаписи.ДатаЗапуска);
	МенеджерЗаписи.ВремяНачала		= ТекущаяДата();
	МенеджерЗаписи.ВремяНачалаСек	= ПланировщикЗаданийКлиентСервер.ПреобразоватьДатуВСек(МенеджерЗаписи.ВремяНачала);
	МенеджерЗаписи.Интервал 		= Интервал;
	МенеджерЗаписи.ИнтервалСек 		= ПланировщикЗаданийКлиентСервер.ПреобразоватьДатуВСек(МенеджерЗаписи.Интервал);;
	МенеджерЗаписи.Записать(Истина);	

КонецПроцедуры

#КонецОбласти


#Область ВыполнениеДействийПоТипу

Процедура ВыполнениеДействийЗаданийИзПуллаПоТипуНеПоддерживаемое(Знач ВыборкаДетальная)  Экспорт
	
	МенеджерЗаписи = РегистрыСведений.СоставЗаданийПулл.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Задание = ВыборкаДетальная.Задание;
	МенеджерЗаписи.ПорядокВыполнения = ВыборкаДетальная.ПорядокВыполнения;
	МенеджерЗаписи.ПодчиненноеЗадание = ВыборкаДетальная.ПодчиненноеЗадание;
	МенеджерЗаписи.Действие = ВыборкаДетальная.Действие;
	МенеджерЗаписи.Проверка = ВыборкаДетальная.Проверка;
	
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.Задание = ВыборкаДетальная.Задание;
	МенеджерЗаписи.ПорядокВыполнения = ВыборкаДетальная.ПорядокВыполнения;
	МенеджерЗаписи.ПодчиненноеЗадание = ВыборкаДетальная.ПодчиненноеЗадание;
	МенеджерЗаписи.Действие = ВыборкаДетальная.Действие;
	МенеджерЗаписи.Проверка = ВыборкаДетальная.Проверка;
	
	
	МенеджерЗаписи.Статус = Перечисления.СтатусыЗаданий.Ошибка;
	
	МенеджерЗаписи.Сообщение = "Выполнено не поддерживаемое действие.";
	МенеджерЗаписи.ДатаВыполнения = ТекущаяДата();
	МенеджерЗаписи.ДатаВыполненияСек = ПланировщикЗаданийКлиентСервер.ПреобразоватьДатуВСек(МенеджерЗаписи.ДатаВыполнения);
	
	МенеджерЗаписи.ЭтапВыполнен = Истина;
	
	МенеджерЗаписи.Записать(Истина);
	
	СоздатьЗаписьЛогВыполненныхЗаданий(ВыборкаДетальная.Задание, ВыборкаДетальная.Сборка, МенеджерЗаписи.ДатаВыполнения, МенеджерЗаписи); 
	
КонецПроцедуры

Процедура СоздатьПуллПодчиненныхЗаданий(Знач ВыборкаДетальная,Знач РегламентноеЗадание=Ложь) Экспорт 
	
	ОписаниеОшибки = "";

	
	ДобавитьЗаданиеВПуллНемедленно(ВыборкаДетальная.ПодчиненноеЗадание,ОписаниеОшибки,ВыборкаДетальная.Задание,ВыборкаДетальная.ПорядокВыполнения,ВыборкаДетальная.Проверка,ВыборкаДетальная.ТестируемыйКлиент,ВыборкаДетальная.Сборка,РегламентноеЗадание);
	
	МенеджерЗаписи = РегистрыСведений.СоставЗаданийПулл.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ТестируемыйКлиент 	= ВыборкаДетальная.ТестируемыйКлиент;
	МенеджерЗаписи.Задание 				= ВыборкаДетальная.Задание;
	МенеджерЗаписи.ПорядокВыполнения 	= ВыборкаДетальная.ПорядокВыполнения;
	МенеджерЗаписи.ПодчиненноеЗадание 	= ВыборкаДетальная.ПодчиненноеЗадание;
	МенеджерЗаписи.Действие 			= ВыборкаДетальная.Действие;
	МенеджерЗаписи.Проверка 			= ВыборкаДетальная.Проверка;
	МенеджерЗаписи.Прочитать();
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		МенеджерЗаписи.Статус = Перечисления.СтатусыЗаданий.Ошибка;
		// при ошибке выполняем
		МенеджерЗаписи.ЭтапВыполнен = Истина;
		МенеджерЗаписи.Сообщение = ОписаниеОшибки;
		МенеджерЗаписи.Статус = Перечисления.СтатусыЗаданий.Ошибка;
	Иначе
		МенеджерЗаписи.Сообщение = "Выполнен запуск подчиненного задания";
		МенеджерЗаписи.Статус = Перечисления.СтатусыЗаданий.ВРаботе;
	КонецЕсли;	


	МенеджерЗаписи.ДатаВыполнения = ТекущаяДата();
	МенеджерЗаписи.ДатаВыполненияСек = ПланировщикЗаданийКлиентСервер.ПреобразоватьДатуВСек(МенеджерЗаписи.ДатаВыполнения);
	
	МенеджерЗаписи.Записать(Истина);
	
	СоздатьЗаписьЛогВыполненныхЗаданий(ВыборкаДетальная.Задание, ВыборкаДетальная.Сборка, МенеджерЗаписи.ДатаВыполнения, МенеджерЗаписи); 
	
КонецПроцедуры

Процедура ВыполнениеДействийЗаданийИзПуллаПоТипуПустое(Знач ВыборкаДетальная) Экспорт 

	
	МенеджерЗаписи = РегистрыСведений.СоставЗаданийПулл.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Задание 				= ВыборкаДетальная.Задание;
	МенеджерЗаписи.ТестируемыйКлиент 	= ВыборкаДетальная.ТестируемыйКлиент;
	МенеджерЗаписи.ПорядокВыполнения 	= ВыборкаДетальная.ПорядокВыполнения;
	МенеджерЗаписи.ПодчиненноеЗадание 	= ВыборкаДетальная.ПодчиненноеЗадание;
	МенеджерЗаписи.Действие 			= ВыборкаДетальная.Действие;
	МенеджерЗаписи.Проверка 			= ВыборкаДетальная.Проверка;
	
	МенеджерЗаписи.Прочитать();
	
	// если нет данных после чтения
	МенеджерЗаписи.Задание 				= ВыборкаДетальная.Задание;
	МенеджерЗаписи.ТестируемыйКлиент 	= ВыборкаДетальная.ТестируемыйКлиент;
	МенеджерЗаписи.ПорядокВыполнения 	= ВыборкаДетальная.ПорядокВыполнения;
	МенеджерЗаписи.ПодчиненноеЗадание 	= ВыборкаДетальная.ПодчиненноеЗадание;
	МенеджерЗаписи.Действие				= ВыборкаДетальная.Действие;
	МенеджерЗаписи.Проверка 			= ВыборкаДетальная.Проверка;
	
	МенеджерЗаписи.Статус = Перечисления.СтатусыЗаданий.Успешно;
	
	МенеджерЗаписи.Сообщение = "Выполнено пустое действие.";
	МенеджерЗаписи.ДатаВыполнения = ТекущаяДата();
	МенеджерЗаписи.ДатаВыполненияСек = ПланировщикЗаданийКлиентСервер.ПреобразоватьДатуВСек(МенеджерЗаписи.ДатаВыполнения);
	
	МенеджерЗаписи.ЭтапВыполнен = Истина;
	
	МенеджерЗаписи.Записать(Истина);
	
	СоздатьЗаписьЛогВыполненныхЗаданий(ВыборкаДетальная.Задание, ВыборкаДетальная.Сборка, МенеджерЗаписи.ДатаВыполнения, МенеджерЗаписи); 
	
КонецПроцедуры

Процедура ВыполнениеДействийЗаданийИзПуллаПоТипуЗапуститьПриложение(Знач ВыборкаДетальная) Экспорт 
	
	Сообщение = "";
	
	МенеджерЗаписи = РегистрыСведений.СоставЗаданийПулл.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Задание 				= ВыборкаДетальная.Задание;
	МенеджерЗаписи.ТестируемыйКлиент 	= ВыборкаДетальная.ТестируемыйКлиент;
	МенеджерЗаписи.ПорядокВыполнения 	= ВыборкаДетальная.ПорядокВыполнения;
	МенеджерЗаписи.ПодчиненноеЗадание 	= ВыборкаДетальная.ПодчиненноеЗадание;
	МенеджерЗаписи.Действие 			= ВыборкаДетальная.Действие;
	МенеджерЗаписи.Проверка 			= ВыборкаДетальная.Проверка;
	
	МенеджерЗаписи.Прочитать();
	
	// если нет данных после чтения
	МенеджерЗаписи.Задание 				= ВыборкаДетальная.Задание;
	МенеджерЗаписи.ТестируемыйКлиент 	= ВыборкаДетальная.ТестируемыйКлиент;
	МенеджерЗаписи.ПорядокВыполнения 	= ВыборкаДетальная.ПорядокВыполнения;
	МенеджерЗаписи.ПодчиненноеЗадание 	= ВыборкаДетальная.ПодчиненноеЗадание;
	МенеджерЗаписи.Действие				= ВыборкаДетальная.Действие;
	МенеджерЗаписи.Проверка 			= ВыборкаДетальная.Проверка;
	
	
	СтруктураДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыборкаДетальная.Действие,"ИспользоватьШаблонКоманды,ШаблонКоманды,КоманднаяСтрока,ИспользоватьКомандуПлатформыЗапуститьПриложение,РабочееМесто");	
	
	Если СтруктураДействия.ИспользоватьШаблонКоманды=Истина Тогда
		мПараметры = новый Структура("Владелец,Действие,Проверка,ЗаданиеВладелец,ТестируемыйКлиент,Сборка",ВыборкаДетальная.Задание,ВыборкаДетальная.Действие,ВыборкаДетальная.Проверка,ВыборкаДетальная.ЗаданиеВладелец,ВыборкаДетальная.ТестируемыйКлиент,ВыборкаДетальная.Сборка);
		ШаблонКоманды = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураДействия.ШаблонКоманды,"ТекстШаблона");
		ШаблонКоманды = СокрЛП(ШаблонКоманды);
		// удалим переносы строк
		Если Константы.УдалятьПереносыСтрокИзКомандыЗапуска.Получить()=Истина Тогда
			ШаблонКоманды = СтрЗаменить(ШаблонКоманды,Символы.ПС," ");
		КонецЕсли;
		СтрокаЗапуска = СценарноеТестированиеСервер.ОбработатьСтрокуПоПараметрам(ШаблонКоманды,мПараметры);
	Иначе
		мПараметры = новый Структура("Владелец,Действие,Проверка,ЗаданиеВладелец,ТестируемыйКлиент,Сборка",ВыборкаДетальная.Задание,ВыборкаДетальная.Действие,ВыборкаДетальная.Проверка,ВыборкаДетальная.ЗаданиеВладелец,ВыборкаДетальная.ТестируемыйКлиент,ВыборкаДетальная.Сборка);
		СтрокаЗапуска = СценарноеТестированиеСервер.ОбработатьСтрокуПоПараметрам(СтруктураДействия.КоманднаяСтрока,мПараметры);
	КонецЕсли;                 		
	
	Если ЗначениеЗаполнено(СтрокаЗапуска) Тогда
		Если СтруктураДействия.ИспользоватьКомандуПлатформыЗапуститьПриложение=Истина Тогда
			ЗапуститьПриложение(СтрокаЗапуска);
			МенеджерЗаписи.Статус = Перечисления.СтатусыЗаданий.Успешно;
			МенеджерЗаписи.Сообщение = "Запущено приложение типовой командой платформы ""ЗапуститьПриложение"".";
			УстановитьЗначениеПеременной(ВыборкаДетальная.Задание,Справочники.ИменаПеременных.PID,0,ВыборкаДетальная.Проверка);
		Иначе
			Если ЗначениеЗаполнено(СтруктураДействия.РабочееМесто) Тогда
				СтруктураКомпьютера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураДействия.РабочееМесто,"ИмяКомпьютера,IPv4");
				Компьютер = "";
				Если ЗначениеЗаполнено(СтруктураКомпьютера.IPv4) Тогда
					Компьютер = СтруктураКомпьютера.IPv4;
				ИначеЕсли ЗначениеЗаполнено(СтруктураКомпьютера.ИмяКомпьютера) Тогда
					Компьютер = СтруктураКомпьютера.ИмяКомпьютера;
				Иначе 
					Сообщение = "В настройках выбранного рабочего места, не указаны 'ИмяКомпьютера' or 'IPv4'. Не могу запустить удаленно!";
				КонецЕсли;
				Если ЗначениеЗаполнено(Компьютер) Тогда
					PID = ПланировщикЗаданийКлиентСервер.ЗапуститьПриложениеУдаленно(СтрокаЗапуска,Компьютер,Сообщение);
				КонецЕсли;	
			Иначе                                    
				PID = ПланировщикЗаданийКлиентСервер.ЗапуститьПриложениеЛокально(СтрокаЗапуска,Сообщение);
			КонецЕсли;
			
			Если PID>0 Тогда
				МенеджерЗаписи.Статус = Перечисления.СтатусыЗаданий.Успешно;
				МенеджерЗаписи.Сообщение = "Запущено приложение с PID = "+Строка(PID);
				УстановитьЗначениеПеременной(ВыборкаДетальная.Задание,Справочники.ИменаПеременных.PID,PID,ВыборкаДетальная.Проверка);
			Иначе
				МенеджерЗаписи.Статус = Перечисления.СтатусыЗаданий.Ошибка;
				МенеджерЗаписи.Сообщение = "Произошла ошибка при запуске приложения. Действие"+строка(ВыборкаДетальная.Действие)+" "+Символы.ПС+Сообщение;
			КонецЕсли;
		КонецЕсли;
	Иначе
		МенеджерЗаписи.Статус = Перечисления.СтатусыЗаданий.Ошибка;
		МенеджерЗаписи.Сообщение = "Не заполнена строка запуска.";
	КонецЕсли;
	
	
	МенеджерЗаписи.ДополнительноеСообщение = СтрокаЗапуска;
	МенеджерЗаписи.ЭтапВыполнен = Истина;
	МенеджерЗаписи.ДатаВыполнения = ТекущаяДата();
	МенеджерЗаписи.ДатаВыполненияСек = ПланировщикЗаданийКлиентСервер.ПреобразоватьДатуВСек(МенеджерЗаписи.ДатаВыполнения);

	
	МенеджерЗаписи.Записать(Истина);
	
	СоздатьЗаписьЛогВыполненныхЗаданий(ВыборкаДетальная.Задание, ВыборкаДетальная.Сборка, МенеджерЗаписи.ДатаВыполнения, МенеджерЗаписи); 
	
КонецПроцедуры

Процедура ВыполнениеДействийЗаданийИзПуллаПоТипуЗакрытьПриложение(Знач ВыборкаДетальная) Экспорт 
	
	Сообщение = "";
	PID = -1;
	
	МенеджерЗаписи = РегистрыСведений.СоставЗаданийПулл.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Задание 				= ВыборкаДетальная.Задание;
	МенеджерЗаписи.ТестируемыйКлиент 	= ВыборкаДетальная.ТестируемыйКлиент;
	МенеджерЗаписи.ПорядокВыполнения 	= ВыборкаДетальная.ПорядокВыполнения;
	МенеджерЗаписи.ПодчиненноеЗадание 	= ВыборкаДетальная.ПодчиненноеЗадание;
	МенеджерЗаписи.Действие 			= ВыборкаДетальная.Действие;
	МенеджерЗаписи.Проверка 			= ВыборкаДетальная.Проверка;
	
	
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.Задание 				= ВыборкаДетальная.Задание;
	МенеджерЗаписи.ТестируемыйКлиент 	= ВыборкаДетальная.ТестируемыйКлиент;
	МенеджерЗаписи.ПорядокВыполнения 	= ВыборкаДетальная.ПорядокВыполнения;
	МенеджерЗаписи.ПодчиненноеЗадание 	= ВыборкаДетальная.ПодчиненноеЗадание;
	МенеджерЗаписи.Действие 			= ВыборкаДетальная.Действие;
	МенеджерЗаписи.Проверка 			= ВыборкаДетальная.Проверка;
	
	
	PID = ПолучитьЗначениеПеременной(ВыборкаДетальная.Задание,Справочники.ИменаПеременных.PID,ВыборкаДетальная.Проверка);
	
	Если PID=Неопределено или pid=-1 Тогда
		МенеджерЗаписи.Статус = Перечисления.СтатусыЗаданий.Успешно;
		МенеджерЗаписи.Сообщение = "Информация о запуске приложения отсутсвует. Закрытие не требуется.";
	Иначе
		Результат = ПланировщикЗаданийКлиентСервер.ЗавершитьПроцессЛокально(PID,Сообщение);
		
		Если Результат=Неопределено Тогда
			МенеджерЗаписи.Статус = Перечисления.СтатусыЗаданий.Ошибка;
			МенеджерЗаписи.Сообщение = "Произошла ошибка при попытке закрытия приложения. PID = "+строка(PID)+Символы.ПС+Сообщение;
		Иначе
			МенеджерЗаписи.Статус = Перечисления.СтатусыЗаданий.Успешно;
			МенеджерЗаписи.Сообщение = "Приложение закрыто. PID = "+строка(PID)+Символы.ПС+Сообщение;
		КонецЕсли;
	КонецЕсли;
	
	МенеджерЗаписи.ЭтапВыполнен = Истина;
	МенеджерЗаписи.ДатаВыполнения = ТекущаяДата();
	МенеджерЗаписи.ДатаВыполненияСек = ПланировщикЗаданийКлиентСервер.ПреобразоватьДатуВСек(МенеджерЗаписи.ДатаВыполнения);
	
	МенеджерЗаписи.Записать(Истина);
	
	СоздатьЗаписьЛогВыполненныхЗаданий(ВыборкаДетальная.Задание, ВыборкаДетальная.Сборка, МенеджерЗаписи.ДатаВыполнения, МенеджерЗаписи); 
	
КонецПроцедуры

Процедура ВыполнениеДействийЗаданийИзПуллаПоТипуПроизвольныйКодСервер(Знач ВыборкаДетальная) Экспорт 
	
	МенеджерЗаписи = РегистрыСведений.СоставЗаданийПулл.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Задание 				= ВыборкаДетальная.Задание;
	МенеджерЗаписи.ТестируемыйКлиент 	= ВыборкаДетальная.ТестируемыйКлиент;
	МенеджерЗаписи.ПорядокВыполнения 	= ВыборкаДетальная.ПорядокВыполнения;
	МенеджерЗаписи.ПодчиненноеЗадание 	= ВыборкаДетальная.ПодчиненноеЗадание;
	МенеджерЗаписи.Действие 			= ВыборкаДетальная.Действие;
	МенеджерЗаписи.Проверка 			= ВыборкаДетальная.Проверка;	
	
	МенеджерЗаписи.Прочитать();
	
	Сообщение = "";
	Код1С = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДетальная.Действие,"Код1С");
	
	Если НЕ ЗначениеЗаполнено(Код1С) Тогда
		Алгоритм = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДетальная.Действие,"Алгоритм");
		Если ЗначениеЗаполнено(Алгоритм) Тогда
			Код1С = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Алгоритм,"ТекстКода1С");
		КонецЕсли;
	КонецЕсли;
	
	// выполняем изолированно от основного кода
	Статус = ВыполнениеДействийЗаданийИзПуллаПоТипуПроизвольныйКодСерверИзолированно(ВыборкаДетальная.Задание, ВыборкаДетальная.Действие, Код1С, Сообщение);
	
	МенеджерЗаписи.Задание = ВыборкаДетальная.Задание;
	МенеджерЗаписи.ТестируемыйКлиент 	= ВыборкаДетальная.ТестируемыйКлиент;
	МенеджерЗаписи.ПорядокВыполнения 	= ВыборкаДетальная.ПорядокВыполнения;
	МенеджерЗаписи.ПодчиненноеЗадание 	= ВыборкаДетальная.ПодчиненноеЗадание;
	МенеджерЗаписи.Действие 			= ВыборкаДетальная.Действие;
	МенеджерЗаписи.Проверка 			= ВыборкаДетальная.Проверка;	
	
	МенеджерЗаписи.Статус 				= Статус;
	МенеджерЗаписи.Сообщение 			= Сообщение;
	МенеджерЗаписи.ДатаВыполнения 		= ТекущаяДата();
	МенеджерЗаписи.ДатаВыполненияСек 	= ПланировщикЗаданийКлиентСервер.ПреобразоватьДатуВСек(МенеджерЗаписи.ДатаВыполнения);
	
	МенеджерЗаписи.ЭтапВыполнен = Истина;
	
	МенеджерЗаписи.Записать(Истина);
	
	СоздатьЗаписьЛогВыполненныхЗаданий(ВыборкаДетальная.Задание, ВыборкаДетальная.Сборка, МенеджерЗаписи.ДатаВыполнения, МенеджерЗаписи); 
	
КонецПроцедуры

Функция ВыполнениеДействийЗаданийИзПуллаПоТипуПроизвольныйКодСерверИзолированно(Знач Задание, Знач Действие, Знач Код1С, Сообщение)
	
	Перем Статус;
	
	Попытка		
		Выполнить(Код1С);
		Статус = Перечисления.СтатусыЗаданий.Успешно;
	Исключение
		Сообщение = ОписаниеОшибки();
		Статус = Перечисления.СтатусыЗаданий.Ошибка;
	КонецПопытки;
	Возврат Статус;

КонецФункции

Процедура ВыполнениеДействийЗаданийИзПуллаПоТипуОжидатьСобытие(Знач ВыборкаДетальная) Экспорт 
	
	// событие выполняется, по жостижению одного из вариантов (проверка идет по или):
	// 1. истечение интервала
	// 2. достижения времени
	// 3. достижения даты и времени
	// 4. наличия файла
	// 5. иначе успешно
	
	СтруктураРеквзитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыборкаДетальная.Действие,"Время,ДатаВремя,Интервал,ВремяСек,ДатаВремяСек,ИнтервалСек,ПоявлениеФайла,ОтсутствиеФайла,ПутьКФайлу,ИспользоватьШаблонКоманды");
	
	ЭтапВыполнен = Ложь;
	ХотябыОдноДействие = Ложь;
	Триггеры = "";
	ТекущаяДата = ТекущаяДата();
	НачалоДняСек = ПланировщикЗаданийКлиентСервер.ПреобразоватьДатуВСек(НачалоДня(ТекущаяДата()));
	ТекущаяДатаСек = ПланировщикЗаданийКлиентСервер.ПреобразоватьДатуВСек(ТекущаяДата());	
	ТекущееВремяСек = ТекущаяДатаСек - НачалоДняСек;
	Успешно = Истина;
	ВремяЗавершенияПредыдущегоЭтапаСек = 0;
	
	// получим время выполнения предыдущего интервала
	Если ЗначениеЗаполнено(СтруктураРеквзитов.Интервал) И ЗначениеЗаполнено(ВыборкаДетальная.ДатаВыполненияСек) Тогда
		
		ВремяЗавершенияПредыдущегоЭтапаСек = ВыборкаДетальная.ДатаВыполненияСек;
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураРеквзитов.Интервал) Тогда 
		
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	МАКСИМУМ(СоставЗаданийПулл.ДатаВыполнения) КАК ДатаВыполнения,
		|	МАКСИМУМ(СоставЗаданийПулл.ДатаВыполненияСек) КАК ДатаВыполненияСек
		|ИЗ
		|	РегистрСведений.СоставЗаданийПулл КАК СоставЗаданийПулл
		|ГДЕ
		|	СоставЗаданийПулл.Задание = &Задание
		|	И СоставЗаданийПулл.ЭтапВыполнен
		|	И СоставЗаданийПулл.Проверка = &Проверка
		|	И СоставЗаданийПулл.Сборка = &Сборка
		|	И СоставЗаданийПулл.ТестируемыйКлиент = &ТестируемыйКлиент
		|
		|ИМЕЮЩИЕ
		|	НЕ МАКСИМУМ(СоставЗаданийПулл.ДатаВыполнения) ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("Задание",ВыборкаДетальная.Задание);
		Запрос.УстановитьПараметр("Проверка",ВыборкаДетальная.Проверка);
		Запрос.УстановитьПараметр("Сборка",ВыборкаДетальная.Сборка);
		Запрос.УстановитьПараметр("ТестируемыйКлиент",ВыборкаДетальная.ТестируемыйКлиент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			ВремяЗавершенияПредыдущегоЭтапаСек = Выборка.ДатаВыполненияСек;
			
		Иначе
			
			// если самый первый
			ВремяЗавершенияПредыдущегоЭтапаСек = ТекущаяДатаСек;	
			
			МенеджерЗаписи = РегистрыСведений.СоставЗаданийПулл.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Задание 				= ВыборкаДетальная.Задание;
			МенеджерЗаписи.ТестируемыйКлиент 	= ВыборкаДетальная.ТестируемыйКлиент;
			МенеджерЗаписи.ПорядокВыполнения 	= ВыборкаДетальная.ПорядокВыполнения;
			МенеджерЗаписи.ПодчиненноеЗадание 	= ВыборкаДетальная.ПодчиненноеЗадание;
			МенеджерЗаписи.Действие 			= ВыборкаДетальная.Действие;
			МенеджерЗаписи.Проверка 			= ВыборкаДетальная.Проверка;
			
			
			МенеджерЗаписи.Прочитать();
			
			МенеджерЗаписи.Задание 				= ВыборкаДетальная.Задание;
			МенеджерЗаписи.ТестируемыйКлиент 	= ВыборкаДетальная.ТестируемыйКлиент;
			МенеджерЗаписи.ПорядокВыполнения 	= ВыборкаДетальная.ПорядокВыполнения;
			МенеджерЗаписи.ПодчиненноеЗадание 	= ВыборкаДетальная.ПодчиненноеЗадание;
			МенеджерЗаписи.Действие 			= ВыборкаДетальная.Действие;
			МенеджерЗаписи.Проверка 			= ВыборкаДетальная.Проверка;
			МенеджерЗаписи.ДатаВыполненияСек	= ТекущаяДатаСек;
			МенеджерЗаписи.ДатаВыполнения		= ТекущаяДата;  			
			
			МенеджерЗаписи.Записать();
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	// 1. истечение интервала
	Если ЗначениеЗаполнено(СтруктураРеквзитов.Интервал) Тогда
		ХотябыОдноДействие = Истина;	
		Если СтруктураРеквзитов.ИнтервалСек-(ТекущаяДатаСек-ВремяЗавершенияПредыдущегоЭтапаСек)<0 Тогда
			ЭтапВыполнен = Истина;
			Триггеры = " По достижении 'Интервал'. ВремяЗавершенияПредыдущегоЭтапаСек("+ВремяЗавершенияПредыдущегоЭтапаСек+","+ПланировщикЗаданийКлиентСервер.ПреобразоватьСекВДату(ВремяЗавершенияПредыдущегоЭтапаСек)+") ТекДата("+ТекущаяДата()+")";
		КонецЕсли;
	КонецЕсли;
	
	// 2. достижения времени
	Если ЗначениеЗаполнено(СтруктураРеквзитов.Время) Тогда
		ХотябыОдноДействие = Истина;	
		Если Секунда(СтруктураРеквзитов.Время)-(Секунда(ТекущаяДата)-Секунда(НачалоДня(ТекущаяДата)))<0 Тогда
			ЭтапВыполнен = Истина;
			Триггеры = " По достижении 'Время' ";
		КонецЕсли;
	КонецЕсли;

	
	// 3. достижения даты и времени
	Если ЗначениеЗаполнено(СтруктураРеквзитов.ДатаВремя) Тогда
		ХотябыОдноДействие = Истина;	
		Если СтруктураРеквзитов.ДатаВремя<ТекущаяДата Тогда
			ЭтапВыполнен = Истина;
			Триггеры = " По достижении 'Дата-Время' ";
		КонецЕсли;
	КонецЕсли;

	ПутьКФайлу = СтруктураРеквзитов.ПутьКФайлу;
	Если ЗначениеЗаполнено(ПутьКФайлу) И СтруктураРеквзитов.ИспользоватьШаблонКоманды=Истина Тогда
		мПараметры = новый Структура("Владелец,Действие,Проверка,ЗаданиеВладелец",ВыборкаДетальная.Задание,ВыборкаДетальная.Действие,ВыборкаДетальная.Проверка,ВыборкаДетальная.ЗаданиеВладелец);
		ПутьКФайлу = СценарноеТестированиеСервер.ОбработатьСтрокуПоПараметрам(ПутьКФайлу,мПараметры);
	КонецЕсли;
	
	// 4. наличия файла
	Если СтруктураРеквзитов.ПоявлениеФайла = Истина  Тогда
		ХотябыОдноДействие = Истина;	
		Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
			Если Найти(ПутьКФайлу,"*") Тогда
				
				МассивЧастей = новый Массив;
				Если Найти(ПутьКФайлу,"\") Тогда
					МассивЧастей = СтрРазделить(ПутьКФайлу+"","\",Истина);
				ИначеЕсли Найти(ПутьКФайлу,"/") Тогда
					МассивЧастей = СтрРазделить(ПутьКФайлу+"","/",Истина);
				КонецЕсли;
				Если МассивЧастей.Количество()=0 Тогда
					Возврат;
				КонецЕсли;
				ПутьКаталог = СтрЗаменить(ПутьКФайлу,МассивЧастей[МассивЧастей.Количество()-1],"");
				ШаблонПоиска = СтрЗаменить(ПутьКФайлу,ПутьКаталог,"");
				НайденныеФайлы = НайтиФайлы(ПутьКаталог,ШаблонПоиска,Истина);
				Если НайденныеФайлы.Количество()>0 Тогда
					ЭтапВыполнен = Истина;
					Триггеры = " По событию 'Появление файла по шаблону' ";
				КонецЕсли;
				
			Иначе
				Файл = новый Файл(ПутьКФайлу);
				Если Файл.Существует() Тогда
					ЭтапВыполнен = Истина;
					Триггеры = " По событию 'Появление файла' ";
				КонецЕсли;
			КонецЕсли;
		Иначе
			Триггеры = "Не указан путь к файлу!";
			Успешно = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// 5. Отсутствие файла
	Если СтруктураРеквзитов.ОтсутствиеФайла=Истина Тогда
		ХотябыОдноДействие = Истина;	
		Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
			Если Найти(ПутьКФайлу,"*") Тогда
				
				МассивЧастей = новый Массив;
				Если Найти(ПутьКФайлу,"\") Тогда
					МассивЧастей = СтрРазделить(ПутьКФайлу+"","\",Истина);
				ИначеЕсли Найти(ПутьКФайлу,"/") Тогда
					МассивЧастей = СтрРазделить(ПутьКФайлу+"","/",Истина);
				КонецЕсли;
				Если МассивЧастей.Количество()=0 Тогда
					Возврат;
				КонецЕсли;
				ПутьКаталог = СтрЗаменить(ПутьКФайлу,МассивЧастей[МассивЧастей.Количество()-1],"");
				ШаблонПоиска = СтрЗаменить(ПутьКФайлу,ПутьКаталог,"");
				НайденныеФайлы = НайтиФайлы(ПутьКаталог,ШаблонПоиска,Истина);
				Если НайденныеФайлы.Количество()=0 Тогда
					ЭтапВыполнен = Истина;
					Триггеры = " По событию 'Отсутствие файла по шаблону' ";
				КонецЕсли;
				
			Иначе
				Файл = новый Файл(ПутьКФайлу);
				Если НЕ Файл.Существует() Тогда
					ЭтапВыполнен = Истина;
					Триггеры = " По событию 'Отсутствие файла' ";
				КонецЕсли;
			КонецЕсли;
		Иначе
			Триггеры = "Не указан путь к файлу!";
			Успешно = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	
	// 6. Иначе успешно	
	Если ХотябыОдноДействие=Ложь Тогда
		ЭтапВыполнен = Истина;
		Триггеры = "Отсутствуют!";
	КонецЕсли;
	
	Если ЭтапВыполнен = Истина Тогда
		МенеджерЗаписи = РегистрыСведений.СоставЗаданийПулл.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Задание 				= ВыборкаДетальная.Задание;
		МенеджерЗаписи.ТестируемыйКлиент 	= ВыборкаДетальная.ТестируемыйКлиент;
		МенеджерЗаписи.ПорядокВыполнения 	= ВыборкаДетальная.ПорядокВыполнения;
		МенеджерЗаписи.ПодчиненноеЗадание 	= ВыборкаДетальная.ПодчиненноеЗадание;
		МенеджерЗаписи.Действие 			= ВыборкаДетальная.Действие;
		МенеджерЗаписи.Проверка 			= ВыборкаДетальная.Проверка;
		
		
		МенеджерЗаписи.Прочитать();
		
		МенеджерЗаписи.Задание 				= ВыборкаДетальная.Задание;
		МенеджерЗаписи.ТестируемыйКлиент 	= ВыборкаДетальная.ТестируемыйКлиент;
		МенеджерЗаписи.ПорядокВыполнения 	= ВыборкаДетальная.ПорядокВыполнения;
		МенеджерЗаписи.ПодчиненноеЗадание 	= ВыборкаДетальная.ПодчиненноеЗадание;
		МенеджерЗаписи.Действие 			= ВыборкаДетальная.Действие;
		МенеджерЗаписи.Проверка 			= ВыборкаДетальная.Проверка;
		
		
		Если Успешно=Истина Тогда
			МенеджерЗаписи.Статус = Перечисления.СтатусыЗаданий.Успешно;
		Иначе
			МенеджерЗаписи.Статус = Перечисления.СтатусыЗаданий.Ошибка;
		КонецЕсли;
		
		МенеджерЗаписи.Сообщение = "Триггеры ожидание события: "+Триггеры;
		МенеджерЗаписи.ДатаВыполнения = ТекущаяДата();
		МенеджерЗаписи.ДатаВыполненияСек = ПланировщикЗаданийКлиентСервер.ПреобразоватьДатуВСек(МенеджерЗаписи.ДатаВыполнения);
		
		МенеджерЗаписи.ЭтапВыполнен = Истина;
		
		МенеджерЗаписи.Записать(Истина);
		
		СоздатьЗаписьЛогВыполненныхЗаданий(ВыборкаДетальная.Задание, ВыборкаДетальная.Сборка, МенеджерЗаписи.ДатаВыполнения, МенеджерЗаписи); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнениеДействийЗаданийИзПуллаПоТипуВыгрузитьДополнительнуюОбработкуОтчетВФайл(Знач ВыборкаДетальная) Экспорт 

	Сообщение = "";
	РезультатДействияУспешно = Истина;
	СвойстваДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыборкаДетальная.Действие,"Обработка,ПутьКФайлу,Каталог");
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СвойстваДействия.Обработка,"ИмяФайла,ХранилищеОбработки");
	
	ДвоичныеДанные = СтруктураРеквизитов.ХранилищеОбработки.Получить();

	Если НЕ ДвоичныеДанные=Неопределено Тогда
		
		ПутьКОбработке = "";
		
		Если ЗначениеЗаполнено(СвойстваДействия.ПутьКФайлу) Тогда
			ПутьКОбработке = СвойстваДействия.ПутьКФайлу;	
		Иначе
			ПутьКОбработке = СвойстваДействия.Каталог+"\"+СвойстваДействия.ИмяФайла;
		КонецЕсли;
		
		Попытка
			ДвоичныеДанные.Записать(ПутьКОбработке);
		Исключение
			Сообщение = ОписаниеОшибки();
			РезультатДействияУспешно= Ложь;
		КонецПопытки;
		
	Иначе
		
		РезультатДействияУспешно= Ложь;
		Сообщение = "В справочник дополнительные обработки и отчеты '"+Строка(СвойстваДействия.Обработка)+"' не загружен файл! Нет возможности выполнить операцию.";
		
	КонецЕсли;			
	
	
	МенеджерЗаписи = РегистрыСведений.СоставЗаданийПулл.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Задание 				= ВыборкаДетальная.Задание;
	МенеджерЗаписи.ТестируемыйКлиент 	= ВыборкаДетальная.ТестируемыйКлиент;
	МенеджерЗаписи.ПорядокВыполнения 	= ВыборкаДетальная.ПорядокВыполнения;
	МенеджерЗаписи.ПодчиненноеЗадание 	= ВыборкаДетальная.ПодчиненноеЗадание;
	МенеджерЗаписи.Действие 			= ВыборкаДетальная.Действие;
	МенеджерЗаписи.Проверка 			= ВыборкаДетальная.Проверка;
	
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.Задание 				= ВыборкаДетальная.Задание;
	МенеджерЗаписи.ТестируемыйКлиент 	= ВыборкаДетальная.ТестируемыйКлиент;
	МенеджерЗаписи.ПорядокВыполнения 	= ВыборкаДетальная.ПорядокВыполнения;
	МенеджерЗаписи.ПодчиненноеЗадание 	= ВыборкаДетальная.ПодчиненноеЗадание;
	МенеджерЗаписи.Действие 			= ВыборкаДетальная.Действие;
	МенеджерЗаписи.Проверка 			= ВыборкаДетальная.Проверка;
	
	Если РезультатДействияУспешно=Истина Тогда
		МенеджерЗаписи.Статус = Перечисления.СтатусыЗаданий.Успешно;
	Иначе
		МенеджерЗаписи.Статус = Перечисления.СтатусыЗаданий.Ошибка;
	КонецЕсли;
	
	МенеджерЗаписи.Сообщение = 	Сообщение;
	МенеджерЗаписи.ДатаВыполнения = ТекущаяДата();
	МенеджерЗаписи.ДатаВыполненияСек = ПланировщикЗаданийКлиентСервер.ПреобразоватьДатуВСек(МенеджерЗаписи.ДатаВыполнения);
	
	МенеджерЗаписи.ЭтапВыполнен = Истина;
	
	МенеджерЗаписи.Записать(Истина);
	
	СоздатьЗаписьЛогВыполненныхЗаданий(ВыборкаДетальная.Задание, ВыборкаДетальная.Сборка, МенеджерЗаписи.ДатаВыполнения, МенеджерЗаписи); 
	
КонецПроцедуры

Процедура ВыполнениеДействийЗаданийИзПуллаПоТипуВыполнитьОбработку(Знач ВыборкаДетальная) Экспорт 
	
	Сообщение = "";
	// 1. Изменим состояние первой задачи
	
	МенеджерЗаписи = РегистрыСведений.СоставЗаданийПулл.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Задание 				= ВыборкаДетальная.Задание;
	МенеджерЗаписи.ТестируемыйКлиент 	= ВыборкаДетальная.ТестируемыйКлиент;
	МенеджерЗаписи.ПорядокВыполнения 	= ВыборкаДетальная.ПорядокВыполнения;
	МенеджерЗаписи.ПодчиненноеЗадание 	= ВыборкаДетальная.ПодчиненноеЗадание;
	МенеджерЗаписи.Действие 			= ВыборкаДетальная.Действие;
	МенеджерЗаписи.Проверка 			= ВыборкаДетальная.Проверка;	
	
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.Задание = ВыборкаДетальная.Задание;
	МенеджерЗаписи.ТестируемыйКлиент 	= ВыборкаДетальная.ТестируемыйКлиент;
	МенеджерЗаписи.ПорядокВыполнения 	= ВыборкаДетальная.ПорядокВыполнения;
	МенеджерЗаписи.ПодчиненноеЗадание 	= ВыборкаДетальная.ПодчиненноеЗадание;
	МенеджерЗаписи.Действие 			= ВыборкаДетальная.Действие;
	МенеджерЗаписи.Проверка 			= ВыборкаДетальная.Проверка;	

	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыборкаДетальная.Действие,"ИмяПроцедурыОбработки,ПутьКФайлу,ИспользоватьШаблонКоманды,Обработка");
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.ИмяПроцедурыОбработки) Тогда
		// если указан путь, то используем его
		// иначе обработку
		Если ЗначениеЗаполнено(СтруктураРеквизитов.ПутьКФайлу) Тогда
		ИначеЕсли ЗначениеЗаполнено(СтруктураРеквизитов.Обработка) Тогда
		Иначе
			Сообщение = "Не указан ПутьКФайлу или Обработка для действия '"+ВыборкаДетальная.Действие+"'. Не возможно выполнение.";
			МенеджерЗаписи.Статус = Перечисления.СтатусыЗаданий.Ошибка;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Сообщение) Тогда
			
			Попытка
				
				// получим описание обработки
				СтруктураРеквизитовОбработки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураРеквизитов.Обработка,"ИмяФайла,БезопасныйРежим,ИмяОбъекта,ХранилищеОбработки,ХранилищеНастроек");
				ПутьКФайлу = ПолучитьИмяВременногоФайла(СтруктураРеквизитовОбработки.ИмяФайла);
				ДвоичныеДанные = СтруктураРеквизитовОбработки.ХранилищеОбработки.Получить();
				
				// выполним ее
				ДвоичныеДанные.Записать(ПутьКФайлу);
				ОбработкаОбъект = ВнешниеОбработки.Создать(ПутьКФайлу,СтруктураРеквизитовОбработки.БезопасныйРежим);
				Выполнить("ОбработкаОбъект."+СтруктураРеквизитов.ИмяПроцедурыОбработки+"();");
				
				// попроуем удалить файл
				Попытка
					УдалитьФайлы(ПутьКФайлу);
				Исключение
					ТекстОшибки = ОписаниеОшибки();					
					ЗаписьЖурналаРегистрации("Планировщик.ВыполнениеДействийЗаданийИзПуллаПоТипуВыполнитьОбработку",УровеньЖурналаРегистрации.Ошибка,Неопределено,Неопределено,ОписаниеОшибки());
				КонецПопытки;
				
				МенеджерЗаписи.Статус = Перечисления.СтатусыЗаданий.Успешно;
			Исключение
				
				ТекстОшибки = ОписаниеОшибки();
				Сообщение = ТекстОшибки;
				МенеджерЗаписи.Статус = Перечисления.СтатусыЗаданий.Ошибка;
				ЗаписьЖурналаРегистрации("Планировщик.ВыполнениеДействийЗаданийИзПуллаПоТипуВыполнитьОбработку",УровеньЖурналаРегистрации.Ошибка,Неопределено,Неопределено,ОписаниеОшибки());

			КонецПопытки;
		КонецЕсли;
	Иначе
		
		Сообщение = "Не указано ИмяПроцеудрыОбработки для действия '"+ВыборкаДетальная.Действие+"'. Не возможно выполнени";
		МенеджерЗаписи.Статус = Перечисления.СтатусыЗаданий.Ошибка;
		
	КонецЕсли;
	
	МенеджерЗаписи.Сообщение = Сообщение;
	МенеджерЗаписи.ДатаВыполнения = ТекущаяДата();
	МенеджерЗаписи.ДатаВыполненияСек = ПланировщикЗаданийКлиентСервер.ПреобразоватьДатуВСек(МенеджерЗаписи.ДатаВыполнения);
	
	МенеджерЗаписи.ЭтапВыполнен = Истина;
	
	МенеджерЗаписи.Записать(Истина);
	
	СоздатьЗаписьЛогВыполненныхЗаданий(ВыборкаДетальная.Задание, ВыборкаДетальная.Сборка, МенеджерЗаписи.ДатаВыполнения, МенеджерЗаписи); 
	
КонецПроцедуры

#КонецОбласти

#Область  РаботаСПеременными

Функция УдалитьЗначениеПеременной(Знач Задание,Знач ИмяПеременной) Экспорт
	
	Попытка
		МенеджерЗаписи 						= РегистрыСведений.ПеременныеЗаданий.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Задание 				= Задание;
		МенеджерЗаписи.ИмяПеременной 		= ИмяПеременной;
		МенеджерЗаписи.Удалить();		
	Исключение
		ЗаписьЖурналаРегистрации("Планировщик.УдалитьЗначениеПеременной",УровеньЖурналаРегистрации.Ошибка,Неопределено,Неопределено,"Удаление значения переменной "+Строка(ИмяПеременной)+Символы.ПС+ОписаниеОшибки(),РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция УстановитьЗначениеПеременной(Знач Задание,Знач ИмяПеременной,Знач ЗначениеПеременной,Знач Ключ=Неопределено) Экспорт
	
	Попытка
		
		МенеджерЗаписи 						= РегистрыСведений.ПеременныеЗаданий.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Задание 				= Задание;
		МенеджерЗаписи.ИмяПеременной 		= ИмяПеременной;
		МенеджерЗаписи.ЗначениеПеременной 	= ЗначениеПеременной;
		МенеджерЗаписи.Ключ 				= Ключ;
		
		МенеджерЗаписи.Записать(Истина);
	Исключение
		ЗаписьЖурналаРегистрации("Планировщик.УстановитьЗначениеПеременной",УровеньЖурналаРегистрации.Ошибка,Неопределено,Неопределено,"Установка значения переменной "+Строка(ИмяПеременной)+"("+Строка(ЗначениеПеременной)+")"+Символы.ПС+ОписаниеОшибки(),РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьЗначениеПеременной(Знач Задание,Знач ИмяПеременной,Знач Ключ=Неопределено) Экспорт
	ЗначениеПеременной = Неопределено;
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПеременныеЗаданий.ЗначениеПеременной
	|ИЗ
	|	РегистрСведений.ПеременныеЗаданий КАК ПеременныеЗаданий
	|ГДЕ
	|	ПеременныеЗаданий.Задание = &Задание
	|	И ПеременныеЗаданий.ИмяПеременной = &ИмяПеременной
	|	И ПеременныеЗаданий.Ключ = &Ключ
	|	И ПеременныеЗаданий.ЭтоПараметрНастройки = ЛОЖЬ";
	Запрос.УстановитьПараметр("Задание",Задание);
	Запрос.УстановитьПараметр("Ключ",Ключ);
	Запрос.УстановитьПараметр("ИмяПеременной",ИмяПеременной);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ЗначениеПеременной;
	КонецЕсли;
	
	Возврат ЗначениеПеременной;
КонецФункции

Функция УдалитьЗначениеПользовательскойПеременной(Знач Задание,Знач ИмяПеременной) Экспорт
	
	Попытка
		МенеджерЗаписи 						= РегистрыСведений.ПользовательскиеПеременныеЗаданий.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Задание 				= Задание;
		МенеджерЗаписи.ИмяПеременной 		= ИмяПеременной;
		МенеджерЗаписи.Удалить();		
	Исключение
		ЗаписьЖурналаРегистрации("Планировщик.УдалитьЗначениеПользовательскойПеременной",УровеньЖурналаРегистрации.Ошибка,Неопределено,Неопределено,"Удаление значения переменной "+Строка(ИмяПеременной)+Символы.ПС+ОписаниеОшибки(),РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция УстановитьЗначениеПользовательскойПеременной(Знач Задание,Знач ИмяПеременной,Знач ЗначениеПеременной,Знач Ключ=Неопределено) Экспорт
	
	Попытка
		
		МенеджерЗаписи 						= РегистрыСведений.ПользовательскиеПеременныеЗаданий.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Задание 				= Задание;
		МенеджерЗаписи.ИмяПеременной 		= ИмяПеременной;
		МенеджерЗаписи.ЗначениеПеременной 	= ЗначениеПеременной;
		МенеджерЗаписи.Ключ 				= Ключ;
		
		МенеджерЗаписи.Записать(Истина);
	Исключение
		ЗаписьЖурналаРегистрации("Планировщик.УстановитьЗначениеПользовательскойПеременной",УровеньЖурналаРегистрации.Ошибка,Неопределено,Неопределено,"Установка значения переменной "+Строка(ИмяПеременной)+"("+Строка(ЗначениеПеременной)+")"+Символы.ПС+ОписаниеОшибки(),РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьЗначениеПользовательскойПеременной(Знач Задание,Знач ИмяПеременной,Знач Ключ=Неопределено) Экспорт
	ЗначениеПеременной = Неопределено;
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПеременныеЗаданий.ЗначениеПеременной
	|ИЗ
	|	РегистрСведений.ПользовательскиеПеременныеЗаданий КАК ПеременныеЗаданий
	|ГДЕ
	|	ПеременныеЗаданий.Задание = &Задание
	|	И ПеременныеЗаданий.ИмяПеременной = &ИмяПеременной
	|	И ПеременныеЗаданий.Ключ = &Ключ
	|	И ПеременныеЗаданий.ЭтоПараметрНастройки = ЛОЖЬ";
	Запрос.УстановитьПараметр("Задание",Задание);
	Запрос.УстановитьПараметр("Ключ",Ключ);
	Запрос.УстановитьПараметр("ИмяПеременной",ИмяПеременной);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ЗначениеПеременной;
	КонецЕсли;
	
	Возврат ЗначениеПеременной;
КонецФункции

#КонецОбласти