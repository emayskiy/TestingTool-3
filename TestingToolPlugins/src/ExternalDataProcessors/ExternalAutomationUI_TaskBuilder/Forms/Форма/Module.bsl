
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// првоерим соответсвие конфигурации
	Версия = РеквизитФормыВЗначение("Объект").СведенияОВнешнейОбработке().Версия;
	
	РедактироватьКонструктором = Истина;
	ИдентификаторКонструктора = "ExternalAutomationUI_TaskBuilder";
	ИдентификаторКонструктораУниверсальный = "Universal";
	ExternalAutomationUIPath = "ExternAutomationUI";
	
	// Открыта форма редактирования
	Если ЗначениеЗаполнено(Параметры.Задание) Тогда		
		Задание = Параметры.Задание;
	Иначе
		СоздаватьИскатьДействияАвтоматически = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("ОбъектыНазначения") Тогда
		Если ТипЗнч(Параметры.ОбъектыНазначения) = Тип("Массив")
			И Параметры.ОбъектыНазначения.Количество()>0 Тогда			
			Задание = Параметры.ОбъектыНазначения[0];
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Задание) Тогда
		НайтиПараметрыПоЗаданию();
	Иначе
		НайтиШаблоныДействия();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(АдресИнтернетExternalAutomationUI) Тогда
		АдресИнтернетExternalAutomationUI = "http://localhost:8080";
		ПортExternalAutomationUI = "8080";
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ВыполняемоеДействие) Тогда
		ВыполняемоеДействие = "Запустить";
	КонецЕсли;
	
	Элементы.СтраницыОбработки.ОтображениеСтраниц=ОтображениеСтраницФормы.Нет;
	ОтработатьПеремещениеПоСтраницам();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеПриИзменении(Элемент)
	НайтиПараметрыПоЗаданию();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(TaskID) Тогда
		TaskID = СценарноеТестированиеКлиентСервер.СформироватьАвтоматическиИдентификаторТеста(Наименование);
	КонецЕсли;
КонецПроцедуры

#Область ЗагрузкаПараметровЗадания

// Процедура - Найти параметры по заданию
// Ищет при открытии уже созданного задания параметры для запуска
&НаСервере
Процедура НайтиПараметрыПоЗаданию()
	
	Элементы.СоздатьНовоеЗадание.Заголовок = "Применить изменения";
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задания.Наименование,
	|	Задания.ID,
	|	Задания.Автор,
	|	Задания.ГруппаЗадания,
	|	Задания.Ответственный,
	|	Задания.ИдентификаторКонструктора,
	|	Задания.Родитель
	|ИЗ
	|	Справочник.Задания КАК Задания
	|ГДЕ
	|	Задания.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",Задание);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ВызватьИсключение "Ошибка редактирования запроса в конструкторе...";
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Наименование = Выборка.Наименование;
	TaskID = Выборка.ID; 
	Ответственный = Выборка.Ответственный;
	ГруппаЗадания = Выборка.ГруппаЗадания;
	Родитель =  Выборка.Родитель;


	АдресИнтернетExternalAutomationUI = КонструкторЗаданийСервер.ПолучитьЗначениеПараметра(Задание,"%АдресИнтернетExternAutomationUI%", Ложь);
	ПортExternalAutomationUI = КонструкторЗаданийСервер.ПолучитьЗначениеПараметра(Задание,"%ПортExternAutomationUI%", Ложь);
	ВыполняемоеДействие = КонструкторЗаданийСервер.ПолучитьЗначениеПараметра(Задание,"ВыполняемоеДействие", Истина); 
	ExternalAutomationUIPath = КонструкторЗаданийСервер.ПолучитьЗначениеПараметра(Задание,"%ExternalAutomationUIPath%", Ложь);
	
	НайтиШаблоныДействия();
	
КонецПроцедуры

&НаСервере
Функция  ПолучитьЗначениеПараметраПоРегистру(Знач Владелец, Знач ИмяПеременной,Знач ЭтоПараметрНастройки=Истина)
	
	ЗначениеПараметра = Неопределено;
	
	// параметр СоздаватьИскатьАвтоматически
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПеременныеЗаданий.ЗначениеПеременной КАК Значение
	|ИЗ
	|	РегистрСведений.ПеременныеЗаданий КАК ПеременныеЗаданий
	|ГДЕ
	|	ПеременныеЗаданий.Задание = &Задание
	|	И ПеременныеЗаданий.ИмяПеременной = &ИмяПеременной
	|	И ПеременныеЗаданий.ЭтоПараметрНастройки = &ЭтоПараметрНастройки";
	Запрос.УстановитьПараметр("Задание",Владелец);
	Запрос.УстановитьПараметр("ИмяПеременной",ИмяПеременной);
	Запрос.УстановитьПараметр("ЭтоПараметрНастройки",ЭтоПараметрНастройки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗначениеПараметра = Выборка.Значение;
	КонецЕсли;

	Возврат ЗначениеПараметра;
	
КонецФункции


&НаСервере
Процедура НайтиШаблоныДействия()
	
	Перем КлючПоискаШаблона;

	// шаблон	
	КлючПоискаШаблона = ПолучитьКлючПоискаШаблона(); 
	ШаблонКоманды = НайтиШаблонКоманды(ИдентификаторКонструктораУниверсальный,ПолучитьТекстШаблонаЗапускаExternalAutoamtionUI(),КлючПоискаШаблона);
	
	// действия
	КлючПоискаДействия = ПолучитьКлючПоискаШаблона()+"/"+ВыполняемоеДействие;
	Действие = НайтиДействиеЗадания(ИдентификаторКонструктораУниверсальный,КлючПоискаДействия);
	

КонецПроцедуры

#КонецОбласти

#Область Навигация

&НаКлиенте
Процедура Вперед(Команда)
	Если Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаИнициализация Тогда
		
		// условие переключения на следующий шаг
		Если НЕ ПроверитьНаличиеПодобноегоЗадания(Наименование,TaskID,Задание) Тогда
			Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаНастройки;
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаНастройки Тогда
		
		Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаСоставЗадания;
		ПолучитьСоставПоЗаданию();
		
	ИначеЕсли Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаСоставЗадания Тогда
		
		ОбобщениеHTML = СформироватьОписаниеСоздаваемогоЗдания();
		Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаИтого;
		
	ИначеЕсли Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаИтого Тогда
		
	КонецЕсли;
	
	ОтработатьПеремещениеПоСтраницам();
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	// назад без проверок
	Если Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаИнициализация Тогда
	ИначеЕсли Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаНастройки Тогда
		Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаИнициализация;
	ИначеЕсли Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаСоставЗадания Тогда
		Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаНастройки;
	ИначеЕсли Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаИтого Тогда
		Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаСоставЗадания;
	КонецЕсли;	
	
	ОтработатьПеремещениеПоСтраницам();
КонецПроцедуры

&НаКлиенте
Процедура ОтработатьПеремещениеПоСтраницам()
	
	Если Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаИнициализация Тогда
		Элементы.Назад.Видимость = Ложь;
		Элементы.Вперед.Видимость = Истина;
		Элементы.СоздатьНовоеЗадание.Видимость = Ложь;
	ИначеЕсли Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаНастройки Тогда
		Элементы.Назад.Видимость = Истина;
		Элементы.Вперед.Видимость = Истина;
		Элементы.СоздатьНовоеЗадание.Видимость = Ложь;
	ИначеЕсли Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаСоставЗадания Тогда
		Элементы.Назад.Видимость = Истина;
		Элементы.Вперед.Видимость = Истина;
		Элементы.СоздатьНовоеЗадание.Видимость = Ложь;
	ИначеЕсли Элементы.СтраницыОбработки.ТекущаяСтраница=Элементы.СтраницаИтого Тогда
		Элементы.Назад.Видимость = Истина;
		Элементы.Вперед.Видимость = Ложь;
		Элементы.СоздатьНовоеЗадание.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеЗадания

&НаКлиенте
Процедура СоздатьНовоеЗадание(Команда)
	Если СоздатьНовоеЗаданиеНаСервере()=Истина Тогда
		ОповеститьОбИзменении(Задание);
		ЭтаФорма.Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СоздатьНовоеЗаданиеНаСервере()
	
	
	НачатьТранзакцию();
	
	Попытка
		// Добавляем действия
		// действия
		Если СоздаватьИскатьДействияАвтоматически=Истина И НЕ ЗначениеЗаполнено(Действие) Тогда
			КлючПоискаШаблона = ПолучитьКлючПоискаШаблона()+"/"+ВыполняемоеДействие;
			Если ВыполняемоеДействие="Запустить" Тогда
				Действие = СоздатьДействиеЗадания(ИдентификаторКонструктораУниверсальный,"Запустить внешний сервис 'External Autoamtion UI'",КлючПоискаШаблона,Версия,ВыполняемоеДействие);
			Иначе
				Действие = СоздатьДействиеЗадания(ИдентификаторКонструктораУниверсальный,"Закрыть внешний сервис 'External Autoamtion UI'",КлючПоискаШаблона,Версия,ВыполняемоеДействие);
			КонецЕсли;
			СоздатьОбновитьПараметр(Действие,Справочники.ИменаПеременных.КлючПоиска,КлючПоискаШаблона);
			Если НЕ ЗначениеЗаполнено(Действие) Тогда
				Отказ = Истина;
				Возврат НЕ Отказ;
			КонецЕсли;
		КонецЕсли;		
		
		// I. Создание задания
		// Создаем/ обновляем задание
		Если ЗначениеЗаполнено(Задание) Тогда
			ЗаданиеОбъект = Задание.ПолучитьОбъект();
		Иначе
			ЗаданиеОбъект = Справочники.Задания.СоздатьЭлемент();
		КонецЕсли;	
		
		ЗаданиеОбъект.Наименование = Наименование;
		ЗаданиеОбъект.ID = TaskID;
		ЗаданиеОбъект.Родитель = Родитель;
		ЗаданиеОбъект.ГруппаЗадания = ГруппаЗадания;
		ЗаданиеОбъект.РедактироватьКонструктором = РедактироватьКонструктором;
		ЗаданиеОбъект.ИдентификаторКонструктора = ИдентификаторКонструктора;
		ЗаданиеОбъект.Ответственный = Ответственный;
		Если НЕ ЗначениеЗаполнено(ЗаданиеОбъект.Автор) Тогда
			ЗаданиеОбъект.Автор = Пользователи.ТекущийПользователь();
		КонецЕсли;
		
		Попытка
			ЗаданиеОбъект.Записать();
			Задание = ЗаданиеОбъект.Ссылка;
		Исключение
			ОтменитьТранзакцию();
			Отказ = Истина;
			Сообщить(ОписаниеОшибки());		
			Возврат НЕ Отказ;
		КонецПопытки;
		
		// II. Состав задания
		// обновляем регистр состав
		НаборЗаписей = РегистрыСведений.СоставЗаданий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Задание.Установить(Задание);
		
		ПорядокВыполнения = 1;
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Задание = Задание;
		НоваяЗапись.ПорядокВыполнения = ПорядокВыполнения;
		НоваяЗапись.Действие = Действие;
		ПорядокВыполнения = ПорядокВыполнения +1;
		
		НаборЗаписей.Записать();
		
		// III. Состав задания
		// сохраняем параметры
		СоздатьОбновитьПараметр(Задание,"%АдресИнтернетExternalAutomationUI%",АдресИнтернетExternalAutomationUI,Ложь); 		
		СоздатьОбновитьПараметр(Задание,"%ПортExternalAutomationUI%",ПортExternalAutomationUI,Ложь);
		СоздатьОбновитьПараметр(Задание,"%ExternalAutomationUIPath%",ExternalAutomationUIPath,Ложь);
		СоздатьОбновитьПараметр(Задание,"ВыполняемоеДействие",ВыполняемоеДействие,Истина);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ExternalAutomationUI_TaskBuilder",УровеньЖурналаРегистрации.Ошибка,Неопределено,Неопределено,ТекстОшибки);
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

// Процедура - Создать/обновить параметр
//
// Параметры:
//  Владелец			 - 	 - задание, действие, шаблон или др. из регистра сведений параметры заданий измерение "задание"
//  ИмяПеременной		 - 	 - строка или элемент справочника имена пременных
//  ЗначениеПеременной	 - 	 - значение
//  ЭтоПараметрНастройки - 	 - булево
//  Ключ				 - 	 - неопределено
//
//  Создает или обновляет настройку парамтера. Для служебных параметров, которые предназначены только для определения использования в редакторе, используйте опцию (ЭтоПараметрНастройки=Истина)
&НаСервереБезКонтекста
Процедура СоздатьОбновитьПараметр(Знач Владелец,Знач ИмяПеременной,Знач ЗначениеПеременной, Знач ЭтоПараметрНастройки=Истина, Знач Ключ=Неопределено)
	
	МенеджерЗаписи = РегистрыСведений.ПеременныеЗаданий.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.Задание = Владелец;	
	МенеджерЗаписи.ИмяПеременной = ИмяПеременной;
	МенеджерЗаписи.НомерАргумента = 0;
	МенеджерЗаписи.Ключ = Ключ;
	МенеджерЗаписи.ЗначениеПеременной = ЗначениеПеременной;
	МенеджерЗаписи.ЭтоПараметрНастройки = ЭтоПараметрНастройки;
	
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьНаличиеПодобноегоЗадания(Знач Наименование,Знач TaskID,Знач Задание)   	
	
	Если НЕ ЗначениеЗаполнено(Наименование) Тогда
		Сообщить("Укажите наименование нового задания!");
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(TaskID) Тогда
		Сообщить("Укажите идентификатор нового задания!");
		Возврат Истина;
	КонецЕсли;
	
	// проверим, есть ли такое задание
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Задания.Ссылка,
	|	Задания.ID,
	|	Задания.Наименование
	|ИЗ
	|	Справочник.Задания КАК Задания
	|ГДЕ
	|	(Задания.Наименование = &Наименование
	|			ИЛИ Задания.ID = &TaskID)
	|	И НЕ Задания.Ссылка = &Задание";
	
	Запрос.УстановитьПараметр("Наименование",Наименование);
	Запрос.УстановитьПараметр("TaskID",TaskID);
	Запрос.УстановитьПараметр("Задание",Задание);

	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Сообщить("Уже существет задание с подобным именем или идентификатором. Измените вводимые данные! Наименование - " +Выборка.Наименование+" Идентификатор - "+Выборка.TaskID);
		
	КонецЦикла; 
	
	
	Возврат Истина;
	
	
КонецФункции

&НаКлиенте
Процедура СоздаватьИскатьДействияАвтоматическиПриИзменении(Элемент)
	//TODO: Вставить содержимое обработчика 
КонецПроцедуры


&НаКлиенте
Функция СформироватьОписаниеСоздаваемогоЗдания()
	
	Html = "<html><head></head><body>";
	Html = Html + "<h3>Свойства задания</h3>";
	Html = Html + "<b>Наименование:</b>  <span color='blue'>"+Наименование+"</span></br>";
	Html = Html + "<b>Идентификатор задания:</b> <span color='blue'>"+TaskID+"</span></br>";
	Html = Html + "Ответственный: "+?(ЗначениеЗаполнено(Ответственный),Ответственный,"---")+"</br>";
	Html = Html + "Родитель: "+?(ЗначениеЗаполнено(Родитель),Родитель,"---")+"</br>";
	Html = Html + "ГруппаЗадания: "+?(ЗначениеЗаполнено(ГруппаЗадания),ГруппаЗадания,"---")+"</br>";
	Html = Html + "<h3>Параметры задания</h3>";
	Html = Html + "<b>Адрес интернет внешнего сервиса:</b> <span color='blue'>"+АдресИнтернетExternalAutomationUI+"</b></br>";
	Html = Html + "Порт внешнего сервиса: <span color='blue'>"+ПортExternalAutomationUI+"</b></br>";
	Html = Html + "Путь относительно корня git к папке исполняемого файла (WinAutomationUI.exe) с обвязкой: <span color='blue'>"+ExternalAutomationUIPath+"</b></br>";
	Html = Html + "<b>Выполняемое действие:</b> <span color='blue'>"+ВыполняемоеДействие+"</b></br>";
	Html = Html + "<h3>Структура действий</h3>";
	Html = Html + "<b>Действие:</b> <span color='blue'>"+?(ЗначениеЗаполнено(Действие),Действие,"<будет создано>")+"</b></br>";
	Html = Html+"</body></html>";
	
	Возврат Html;
	
КонецФункции

#КонецОбласти

#Область ДействиеЗадания


&НаСервере
Процедура ПолучитьСоставПоЗаданию()
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СоставЗаданий.Действие  как Ссылка
	|ИЗ
	|	РегистрСведений.СоставЗаданий КАК СоставЗаданий
	|ГДЕ
	|	СоставЗаданий.Задание = &Задание
	|
	|УПОРЯДОЧИТЬ ПО
	|	СоставЗаданий.ПорядокВыполнения";
	Запрос.УстановитьПараметр("Задание",Задание);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Действие = Выборка.Ссылка;
	КонецЕсли;	

КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьДействиеЗадания(Знач ИдентификаторКонструктора, Знач Наименование, Знач КлючПоиска, Знач Версия, Знач ВыполняемоеДействие)
	
	ДействиеСсылка = Справочники.ДействияЗаданий.ПустаяСсылка();
	
	ДействиеОбъект = Справочники.ДействияЗаданий.СоздатьЭлемент();
	ДействиеОбъект.Наименование 				= Наименование;
	ДействиеОбъект.ИдентификаторКонструктора 	= ИдентификаторКонструктора;
	ДействиеОбъект.РедактироватьКонструктором	= Истина;
	Если ВыполняемоеДействие="Запустить" Тогда
		ДействиеОбъект.ТипДействия					= Перечисления.ТипыДействийЗаданий.ВыполнитьПроизвольныйКодСервер;
		ДействиеОбъект.Код1С = ПолучитьТекстЗапросаЗапускаВнешнегоСервиса();
	ИначеЕсли ВыполняемоеДействие="Закрыть" Тогда
		ДействиеОбъект.ТипДействия					= Перечисления.ТипыДействийЗаданий.ВыполнитьПроизвольныйКодСервер;
		ДействиеОбъект.Код1С = ПолучитьТекстЗапросаЗакрытияВнешнегоСервиса();
	Иначе
		ВызватьИсключение "Не известное задание по шаблону!";
	КонецЕсли;                                               	
	ДействиеОбъект.Автор						= Пользователи.ТекущийПользователь();
	ДействиеОбъект.Версия 						= Версия;
	
	Попытка
		ДействиеОбъект.Записать();
		ДействиеСсылка = ДействиеОбъект.Ссылка;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Сообщить(ОписаниеОшибки());
		ЗаписьЖурналаРегистрации("СозатьДействиеЗадания",УровеньЖурналаРегистрации.Ошибка,Неопределено,Неопределено,ТекстОшибки);
	КонецПопытки;
	
	Возврат ДействиеСсылка;
КонецФункции

&НаСервереБезКонтекста
Функция НайтиДействиеЗадания(Знач ИдентификаторКонструктора, Знач КлючПоиска)
	
	ДействиеСсылка = Справочники.ШаблоныКоманд.ПустаяСсылка();
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка,
	|	0 КАК Порядок
	|ИЗ
	|	РегистрСведений.ПеременныеЗаданий КАК ПеременныеЗаданий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДействияЗаданий КАК Т
	|		ПО ПеременныеЗаданий.Задание = Т.Ссылка
	|			И (ПеременныеЗаданий.НомерАргумента = 0)
	|			И (ПеременныеЗаданий.Ключ = НЕОПРЕДЕЛЕНО)
	|			И (ПеременныеЗаданий.ИмяПеременной = &ИмяПеременной)
	|			И (ПеременныеЗаданий.ЗначениеПеременной = &КлючПоиска)
	|ГДЕ
	|	Т.ИдентификаторКонструктора = &ИдентификаторКонструктора
	|	И Т.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	Запрос.УстановитьПараметр("ИдентификаторКонструктора",ИдентификаторКонструктора);
	Запрос.УстановитьПараметр("ИмяПеременной",Справочники.ИменаПеременных.КлючПоиска);
	Запрос.УстановитьПараметр("КлючПоиска",КлючПоиска);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ДействиеСсылка = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат ДействиеСсылка;
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаЗакрытияВнешнегоСервиса()
	ТекстЗапроса = "
	|// закрыть и удалить параметр
	|Сообщение = "";
	|
	|// Задание и Действие - это входные параметры
	|мПараметры = новый Структура(""Владелец,Действие"",Задание,Действие);
	|
	|ШаблонИмениКлюча = ""ExternalAutomationUI %ПортExternalAutomationUI%"";
	|
	|ИмяКлюча = СценарноеТестированиеСервер.ОбработатьСтрокуПоПараметрам(ШаблонИмениКлюча,мПараметры);
	|
	|PID = ПланировщикЗаданийСервер.ПолучитьЗначениеПользовательскойПеременной(Неопределено,ИмяКлюча);
	|
	|Если НЕ PID=Неопределено Тогда
	|	ПланировщикЗаданийКлиентСервер.ЗавершитьПроцессЛокально(PID,Сообщение);
	|	ПланировщикЗаданийСервер.УдалитьЗначениеПользовательскойПеременной(Неопределено,ИмяКлюча);
	|КонецЕсли;
	|";
	Возврат ТекстЗапроса;
КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаЗапускаВнешнегоСервиса()
	ТекстЗапроса = "
	|
	|Сообщение = "";
	|// Задание и Действие - это входные параметры
	|мПараметры = новый Структура(""Владелец,Действие"",Задание,Действие);
	|
	|// I) если открыт, то закроем
	|ШаблонИмениКлюча = ""ExternalAutomationUI %ПортExternalAutomationUI%"";
	|
	|ИмяКлюча = СценарноеТестированиеСервер.ОбработатьСтрокуПоПараметрам(ШаблонИмениКлюча,мПараметры);
	|
	|PID = ПланировщикЗаданийСервер.ПолучитьЗначениеПользовательскойПеременной(Неопределено,ИмяКлюча);
	|
	|Если НЕ PID=Неопределено Тогда
	|	ПланировщикЗаданийКлиентСервер.ЗавершитьПроцессЛокально(PID,Сообщение);
	|КонецЕсли;
	|
	|// II) запустить и сохранить в параметр
	|
	|ШаблонКоманды = ""%ПутьККаталогуGIT%\%ExternalAutomationUIPath%\WinAutomationUI.exe -StartWebServer -Port %ПортExternalAutomationUI%"";
	|
	|СтрокаЗапуска = СценарноеТестированиеСервер.ОбработатьСтрокуПоПараметрам(ШаблонКоманды,мПараметры);
	|
	|PID = ПланировщикЗаданийКлиентСервер.ЗапуститьПриложениеЛокально(СтрокаЗапуска,Сообщение);
	|
	|Если PID>0 Тогда
	|	ПланировщикЗаданийСервер.УстановитьЗначениеПользовательскойПеременной(Неопределено,ИмяКлюча,PID);
	|КонецЕсли;
	|
	|";
	Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти

#Область ШаблонКоманды


&НаСервере
Функция ПолучитьКлючПоискаШаблона(Знач Действие="")
	Ключ = "ExternalAutomationUI";
	Возврат Ключ;
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьШаблонКоманды(Знач ИдентификаторКонструктора, Знач Наименование, Знач КлючПоиска, Знач ТекстШаблона,Знач Версия)
	
	ШаблонСсылка = Справочники.ШаблоныКоманд.ПустаяСсылка();
	
	ШаблонОбъект = Справочники.ШаблоныКоманд.СоздатьЭлемент();
	ШаблонОбъект.Наименование 				= Наименование;
	ШаблонОбъект.ИдентификаторКонструктора 	= ИдентификаторКонструктора;
	ШаблонОбъект.ТекстШаблона 				= ТекстШаблона;
	ШаблонОбъект.РедактироватьКонструктором = Истина;
	ШаблонОбъект.Версия 					= Версия;
	
	Попытка
		ШаблонОбъект.Записать();
		ШаблонСсылка = ШаблонОбъект.Ссылка;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Сообщить(ОписаниеОшибки());
		ЗаписьЖурналаРегистрации("СозатьШаблонКоманды",УровеньЖурналаРегистрации.Ошибка,Неопределено,Неопределено,ТекстОшибки);
	КонецПопытки;
	
	Возврат ШаблонСсылка;
КонецФункции

&НаСервереБезКонтекста
Функция НайтиШаблонКоманды(Знач ИдентификаторКонструктора,Знач ТекстШаблона="",Знач КлючПоиска="")
	
	ШаблонСсылка = Справочники.ШаблоныКоманд.ПустаяСсылка();
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка,
	|	0 КАК Порядок
	|ИЗ
	|	РегистрСведений.ПеременныеЗаданий КАК ПеременныеЗаданий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныКоманд КАК Т
	|		ПО ПеременныеЗаданий.Задание = Т.Ссылка
	|			И (ПеременныеЗаданий.НомерАргумента = 0)
	|			И (ПеременныеЗаданий.Ключ = НЕОПРЕДЕЛЕНО)
	|			И (ПеременныеЗаданий.ИмяПеременной = &ИмяПеременной)
	|			И (ПеременныеЗаданий.ЗначениеПеременной = &КлючПоиска)
	|ГДЕ
	|	Т.ИдентификаторКонструктора = &ИдентификаторКонструктора
	|	И Т.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Ссылка,
	|	1
	|ИЗ
	|	Справочник.ШаблоныКоманд КАК Т
	|ГДЕ
	|	Т.ПометкаУдаления = ЛОЖЬ
	|	И (ВЫРАЗИТЬ(Т.ТекстШаблона КАК СТРОКА(1000))) = (ВЫРАЗИТЬ(&ТекстШаблона КАК СТРОКА(1000)))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	Запрос.УстановитьПараметр("ИдентификаторКонструктора",ИдентификаторКонструктора);
	Запрос.УстановитьПараметр("ИмяПеременной",Справочники.ИменаПеременных.КлючПоиска);
	Запрос.УстановитьПараметр("КлючПоиска",КлючПоиска);
	Запрос.УстановитьПараметр("ТекстШаблона",ТекстШаблона);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ШаблонСсылка = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;	
	
	Возврат ШаблонСсылка;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстШаблонаЗапускаExternalAutoamtionUI()
	Возврат """%ПутьККаталогуGIT%\%ExternalAutomationUIPath%\WinAutomationUI.exe
	| -StartWebServer
	| -Port %НомерПорта_ExternalautomationUI%"" ";
КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Функция ПолучитьПортАдресаИнтернет(Знач АдресИнтернет)
	Порт = 8080;
	АдресИнтернет = СтрЗаменить(АдресИнтернет,"http://","");
	АдресИнтернет = СтрЗаменить(АдресИнтернет,"https://","");
	ПозицияДвоеточия = Найти(АдресИнтернет,":");
	Если ПозицияДвоеточия<>0 Тогда
		АдресИнтернет = СокрЛП(АдресИнтернет);
		ПортСтр = "";
		Для ш=ПозицияДвоеточия+1 по СтрДлина(АдресИнтернет) Цикл
			ТекСимвол = Сред(АдресИнтернет,ш,1);
			Если Найти("0123456789",ТекСимвол) Тогда
				ПортСтр = ПортСтр+ТекСимвол;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Попытка 
			Порт = XMLСтрока(Число(ПортСтр));
		Исключение
			Сообщить("Введенный адрес интернет не корректный (шаблон:'http://localhost:8080')");
		КонецПопытки;
	КонецЕсли;
	Возврат Порт;
КонецФункции


&НаКлиенте
Процедура АдресИнтернетExternAutomationUIПриИзменении(Элемент)
	ПортExternalAutomationUI = Формат(ПолучитьПортАдресаИнтернет(АдресИнтернетExternalAutomationUI),"ЧГ=;");
КонецПроцедуры

&НаКлиенте
Процедура ВыполняемоеДействиеПриИзменении(Элемент)
	НайтиШаблоныДействия();
КонецПроцедуры
